-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity surfDetector is
generic (
    C_M_AXI_KEYPOINTS_V_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_KEYPOINTS_V_ID_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_V_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_V_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_KEYPOINTS_V_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_V_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_V_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_V_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KPN_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_KPN_ID_WIDTH : INTEGER := 1;
    C_M_AXI_KPN_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KPN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_KPN_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KPN_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KPN_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KPN_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_V_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_KEYPOINTS_V_USER_VALUE : INTEGER := 0;
    C_M_AXI_KEYPOINTS_V_PROT_VALUE : INTEGER := 0;
    C_M_AXI_KEYPOINTS_V_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_KPN_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_KPN_USER_VALUE : INTEGER := 0;
    C_M_AXI_KPN_PROT_VALUE : INTEGER := 0;
    C_M_AXI_KPN_CACHE_VALUE : INTEGER := 3 );
port (
    m_axi_keyPoints_V_AWVALID : OUT STD_LOGIC;
    m_axi_keyPoints_V_AWREADY : IN STD_LOGIC;
    m_axi_keyPoints_V_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_ADDR_WIDTH-1 downto 0);
    m_axi_keyPoints_V_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_V_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_keyPoints_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_AWUSER_WIDTH-1 downto 0);
    m_axi_keyPoints_V_WVALID : OUT STD_LOGIC;
    m_axi_keyPoints_V_WREADY : IN STD_LOGIC;
    m_axi_keyPoints_V_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_DATA_WIDTH-1 downto 0);
    m_axi_keyPoints_V_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_DATA_WIDTH/8-1 downto 0);
    m_axi_keyPoints_V_WLAST : OUT STD_LOGIC;
    m_axi_keyPoints_V_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_V_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_WUSER_WIDTH-1 downto 0);
    m_axi_keyPoints_V_ARVALID : OUT STD_LOGIC;
    m_axi_keyPoints_V_ARREADY : IN STD_LOGIC;
    m_axi_keyPoints_V_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_ADDR_WIDTH-1 downto 0);
    m_axi_keyPoints_V_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_V_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_keyPoints_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_ARUSER_WIDTH-1 downto 0);
    m_axi_keyPoints_V_RVALID : IN STD_LOGIC;
    m_axi_keyPoints_V_RREADY : OUT STD_LOGIC;
    m_axi_keyPoints_V_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_DATA_WIDTH-1 downto 0);
    m_axi_keyPoints_V_RLAST : IN STD_LOGIC;
    m_axi_keyPoints_V_RID : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_V_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_RUSER_WIDTH-1 downto 0);
    m_axi_keyPoints_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_BVALID : IN STD_LOGIC;
    m_axi_keyPoints_V_BREADY : OUT STD_LOGIC;
    m_axi_keyPoints_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_BID : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_V_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_V_BUSER_WIDTH-1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_kpn_AWVALID : OUT STD_LOGIC;
    m_axi_kpn_AWREADY : IN STD_LOGIC;
    m_axi_kpn_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_ADDR_WIDTH-1 downto 0);
    m_axi_kpn_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_ID_WIDTH-1 downto 0);
    m_axi_kpn_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kpn_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kpn_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kpn_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kpn_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kpn_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kpn_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kpn_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kpn_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_AWUSER_WIDTH-1 downto 0);
    m_axi_kpn_WVALID : OUT STD_LOGIC;
    m_axi_kpn_WREADY : IN STD_LOGIC;
    m_axi_kpn_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_DATA_WIDTH-1 downto 0);
    m_axi_kpn_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_DATA_WIDTH/8-1 downto 0);
    m_axi_kpn_WLAST : OUT STD_LOGIC;
    m_axi_kpn_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_ID_WIDTH-1 downto 0);
    m_axi_kpn_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_WUSER_WIDTH-1 downto 0);
    m_axi_kpn_ARVALID : OUT STD_LOGIC;
    m_axi_kpn_ARREADY : IN STD_LOGIC;
    m_axi_kpn_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_ADDR_WIDTH-1 downto 0);
    m_axi_kpn_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_ID_WIDTH-1 downto 0);
    m_axi_kpn_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_kpn_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kpn_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kpn_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kpn_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kpn_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_kpn_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kpn_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_kpn_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KPN_ARUSER_WIDTH-1 downto 0);
    m_axi_kpn_RVALID : IN STD_LOGIC;
    m_axi_kpn_RREADY : OUT STD_LOGIC;
    m_axi_kpn_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_KPN_DATA_WIDTH-1 downto 0);
    m_axi_kpn_RLAST : IN STD_LOGIC;
    m_axi_kpn_RID : IN STD_LOGIC_VECTOR (C_M_AXI_KPN_ID_WIDTH-1 downto 0);
    m_axi_kpn_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KPN_RUSER_WIDTH-1 downto 0);
    m_axi_kpn_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kpn_BVALID : IN STD_LOGIC;
    m_axi_kpn_BREADY : OUT STD_LOGIC;
    m_axi_kpn_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_kpn_BID : IN STD_LOGIC_VECTOR (C_M_AXI_KPN_ID_WIDTH-1 downto 0);
    m_axi_kpn_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KPN_BUSER_WIDTH-1 downto 0);
    video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC );
end;


architecture behav of surfDetector is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "surfDetector,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.326000,HLS_SYN_LAT=72211357,HLS_SYN_TPT=72211354,HLS_SYN_MEM=68,HLS_SYN_DSP=29,HLS_SYN_FF=10897,HLS_SYN_LUT=45060,HLS_VERSION=2018_3}";
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal keyPoints_V_AWREADY : STD_LOGIC;
    signal keyPoints_V_WREADY : STD_LOGIC;
    signal keyPoints_V_ARREADY : STD_LOGIC;
    signal keyPoints_V_RVALID : STD_LOGIC;
    signal keyPoints_V_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal keyPoints_V_RLAST : STD_LOGIC;
    signal keyPoints_V_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal keyPoints_V_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal keyPoints_V_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal keyPoints_V_BVALID : STD_LOGIC;
    signal keyPoints_V_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal keyPoints_V_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal keyPoints_V_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal kpn_AWREADY : STD_LOGIC;
    signal kpn_WREADY : STD_LOGIC;
    signal kpn_ARREADY : STD_LOGIC;
    signal kpn_RVALID : STD_LOGIC;
    signal kpn_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal kpn_RLAST : STD_LOGIC;
    signal kpn_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal kpn_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal kpn_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal kpn_BVALID : STD_LOGIC;
    signal kpn_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal kpn_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal kpn_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal integralImg_U0_ap_start : STD_LOGIC;
    signal integralImg_U0_ap_done : STD_LOGIC;
    signal integralImg_U0_ap_continue : STD_LOGIC;
    signal integralImg_U0_ap_idle : STD_LOGIC;
    signal integralImg_U0_ap_ready : STD_LOGIC;
    signal integralImg_U0_start_out : STD_LOGIC;
    signal integralImg_U0_start_write : STD_LOGIC;
    signal integralImg_U0_video_in_TREADY : STD_LOGIC;
    signal integralImg_U0_sum_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal integralImg_U0_sum_V_write : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_AWVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_WVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_WLAST : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_RREADY : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_BREADY : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_AWVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_WVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_WLAST : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_RREADY : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_BREADY : STD_LOGIC;
    signal HessianDetector_U0_sum_V_read : STD_LOGIC;
    signal HessianDetector_U0_ap_start : STD_LOGIC;
    signal HessianDetector_U0_ap_done : STD_LOGIC;
    signal HessianDetector_U0_ap_ready : STD_LOGIC;
    signal HessianDetector_U0_ap_idle : STD_LOGIC;
    signal HessianDetector_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal sum_V_full_n : STD_LOGIC;
    signal sum_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_empty_n : STD_LOGIC;
    signal start_for_HessianDetector_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HessianDetector_U0_full_n : STD_LOGIC;
    signal start_for_HessianDetector_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HessianDetector_U0_empty_n : STD_LOGIC;
    signal HessianDetector_U0_start_full_n : STD_LOGIC;
    signal HessianDetector_U0_start_write : STD_LOGIC;

    component integralImg IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        video_in_TVALID : IN STD_LOGIC;
        video_in_TREADY : OUT STD_LOGIC;
        video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        sum_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_V_full_n : IN STD_LOGIC;
        sum_V_write : OUT STD_LOGIC );
    end component;


    component HessianDetector IS
    port (
        m_axi_keyPoints_V_AWVALID : OUT STD_LOGIC;
        m_axi_keyPoints_V_AWREADY : IN STD_LOGIC;
        m_axi_keyPoints_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_keyPoints_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_keyPoints_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_WVALID : OUT STD_LOGIC;
        m_axi_keyPoints_V_WREADY : IN STD_LOGIC;
        m_axi_keyPoints_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_WLAST : OUT STD_LOGIC;
        m_axi_keyPoints_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_ARVALID : OUT STD_LOGIC;
        m_axi_keyPoints_V_ARREADY : IN STD_LOGIC;
        m_axi_keyPoints_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_keyPoints_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_keyPoints_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_RVALID : IN STD_LOGIC;
        m_axi_keyPoints_V_RREADY : OUT STD_LOGIC;
        m_axi_keyPoints_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_RLAST : IN STD_LOGIC;
        m_axi_keyPoints_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_BVALID : IN STD_LOGIC;
        m_axi_keyPoints_V_BREADY : OUT STD_LOGIC;
        m_axi_keyPoints_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_AWVALID : OUT STD_LOGIC;
        m_axi_pointNumber_AWREADY : IN STD_LOGIC;
        m_axi_pointNumber_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pointNumber_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pointNumber_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_WVALID : OUT STD_LOGIC;
        m_axi_pointNumber_WREADY : IN STD_LOGIC;
        m_axi_pointNumber_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_WLAST : OUT STD_LOGIC;
        m_axi_pointNumber_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_ARVALID : OUT STD_LOGIC;
        m_axi_pointNumber_ARREADY : IN STD_LOGIC;
        m_axi_pointNumber_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pointNumber_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pointNumber_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_RVALID : IN STD_LOGIC;
        m_axi_pointNumber_RREADY : OUT STD_LOGIC;
        m_axi_pointNumber_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_RLAST : IN STD_LOGIC;
        m_axi_pointNumber_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_BVALID : IN STD_LOGIC;
        m_axi_pointNumber_BREADY : OUT STD_LOGIC;
        m_axi_pointNumber_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sum_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_V_empty_n : IN STD_LOGIC;
        sum_V_read : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_HessianJfO IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component surfDetector_keyPoints_V_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component surfDetector_kpn_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    surfDetector_keyPoints_V_m_axi_U : component surfDetector_keyPoints_V_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_KEYPOINTS_V_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_KEYPOINTS_V_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_KEYPOINTS_V_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_KEYPOINTS_V_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_KEYPOINTS_V_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_KEYPOINTS_V_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_KEYPOINTS_V_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_KEYPOINTS_V_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_KEYPOINTS_V_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_KEYPOINTS_V_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_KEYPOINTS_V_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_KEYPOINTS_V_CACHE_VALUE)
    port map (
        AWVALID => m_axi_keyPoints_V_AWVALID,
        AWREADY => m_axi_keyPoints_V_AWREADY,
        AWADDR => m_axi_keyPoints_V_AWADDR,
        AWID => m_axi_keyPoints_V_AWID,
        AWLEN => m_axi_keyPoints_V_AWLEN,
        AWSIZE => m_axi_keyPoints_V_AWSIZE,
        AWBURST => m_axi_keyPoints_V_AWBURST,
        AWLOCK => m_axi_keyPoints_V_AWLOCK,
        AWCACHE => m_axi_keyPoints_V_AWCACHE,
        AWPROT => m_axi_keyPoints_V_AWPROT,
        AWQOS => m_axi_keyPoints_V_AWQOS,
        AWREGION => m_axi_keyPoints_V_AWREGION,
        AWUSER => m_axi_keyPoints_V_AWUSER,
        WVALID => m_axi_keyPoints_V_WVALID,
        WREADY => m_axi_keyPoints_V_WREADY,
        WDATA => m_axi_keyPoints_V_WDATA,
        WSTRB => m_axi_keyPoints_V_WSTRB,
        WLAST => m_axi_keyPoints_V_WLAST,
        WID => m_axi_keyPoints_V_WID,
        WUSER => m_axi_keyPoints_V_WUSER,
        ARVALID => m_axi_keyPoints_V_ARVALID,
        ARREADY => m_axi_keyPoints_V_ARREADY,
        ARADDR => m_axi_keyPoints_V_ARADDR,
        ARID => m_axi_keyPoints_V_ARID,
        ARLEN => m_axi_keyPoints_V_ARLEN,
        ARSIZE => m_axi_keyPoints_V_ARSIZE,
        ARBURST => m_axi_keyPoints_V_ARBURST,
        ARLOCK => m_axi_keyPoints_V_ARLOCK,
        ARCACHE => m_axi_keyPoints_V_ARCACHE,
        ARPROT => m_axi_keyPoints_V_ARPROT,
        ARQOS => m_axi_keyPoints_V_ARQOS,
        ARREGION => m_axi_keyPoints_V_ARREGION,
        ARUSER => m_axi_keyPoints_V_ARUSER,
        RVALID => m_axi_keyPoints_V_RVALID,
        RREADY => m_axi_keyPoints_V_RREADY,
        RDATA => m_axi_keyPoints_V_RDATA,
        RLAST => m_axi_keyPoints_V_RLAST,
        RID => m_axi_keyPoints_V_RID,
        RUSER => m_axi_keyPoints_V_RUSER,
        RRESP => m_axi_keyPoints_V_RRESP,
        BVALID => m_axi_keyPoints_V_BVALID,
        BREADY => m_axi_keyPoints_V_BREADY,
        BRESP => m_axi_keyPoints_V_BRESP,
        BID => m_axi_keyPoints_V_BID,
        BUSER => m_axi_keyPoints_V_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => keyPoints_V_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => keyPoints_V_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => keyPoints_V_RDATA,
        I_RID => keyPoints_V_RID,
        I_RUSER => keyPoints_V_RUSER,
        I_RRESP => keyPoints_V_RRESP,
        I_RLAST => keyPoints_V_RLAST,
        I_AWVALID => HessianDetector_U0_m_axi_keyPoints_V_AWVALID,
        I_AWREADY => keyPoints_V_AWREADY,
        I_AWADDR => HessianDetector_U0_m_axi_keyPoints_V_AWADDR,
        I_AWID => HessianDetector_U0_m_axi_keyPoints_V_AWID,
        I_AWLEN => HessianDetector_U0_m_axi_keyPoints_V_AWLEN,
        I_AWSIZE => HessianDetector_U0_m_axi_keyPoints_V_AWSIZE,
        I_AWLOCK => HessianDetector_U0_m_axi_keyPoints_V_AWLOCK,
        I_AWCACHE => HessianDetector_U0_m_axi_keyPoints_V_AWCACHE,
        I_AWQOS => HessianDetector_U0_m_axi_keyPoints_V_AWQOS,
        I_AWPROT => HessianDetector_U0_m_axi_keyPoints_V_AWPROT,
        I_AWUSER => HessianDetector_U0_m_axi_keyPoints_V_AWUSER,
        I_AWBURST => HessianDetector_U0_m_axi_keyPoints_V_AWBURST,
        I_AWREGION => HessianDetector_U0_m_axi_keyPoints_V_AWREGION,
        I_WVALID => HessianDetector_U0_m_axi_keyPoints_V_WVALID,
        I_WREADY => keyPoints_V_WREADY,
        I_WDATA => HessianDetector_U0_m_axi_keyPoints_V_WDATA,
        I_WID => HessianDetector_U0_m_axi_keyPoints_V_WID,
        I_WUSER => HessianDetector_U0_m_axi_keyPoints_V_WUSER,
        I_WLAST => HessianDetector_U0_m_axi_keyPoints_V_WLAST,
        I_WSTRB => HessianDetector_U0_m_axi_keyPoints_V_WSTRB,
        I_BVALID => keyPoints_V_BVALID,
        I_BREADY => HessianDetector_U0_m_axi_keyPoints_V_BREADY,
        I_BRESP => keyPoints_V_BRESP,
        I_BID => keyPoints_V_BID,
        I_BUSER => keyPoints_V_BUSER);

    surfDetector_kpn_m_axi_U : component surfDetector_kpn_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_KPN_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_KPN_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_KPN_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_KPN_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_KPN_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_KPN_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_KPN_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_KPN_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_KPN_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_KPN_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_KPN_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_KPN_CACHE_VALUE)
    port map (
        AWVALID => m_axi_kpn_AWVALID,
        AWREADY => m_axi_kpn_AWREADY,
        AWADDR => m_axi_kpn_AWADDR,
        AWID => m_axi_kpn_AWID,
        AWLEN => m_axi_kpn_AWLEN,
        AWSIZE => m_axi_kpn_AWSIZE,
        AWBURST => m_axi_kpn_AWBURST,
        AWLOCK => m_axi_kpn_AWLOCK,
        AWCACHE => m_axi_kpn_AWCACHE,
        AWPROT => m_axi_kpn_AWPROT,
        AWQOS => m_axi_kpn_AWQOS,
        AWREGION => m_axi_kpn_AWREGION,
        AWUSER => m_axi_kpn_AWUSER,
        WVALID => m_axi_kpn_WVALID,
        WREADY => m_axi_kpn_WREADY,
        WDATA => m_axi_kpn_WDATA,
        WSTRB => m_axi_kpn_WSTRB,
        WLAST => m_axi_kpn_WLAST,
        WID => m_axi_kpn_WID,
        WUSER => m_axi_kpn_WUSER,
        ARVALID => m_axi_kpn_ARVALID,
        ARREADY => m_axi_kpn_ARREADY,
        ARADDR => m_axi_kpn_ARADDR,
        ARID => m_axi_kpn_ARID,
        ARLEN => m_axi_kpn_ARLEN,
        ARSIZE => m_axi_kpn_ARSIZE,
        ARBURST => m_axi_kpn_ARBURST,
        ARLOCK => m_axi_kpn_ARLOCK,
        ARCACHE => m_axi_kpn_ARCACHE,
        ARPROT => m_axi_kpn_ARPROT,
        ARQOS => m_axi_kpn_ARQOS,
        ARREGION => m_axi_kpn_ARREGION,
        ARUSER => m_axi_kpn_ARUSER,
        RVALID => m_axi_kpn_RVALID,
        RREADY => m_axi_kpn_RREADY,
        RDATA => m_axi_kpn_RDATA,
        RLAST => m_axi_kpn_RLAST,
        RID => m_axi_kpn_RID,
        RUSER => m_axi_kpn_RUSER,
        RRESP => m_axi_kpn_RRESP,
        BVALID => m_axi_kpn_BVALID,
        BREADY => m_axi_kpn_BREADY,
        BRESP => m_axi_kpn_BRESP,
        BID => m_axi_kpn_BID,
        BUSER => m_axi_kpn_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => kpn_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => kpn_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => kpn_RDATA,
        I_RID => kpn_RID,
        I_RUSER => kpn_RUSER,
        I_RRESP => kpn_RRESP,
        I_RLAST => kpn_RLAST,
        I_AWVALID => HessianDetector_U0_m_axi_pointNumber_AWVALID,
        I_AWREADY => kpn_AWREADY,
        I_AWADDR => HessianDetector_U0_m_axi_pointNumber_AWADDR,
        I_AWID => HessianDetector_U0_m_axi_pointNumber_AWID,
        I_AWLEN => HessianDetector_U0_m_axi_pointNumber_AWLEN,
        I_AWSIZE => HessianDetector_U0_m_axi_pointNumber_AWSIZE,
        I_AWLOCK => HessianDetector_U0_m_axi_pointNumber_AWLOCK,
        I_AWCACHE => HessianDetector_U0_m_axi_pointNumber_AWCACHE,
        I_AWQOS => HessianDetector_U0_m_axi_pointNumber_AWQOS,
        I_AWPROT => HessianDetector_U0_m_axi_pointNumber_AWPROT,
        I_AWUSER => HessianDetector_U0_m_axi_pointNumber_AWUSER,
        I_AWBURST => HessianDetector_U0_m_axi_pointNumber_AWBURST,
        I_AWREGION => HessianDetector_U0_m_axi_pointNumber_AWREGION,
        I_WVALID => HessianDetector_U0_m_axi_pointNumber_WVALID,
        I_WREADY => kpn_WREADY,
        I_WDATA => HessianDetector_U0_m_axi_pointNumber_WDATA,
        I_WID => HessianDetector_U0_m_axi_pointNumber_WID,
        I_WUSER => HessianDetector_U0_m_axi_pointNumber_WUSER,
        I_WLAST => HessianDetector_U0_m_axi_pointNumber_WLAST,
        I_WSTRB => HessianDetector_U0_m_axi_pointNumber_WSTRB,
        I_BVALID => kpn_BVALID,
        I_BREADY => HessianDetector_U0_m_axi_pointNumber_BREADY,
        I_BRESP => kpn_BRESP,
        I_BID => kpn_BID,
        I_BUSER => kpn_BUSER);

    integralImg_U0 : component integralImg
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => integralImg_U0_ap_start,
        start_full_n => start_for_HessianDetector_U0_full_n,
        ap_done => integralImg_U0_ap_done,
        ap_continue => integralImg_U0_ap_continue,
        ap_idle => integralImg_U0_ap_idle,
        ap_ready => integralImg_U0_ap_ready,
        start_out => integralImg_U0_start_out,
        start_write => integralImg_U0_start_write,
        video_in_TDATA => video_in_TDATA,
        video_in_TVALID => video_in_TVALID,
        video_in_TREADY => integralImg_U0_video_in_TREADY,
        video_in_TKEEP => video_in_TKEEP,
        video_in_TSTRB => video_in_TSTRB,
        video_in_TUSER => video_in_TUSER,
        video_in_TLAST => video_in_TLAST,
        video_in_TID => video_in_TID,
        video_in_TDEST => video_in_TDEST,
        sum_V_din => integralImg_U0_sum_V_din,
        sum_V_full_n => sum_V_full_n,
        sum_V_write => integralImg_U0_sum_V_write);

    HessianDetector_U0 : component HessianDetector
    port map (
        m_axi_keyPoints_V_AWVALID => HessianDetector_U0_m_axi_keyPoints_V_AWVALID,
        m_axi_keyPoints_V_AWREADY => keyPoints_V_AWREADY,
        m_axi_keyPoints_V_AWADDR => HessianDetector_U0_m_axi_keyPoints_V_AWADDR,
        m_axi_keyPoints_V_AWID => HessianDetector_U0_m_axi_keyPoints_V_AWID,
        m_axi_keyPoints_V_AWLEN => HessianDetector_U0_m_axi_keyPoints_V_AWLEN,
        m_axi_keyPoints_V_AWSIZE => HessianDetector_U0_m_axi_keyPoints_V_AWSIZE,
        m_axi_keyPoints_V_AWBURST => HessianDetector_U0_m_axi_keyPoints_V_AWBURST,
        m_axi_keyPoints_V_AWLOCK => HessianDetector_U0_m_axi_keyPoints_V_AWLOCK,
        m_axi_keyPoints_V_AWCACHE => HessianDetector_U0_m_axi_keyPoints_V_AWCACHE,
        m_axi_keyPoints_V_AWPROT => HessianDetector_U0_m_axi_keyPoints_V_AWPROT,
        m_axi_keyPoints_V_AWQOS => HessianDetector_U0_m_axi_keyPoints_V_AWQOS,
        m_axi_keyPoints_V_AWREGION => HessianDetector_U0_m_axi_keyPoints_V_AWREGION,
        m_axi_keyPoints_V_AWUSER => HessianDetector_U0_m_axi_keyPoints_V_AWUSER,
        m_axi_keyPoints_V_WVALID => HessianDetector_U0_m_axi_keyPoints_V_WVALID,
        m_axi_keyPoints_V_WREADY => keyPoints_V_WREADY,
        m_axi_keyPoints_V_WDATA => HessianDetector_U0_m_axi_keyPoints_V_WDATA,
        m_axi_keyPoints_V_WSTRB => HessianDetector_U0_m_axi_keyPoints_V_WSTRB,
        m_axi_keyPoints_V_WLAST => HessianDetector_U0_m_axi_keyPoints_V_WLAST,
        m_axi_keyPoints_V_WID => HessianDetector_U0_m_axi_keyPoints_V_WID,
        m_axi_keyPoints_V_WUSER => HessianDetector_U0_m_axi_keyPoints_V_WUSER,
        m_axi_keyPoints_V_ARVALID => HessianDetector_U0_m_axi_keyPoints_V_ARVALID,
        m_axi_keyPoints_V_ARREADY => ap_const_logic_0,
        m_axi_keyPoints_V_ARADDR => HessianDetector_U0_m_axi_keyPoints_V_ARADDR,
        m_axi_keyPoints_V_ARID => HessianDetector_U0_m_axi_keyPoints_V_ARID,
        m_axi_keyPoints_V_ARLEN => HessianDetector_U0_m_axi_keyPoints_V_ARLEN,
        m_axi_keyPoints_V_ARSIZE => HessianDetector_U0_m_axi_keyPoints_V_ARSIZE,
        m_axi_keyPoints_V_ARBURST => HessianDetector_U0_m_axi_keyPoints_V_ARBURST,
        m_axi_keyPoints_V_ARLOCK => HessianDetector_U0_m_axi_keyPoints_V_ARLOCK,
        m_axi_keyPoints_V_ARCACHE => HessianDetector_U0_m_axi_keyPoints_V_ARCACHE,
        m_axi_keyPoints_V_ARPROT => HessianDetector_U0_m_axi_keyPoints_V_ARPROT,
        m_axi_keyPoints_V_ARQOS => HessianDetector_U0_m_axi_keyPoints_V_ARQOS,
        m_axi_keyPoints_V_ARREGION => HessianDetector_U0_m_axi_keyPoints_V_ARREGION,
        m_axi_keyPoints_V_ARUSER => HessianDetector_U0_m_axi_keyPoints_V_ARUSER,
        m_axi_keyPoints_V_RVALID => ap_const_logic_0,
        m_axi_keyPoints_V_RREADY => HessianDetector_U0_m_axi_keyPoints_V_RREADY,
        m_axi_keyPoints_V_RDATA => ap_const_lv32_0,
        m_axi_keyPoints_V_RLAST => ap_const_logic_0,
        m_axi_keyPoints_V_RID => ap_const_lv1_0,
        m_axi_keyPoints_V_RUSER => ap_const_lv1_0,
        m_axi_keyPoints_V_RRESP => ap_const_lv2_0,
        m_axi_keyPoints_V_BVALID => keyPoints_V_BVALID,
        m_axi_keyPoints_V_BREADY => HessianDetector_U0_m_axi_keyPoints_V_BREADY,
        m_axi_keyPoints_V_BRESP => keyPoints_V_BRESP,
        m_axi_keyPoints_V_BID => keyPoints_V_BID,
        m_axi_keyPoints_V_BUSER => keyPoints_V_BUSER,
        m_axi_pointNumber_AWVALID => HessianDetector_U0_m_axi_pointNumber_AWVALID,
        m_axi_pointNumber_AWREADY => kpn_AWREADY,
        m_axi_pointNumber_AWADDR => HessianDetector_U0_m_axi_pointNumber_AWADDR,
        m_axi_pointNumber_AWID => HessianDetector_U0_m_axi_pointNumber_AWID,
        m_axi_pointNumber_AWLEN => HessianDetector_U0_m_axi_pointNumber_AWLEN,
        m_axi_pointNumber_AWSIZE => HessianDetector_U0_m_axi_pointNumber_AWSIZE,
        m_axi_pointNumber_AWBURST => HessianDetector_U0_m_axi_pointNumber_AWBURST,
        m_axi_pointNumber_AWLOCK => HessianDetector_U0_m_axi_pointNumber_AWLOCK,
        m_axi_pointNumber_AWCACHE => HessianDetector_U0_m_axi_pointNumber_AWCACHE,
        m_axi_pointNumber_AWPROT => HessianDetector_U0_m_axi_pointNumber_AWPROT,
        m_axi_pointNumber_AWQOS => HessianDetector_U0_m_axi_pointNumber_AWQOS,
        m_axi_pointNumber_AWREGION => HessianDetector_U0_m_axi_pointNumber_AWREGION,
        m_axi_pointNumber_AWUSER => HessianDetector_U0_m_axi_pointNumber_AWUSER,
        m_axi_pointNumber_WVALID => HessianDetector_U0_m_axi_pointNumber_WVALID,
        m_axi_pointNumber_WREADY => kpn_WREADY,
        m_axi_pointNumber_WDATA => HessianDetector_U0_m_axi_pointNumber_WDATA,
        m_axi_pointNumber_WSTRB => HessianDetector_U0_m_axi_pointNumber_WSTRB,
        m_axi_pointNumber_WLAST => HessianDetector_U0_m_axi_pointNumber_WLAST,
        m_axi_pointNumber_WID => HessianDetector_U0_m_axi_pointNumber_WID,
        m_axi_pointNumber_WUSER => HessianDetector_U0_m_axi_pointNumber_WUSER,
        m_axi_pointNumber_ARVALID => HessianDetector_U0_m_axi_pointNumber_ARVALID,
        m_axi_pointNumber_ARREADY => ap_const_logic_0,
        m_axi_pointNumber_ARADDR => HessianDetector_U0_m_axi_pointNumber_ARADDR,
        m_axi_pointNumber_ARID => HessianDetector_U0_m_axi_pointNumber_ARID,
        m_axi_pointNumber_ARLEN => HessianDetector_U0_m_axi_pointNumber_ARLEN,
        m_axi_pointNumber_ARSIZE => HessianDetector_U0_m_axi_pointNumber_ARSIZE,
        m_axi_pointNumber_ARBURST => HessianDetector_U0_m_axi_pointNumber_ARBURST,
        m_axi_pointNumber_ARLOCK => HessianDetector_U0_m_axi_pointNumber_ARLOCK,
        m_axi_pointNumber_ARCACHE => HessianDetector_U0_m_axi_pointNumber_ARCACHE,
        m_axi_pointNumber_ARPROT => HessianDetector_U0_m_axi_pointNumber_ARPROT,
        m_axi_pointNumber_ARQOS => HessianDetector_U0_m_axi_pointNumber_ARQOS,
        m_axi_pointNumber_ARREGION => HessianDetector_U0_m_axi_pointNumber_ARREGION,
        m_axi_pointNumber_ARUSER => HessianDetector_U0_m_axi_pointNumber_ARUSER,
        m_axi_pointNumber_RVALID => ap_const_logic_0,
        m_axi_pointNumber_RREADY => HessianDetector_U0_m_axi_pointNumber_RREADY,
        m_axi_pointNumber_RDATA => ap_const_lv32_0,
        m_axi_pointNumber_RLAST => ap_const_logic_0,
        m_axi_pointNumber_RID => ap_const_lv1_0,
        m_axi_pointNumber_RUSER => ap_const_lv1_0,
        m_axi_pointNumber_RRESP => ap_const_lv2_0,
        m_axi_pointNumber_BVALID => kpn_BVALID,
        m_axi_pointNumber_BREADY => HessianDetector_U0_m_axi_pointNumber_BREADY,
        m_axi_pointNumber_BRESP => kpn_BRESP,
        m_axi_pointNumber_BID => kpn_BID,
        m_axi_pointNumber_BUSER => kpn_BUSER,
        sum_V_dout => sum_V_dout,
        sum_V_empty_n => sum_V_empty_n,
        sum_V_read => HessianDetector_U0_sum_V_read,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => HessianDetector_U0_ap_start,
        ap_done => HessianDetector_U0_ap_done,
        ap_ready => HessianDetector_U0_ap_ready,
        ap_idle => HessianDetector_U0_ap_idle,
        ap_continue => HessianDetector_U0_ap_continue);

    sum_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => integralImg_U0_sum_V_din,
        if_full_n => sum_V_full_n,
        if_write => integralImg_U0_sum_V_write,
        if_dout => sum_V_dout,
        if_empty_n => sum_V_empty_n,
        if_read => HessianDetector_U0_sum_V_read);

    start_for_HessianJfO_U : component start_for_HessianJfO
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_HessianDetector_U0_din,
        if_full_n => start_for_HessianDetector_U0_full_n,
        if_write => integralImg_U0_start_write,
        if_dout => start_for_HessianDetector_U0_dout,
        if_empty_n => start_for_HessianDetector_U0_empty_n,
        if_read => HessianDetector_U0_ap_ready);




    HessianDetector_U0_ap_continue <= ap_const_logic_1;
    HessianDetector_U0_ap_start <= start_for_HessianDetector_U0_empty_n;
    HessianDetector_U0_start_full_n <= ap_const_logic_1;
    HessianDetector_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    integralImg_U0_ap_continue <= ap_const_logic_1;
    integralImg_U0_ap_start <= ap_const_logic_1;
    start_for_HessianDetector_U0_din <= (0=>ap_const_logic_1, others=>'-');
    video_in_TREADY <= integralImg_U0_video_in_TREADY;
end behav;
