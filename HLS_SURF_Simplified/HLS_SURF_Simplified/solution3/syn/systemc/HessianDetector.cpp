// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "HessianDetector.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic HessianDetector::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic HessianDetector::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> HessianDetector::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> HessianDetector::ap_const_lv32_1 = "1";
const sc_lv<1> HessianDetector::ap_const_lv1_0 = "0";
const sc_lv<1> HessianDetector::ap_const_lv1_1 = "1";
const sc_lv<2> HessianDetector::ap_const_lv2_0 = "00";
const sc_lv<2> HessianDetector::ap_const_lv2_1 = "1";
const sc_lv<3> HessianDetector::ap_const_lv3_0 = "000";
const sc_lv<4> HessianDetector::ap_const_lv4_0 = "0000";

HessianDetector::HessianDetector(sc_module_name name) : sc_module(name), mVcdFile(0) {
    calcLayerDetAndTrace_U0 = new calcLayerDetAndTrace("calcLayerDetAndTrace_U0");
    calcLayerDetAndTrace_U0->ap_clk(ap_clk);
    calcLayerDetAndTrace_U0->ap_rst(ap_rst);
    calcLayerDetAndTrace_U0->ap_start(calcLayerDetAndTrace_U0_ap_start);
    calcLayerDetAndTrace_U0->start_full_n(start_for_findCharacteristicPo_U0_full_n);
    calcLayerDetAndTrace_U0->ap_done(calcLayerDetAndTrace_U0_ap_done);
    calcLayerDetAndTrace_U0->ap_continue(calcLayerDetAndTrace_U0_ap_continue);
    calcLayerDetAndTrace_U0->ap_idle(calcLayerDetAndTrace_U0_ap_idle);
    calcLayerDetAndTrace_U0->ap_ready(calcLayerDetAndTrace_U0_ap_ready);
    calcLayerDetAndTrace_U0->start_out(calcLayerDetAndTrace_U0_start_out);
    calcLayerDetAndTrace_U0->start_write(calcLayerDetAndTrace_U0_start_write);
    calcLayerDetAndTrace_U0->det0_V_din(calcLayerDetAndTrace_U0_det0_V_din);
    calcLayerDetAndTrace_U0->det0_V_full_n(dets_0_V_full_n);
    calcLayerDetAndTrace_U0->det0_V_write(calcLayerDetAndTrace_U0_det0_V_write);
    calcLayerDetAndTrace_U0->det1_V3_din(calcLayerDetAndTrace_U0_det1_V3_din);
    calcLayerDetAndTrace_U0->det1_V3_full_n(dets_1_V_full_n);
    calcLayerDetAndTrace_U0->det1_V3_write(calcLayerDetAndTrace_U0_det1_V3_write);
    calcLayerDetAndTrace_U0->det2_V6_din(calcLayerDetAndTrace_U0_det2_V6_din);
    calcLayerDetAndTrace_U0->det2_V6_full_n(dets_2_V_full_n);
    calcLayerDetAndTrace_U0->det2_V6_write(calcLayerDetAndTrace_U0_det2_V6_write);
    calcLayerDetAndTrace_U0->sum_V_dout(sum_V_dout);
    calcLayerDetAndTrace_U0->sum_V_empty_n(sum_V_empty_n);
    calcLayerDetAndTrace_U0->sum_V_read(calcLayerDetAndTrace_U0_sum_V_read);
    findCharacteristicPo_U0 = new findCharacteristicPo("findCharacteristicPo_U0");
    findCharacteristicPo_U0->ap_clk(ap_clk);
    findCharacteristicPo_U0->ap_rst(ap_rst);
    findCharacteristicPo_U0->ap_start(findCharacteristicPo_U0_ap_start);
    findCharacteristicPo_U0->ap_done(findCharacteristicPo_U0_ap_done);
    findCharacteristicPo_U0->ap_continue(findCharacteristicPo_U0_ap_continue);
    findCharacteristicPo_U0->ap_idle(findCharacteristicPo_U0_ap_idle);
    findCharacteristicPo_U0->ap_ready(findCharacteristicPo_U0_ap_ready);
    findCharacteristicPo_U0->det0_V_dout(dets_0_V_dout);
    findCharacteristicPo_U0->det0_V_empty_n(dets_0_V_empty_n);
    findCharacteristicPo_U0->det0_V_read(findCharacteristicPo_U0_det0_V_read);
    findCharacteristicPo_U0->det1_V3_dout(dets_1_V_dout);
    findCharacteristicPo_U0->det1_V3_empty_n(dets_1_V_empty_n);
    findCharacteristicPo_U0->det1_V3_read(findCharacteristicPo_U0_det1_V3_read);
    findCharacteristicPo_U0->det2_V6_dout(dets_2_V_dout);
    findCharacteristicPo_U0->det2_V6_empty_n(dets_2_V_empty_n);
    findCharacteristicPo_U0->det2_V6_read(findCharacteristicPo_U0_det2_V6_read);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWVALID(findCharacteristicPo_U0_m_axi_keyPoints_V_AWVALID);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWREADY(m_axi_keyPoints_V_AWREADY);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWADDR(findCharacteristicPo_U0_m_axi_keyPoints_V_AWADDR);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWID(findCharacteristicPo_U0_m_axi_keyPoints_V_AWID);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWLEN(findCharacteristicPo_U0_m_axi_keyPoints_V_AWLEN);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWSIZE(findCharacteristicPo_U0_m_axi_keyPoints_V_AWSIZE);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWBURST(findCharacteristicPo_U0_m_axi_keyPoints_V_AWBURST);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWLOCK(findCharacteristicPo_U0_m_axi_keyPoints_V_AWLOCK);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWCACHE(findCharacteristicPo_U0_m_axi_keyPoints_V_AWCACHE);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWPROT(findCharacteristicPo_U0_m_axi_keyPoints_V_AWPROT);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWQOS(findCharacteristicPo_U0_m_axi_keyPoints_V_AWQOS);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWREGION(findCharacteristicPo_U0_m_axi_keyPoints_V_AWREGION);
    findCharacteristicPo_U0->m_axi_keyPoints_V_AWUSER(findCharacteristicPo_U0_m_axi_keyPoints_V_AWUSER);
    findCharacteristicPo_U0->m_axi_keyPoints_V_WVALID(findCharacteristicPo_U0_m_axi_keyPoints_V_WVALID);
    findCharacteristicPo_U0->m_axi_keyPoints_V_WREADY(m_axi_keyPoints_V_WREADY);
    findCharacteristicPo_U0->m_axi_keyPoints_V_WDATA(findCharacteristicPo_U0_m_axi_keyPoints_V_WDATA);
    findCharacteristicPo_U0->m_axi_keyPoints_V_WSTRB(findCharacteristicPo_U0_m_axi_keyPoints_V_WSTRB);
    findCharacteristicPo_U0->m_axi_keyPoints_V_WLAST(findCharacteristicPo_U0_m_axi_keyPoints_V_WLAST);
    findCharacteristicPo_U0->m_axi_keyPoints_V_WID(findCharacteristicPo_U0_m_axi_keyPoints_V_WID);
    findCharacteristicPo_U0->m_axi_keyPoints_V_WUSER(findCharacteristicPo_U0_m_axi_keyPoints_V_WUSER);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARVALID(findCharacteristicPo_U0_m_axi_keyPoints_V_ARVALID);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARREADY(ap_var_for_const0);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARADDR(findCharacteristicPo_U0_m_axi_keyPoints_V_ARADDR);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARID(findCharacteristicPo_U0_m_axi_keyPoints_V_ARID);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARLEN(findCharacteristicPo_U0_m_axi_keyPoints_V_ARLEN);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARSIZE(findCharacteristicPo_U0_m_axi_keyPoints_V_ARSIZE);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARBURST(findCharacteristicPo_U0_m_axi_keyPoints_V_ARBURST);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARLOCK(findCharacteristicPo_U0_m_axi_keyPoints_V_ARLOCK);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARCACHE(findCharacteristicPo_U0_m_axi_keyPoints_V_ARCACHE);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARPROT(findCharacteristicPo_U0_m_axi_keyPoints_V_ARPROT);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARQOS(findCharacteristicPo_U0_m_axi_keyPoints_V_ARQOS);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARREGION(findCharacteristicPo_U0_m_axi_keyPoints_V_ARREGION);
    findCharacteristicPo_U0->m_axi_keyPoints_V_ARUSER(findCharacteristicPo_U0_m_axi_keyPoints_V_ARUSER);
    findCharacteristicPo_U0->m_axi_keyPoints_V_RVALID(ap_var_for_const0);
    findCharacteristicPo_U0->m_axi_keyPoints_V_RREADY(findCharacteristicPo_U0_m_axi_keyPoints_V_RREADY);
    findCharacteristicPo_U0->m_axi_keyPoints_V_RDATA(ap_var_for_const1);
    findCharacteristicPo_U0->m_axi_keyPoints_V_RLAST(ap_var_for_const0);
    findCharacteristicPo_U0->m_axi_keyPoints_V_RID(ap_var_for_const2);
    findCharacteristicPo_U0->m_axi_keyPoints_V_RUSER(ap_var_for_const2);
    findCharacteristicPo_U0->m_axi_keyPoints_V_RRESP(ap_var_for_const3);
    findCharacteristicPo_U0->m_axi_keyPoints_V_BVALID(m_axi_keyPoints_V_BVALID);
    findCharacteristicPo_U0->m_axi_keyPoints_V_BREADY(findCharacteristicPo_U0_m_axi_keyPoints_V_BREADY);
    findCharacteristicPo_U0->m_axi_keyPoints_V_BRESP(m_axi_keyPoints_V_BRESP);
    findCharacteristicPo_U0->m_axi_keyPoints_V_BID(m_axi_keyPoints_V_BID);
    findCharacteristicPo_U0->m_axi_keyPoints_V_BUSER(m_axi_keyPoints_V_BUSER);
    findCharacteristicPo_U0->m_axi_pointNumber_AWVALID(findCharacteristicPo_U0_m_axi_pointNumber_AWVALID);
    findCharacteristicPo_U0->m_axi_pointNumber_AWREADY(m_axi_pointNumber_AWREADY);
    findCharacteristicPo_U0->m_axi_pointNumber_AWADDR(findCharacteristicPo_U0_m_axi_pointNumber_AWADDR);
    findCharacteristicPo_U0->m_axi_pointNumber_AWID(findCharacteristicPo_U0_m_axi_pointNumber_AWID);
    findCharacteristicPo_U0->m_axi_pointNumber_AWLEN(findCharacteristicPo_U0_m_axi_pointNumber_AWLEN);
    findCharacteristicPo_U0->m_axi_pointNumber_AWSIZE(findCharacteristicPo_U0_m_axi_pointNumber_AWSIZE);
    findCharacteristicPo_U0->m_axi_pointNumber_AWBURST(findCharacteristicPo_U0_m_axi_pointNumber_AWBURST);
    findCharacteristicPo_U0->m_axi_pointNumber_AWLOCK(findCharacteristicPo_U0_m_axi_pointNumber_AWLOCK);
    findCharacteristicPo_U0->m_axi_pointNumber_AWCACHE(findCharacteristicPo_U0_m_axi_pointNumber_AWCACHE);
    findCharacteristicPo_U0->m_axi_pointNumber_AWPROT(findCharacteristicPo_U0_m_axi_pointNumber_AWPROT);
    findCharacteristicPo_U0->m_axi_pointNumber_AWQOS(findCharacteristicPo_U0_m_axi_pointNumber_AWQOS);
    findCharacteristicPo_U0->m_axi_pointNumber_AWREGION(findCharacteristicPo_U0_m_axi_pointNumber_AWREGION);
    findCharacteristicPo_U0->m_axi_pointNumber_AWUSER(findCharacteristicPo_U0_m_axi_pointNumber_AWUSER);
    findCharacteristicPo_U0->m_axi_pointNumber_WVALID(findCharacteristicPo_U0_m_axi_pointNumber_WVALID);
    findCharacteristicPo_U0->m_axi_pointNumber_WREADY(m_axi_pointNumber_WREADY);
    findCharacteristicPo_U0->m_axi_pointNumber_WDATA(findCharacteristicPo_U0_m_axi_pointNumber_WDATA);
    findCharacteristicPo_U0->m_axi_pointNumber_WSTRB(findCharacteristicPo_U0_m_axi_pointNumber_WSTRB);
    findCharacteristicPo_U0->m_axi_pointNumber_WLAST(findCharacteristicPo_U0_m_axi_pointNumber_WLAST);
    findCharacteristicPo_U0->m_axi_pointNumber_WID(findCharacteristicPo_U0_m_axi_pointNumber_WID);
    findCharacteristicPo_U0->m_axi_pointNumber_WUSER(findCharacteristicPo_U0_m_axi_pointNumber_WUSER);
    findCharacteristicPo_U0->m_axi_pointNumber_ARVALID(findCharacteristicPo_U0_m_axi_pointNumber_ARVALID);
    findCharacteristicPo_U0->m_axi_pointNumber_ARREADY(ap_var_for_const0);
    findCharacteristicPo_U0->m_axi_pointNumber_ARADDR(findCharacteristicPo_U0_m_axi_pointNumber_ARADDR);
    findCharacteristicPo_U0->m_axi_pointNumber_ARID(findCharacteristicPo_U0_m_axi_pointNumber_ARID);
    findCharacteristicPo_U0->m_axi_pointNumber_ARLEN(findCharacteristicPo_U0_m_axi_pointNumber_ARLEN);
    findCharacteristicPo_U0->m_axi_pointNumber_ARSIZE(findCharacteristicPo_U0_m_axi_pointNumber_ARSIZE);
    findCharacteristicPo_U0->m_axi_pointNumber_ARBURST(findCharacteristicPo_U0_m_axi_pointNumber_ARBURST);
    findCharacteristicPo_U0->m_axi_pointNumber_ARLOCK(findCharacteristicPo_U0_m_axi_pointNumber_ARLOCK);
    findCharacteristicPo_U0->m_axi_pointNumber_ARCACHE(findCharacteristicPo_U0_m_axi_pointNumber_ARCACHE);
    findCharacteristicPo_U0->m_axi_pointNumber_ARPROT(findCharacteristicPo_U0_m_axi_pointNumber_ARPROT);
    findCharacteristicPo_U0->m_axi_pointNumber_ARQOS(findCharacteristicPo_U0_m_axi_pointNumber_ARQOS);
    findCharacteristicPo_U0->m_axi_pointNumber_ARREGION(findCharacteristicPo_U0_m_axi_pointNumber_ARREGION);
    findCharacteristicPo_U0->m_axi_pointNumber_ARUSER(findCharacteristicPo_U0_m_axi_pointNumber_ARUSER);
    findCharacteristicPo_U0->m_axi_pointNumber_RVALID(ap_var_for_const0);
    findCharacteristicPo_U0->m_axi_pointNumber_RREADY(findCharacteristicPo_U0_m_axi_pointNumber_RREADY);
    findCharacteristicPo_U0->m_axi_pointNumber_RDATA(ap_var_for_const1);
    findCharacteristicPo_U0->m_axi_pointNumber_RLAST(ap_var_for_const0);
    findCharacteristicPo_U0->m_axi_pointNumber_RID(ap_var_for_const2);
    findCharacteristicPo_U0->m_axi_pointNumber_RUSER(ap_var_for_const2);
    findCharacteristicPo_U0->m_axi_pointNumber_RRESP(ap_var_for_const3);
    findCharacteristicPo_U0->m_axi_pointNumber_BVALID(m_axi_pointNumber_BVALID);
    findCharacteristicPo_U0->m_axi_pointNumber_BREADY(findCharacteristicPo_U0_m_axi_pointNumber_BREADY);
    findCharacteristicPo_U0->m_axi_pointNumber_BRESP(m_axi_pointNumber_BRESP);
    findCharacteristicPo_U0->m_axi_pointNumber_BID(m_axi_pointNumber_BID);
    findCharacteristicPo_U0->m_axi_pointNumber_BUSER(m_axi_pointNumber_BUSER);
    dets_0_V_U = new fifo_w32_d2_A("dets_0_V_U");
    dets_0_V_U->clk(ap_clk);
    dets_0_V_U->reset(ap_rst);
    dets_0_V_U->if_read_ce(ap_var_for_const4);
    dets_0_V_U->if_write_ce(ap_var_for_const4);
    dets_0_V_U->if_din(calcLayerDetAndTrace_U0_det0_V_din);
    dets_0_V_U->if_full_n(dets_0_V_full_n);
    dets_0_V_U->if_write(calcLayerDetAndTrace_U0_det0_V_write);
    dets_0_V_U->if_dout(dets_0_V_dout);
    dets_0_V_U->if_empty_n(dets_0_V_empty_n);
    dets_0_V_U->if_read(findCharacteristicPo_U0_det0_V_read);
    dets_1_V_U = new fifo_w32_d2_A("dets_1_V_U");
    dets_1_V_U->clk(ap_clk);
    dets_1_V_U->reset(ap_rst);
    dets_1_V_U->if_read_ce(ap_var_for_const4);
    dets_1_V_U->if_write_ce(ap_var_for_const4);
    dets_1_V_U->if_din(calcLayerDetAndTrace_U0_det1_V3_din);
    dets_1_V_U->if_full_n(dets_1_V_full_n);
    dets_1_V_U->if_write(calcLayerDetAndTrace_U0_det1_V3_write);
    dets_1_V_U->if_dout(dets_1_V_dout);
    dets_1_V_U->if_empty_n(dets_1_V_empty_n);
    dets_1_V_U->if_read(findCharacteristicPo_U0_det1_V3_read);
    dets_2_V_U = new fifo_w32_d2_A("dets_2_V_U");
    dets_2_V_U->clk(ap_clk);
    dets_2_V_U->reset(ap_rst);
    dets_2_V_U->if_read_ce(ap_var_for_const4);
    dets_2_V_U->if_write_ce(ap_var_for_const4);
    dets_2_V_U->if_din(calcLayerDetAndTrace_U0_det2_V6_din);
    dets_2_V_U->if_full_n(dets_2_V_full_n);
    dets_2_V_U->if_write(calcLayerDetAndTrace_U0_det2_V6_write);
    dets_2_V_U->if_dout(dets_2_V_dout);
    dets_2_V_U->if_empty_n(dets_2_V_empty_n);
    dets_2_V_U->if_read(findCharacteristicPo_U0_det2_V6_read);
    start_for_findChaIfE_U = new start_for_findChaIfE("start_for_findChaIfE_U");
    start_for_findChaIfE_U->clk(ap_clk);
    start_for_findChaIfE_U->reset(ap_rst);
    start_for_findChaIfE_U->if_read_ce(ap_var_for_const4);
    start_for_findChaIfE_U->if_write_ce(ap_var_for_const4);
    start_for_findChaIfE_U->if_din(start_for_findCharacteristicPo_U0_din);
    start_for_findChaIfE_U->if_full_n(start_for_findCharacteristicPo_U0_full_n);
    start_for_findChaIfE_U->if_write(calcLayerDetAndTrace_U0_start_write);
    start_for_findChaIfE_U->if_dout(start_for_findCharacteristicPo_U0_dout);
    start_for_findChaIfE_U->if_empty_n(start_for_findCharacteristicPo_U0_empty_n);
    start_for_findChaIfE_U->if_read(findCharacteristicPo_U0_ap_ready);

    SC_METHOD(thread_ap_done);
    sensitive << ( findCharacteristicPo_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( calcLayerDetAndTrace_U0_ap_idle );
    sensitive << ( findCharacteristicPo_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( calcLayerDetAndTrace_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( findCharacteristicPo_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( calcLayerDetAndTrace_U0_ap_ready );

    SC_METHOD(thread_calcLayerDetAndTrace_U0_ap_continue);

    SC_METHOD(thread_calcLayerDetAndTrace_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_findCharacteristicPo_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_findCharacteristicPo_U0_ap_start);
    sensitive << ( start_for_findCharacteristicPo_U0_empty_n );

    SC_METHOD(thread_findCharacteristicPo_U0_start_full_n);

    SC_METHOD(thread_findCharacteristicPo_U0_start_write);

    SC_METHOD(thread_m_axi_keyPoints_V_ARADDR);

    SC_METHOD(thread_m_axi_keyPoints_V_ARBURST);

    SC_METHOD(thread_m_axi_keyPoints_V_ARCACHE);

    SC_METHOD(thread_m_axi_keyPoints_V_ARID);

    SC_METHOD(thread_m_axi_keyPoints_V_ARLEN);

    SC_METHOD(thread_m_axi_keyPoints_V_ARLOCK);

    SC_METHOD(thread_m_axi_keyPoints_V_ARPROT);

    SC_METHOD(thread_m_axi_keyPoints_V_ARQOS);

    SC_METHOD(thread_m_axi_keyPoints_V_ARREGION);

    SC_METHOD(thread_m_axi_keyPoints_V_ARSIZE);

    SC_METHOD(thread_m_axi_keyPoints_V_ARUSER);

    SC_METHOD(thread_m_axi_keyPoints_V_ARVALID);

    SC_METHOD(thread_m_axi_keyPoints_V_AWADDR);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWADDR );

    SC_METHOD(thread_m_axi_keyPoints_V_AWBURST);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWBURST );

    SC_METHOD(thread_m_axi_keyPoints_V_AWCACHE);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWCACHE );

    SC_METHOD(thread_m_axi_keyPoints_V_AWID);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWID );

    SC_METHOD(thread_m_axi_keyPoints_V_AWLEN);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWLEN );

    SC_METHOD(thread_m_axi_keyPoints_V_AWLOCK);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWLOCK );

    SC_METHOD(thread_m_axi_keyPoints_V_AWPROT);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWPROT );

    SC_METHOD(thread_m_axi_keyPoints_V_AWQOS);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWQOS );

    SC_METHOD(thread_m_axi_keyPoints_V_AWREGION);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWREGION );

    SC_METHOD(thread_m_axi_keyPoints_V_AWSIZE);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWSIZE );

    SC_METHOD(thread_m_axi_keyPoints_V_AWUSER);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWUSER );

    SC_METHOD(thread_m_axi_keyPoints_V_AWVALID);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_AWVALID );

    SC_METHOD(thread_m_axi_keyPoints_V_BREADY);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_BREADY );

    SC_METHOD(thread_m_axi_keyPoints_V_RREADY);

    SC_METHOD(thread_m_axi_keyPoints_V_WDATA);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_WDATA );

    SC_METHOD(thread_m_axi_keyPoints_V_WID);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_WID );

    SC_METHOD(thread_m_axi_keyPoints_V_WLAST);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_WLAST );

    SC_METHOD(thread_m_axi_keyPoints_V_WSTRB);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_WSTRB );

    SC_METHOD(thread_m_axi_keyPoints_V_WUSER);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_WUSER );

    SC_METHOD(thread_m_axi_keyPoints_V_WVALID);
    sensitive << ( findCharacteristicPo_U0_m_axi_keyPoints_V_WVALID );

    SC_METHOD(thread_m_axi_pointNumber_ARADDR);

    SC_METHOD(thread_m_axi_pointNumber_ARBURST);

    SC_METHOD(thread_m_axi_pointNumber_ARCACHE);

    SC_METHOD(thread_m_axi_pointNumber_ARID);

    SC_METHOD(thread_m_axi_pointNumber_ARLEN);

    SC_METHOD(thread_m_axi_pointNumber_ARLOCK);

    SC_METHOD(thread_m_axi_pointNumber_ARPROT);

    SC_METHOD(thread_m_axi_pointNumber_ARQOS);

    SC_METHOD(thread_m_axi_pointNumber_ARREGION);

    SC_METHOD(thread_m_axi_pointNumber_ARSIZE);

    SC_METHOD(thread_m_axi_pointNumber_ARUSER);

    SC_METHOD(thread_m_axi_pointNumber_ARVALID);

    SC_METHOD(thread_m_axi_pointNumber_AWADDR);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWADDR );

    SC_METHOD(thread_m_axi_pointNumber_AWBURST);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWBURST );

    SC_METHOD(thread_m_axi_pointNumber_AWCACHE);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWCACHE );

    SC_METHOD(thread_m_axi_pointNumber_AWID);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWID );

    SC_METHOD(thread_m_axi_pointNumber_AWLEN);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWLEN );

    SC_METHOD(thread_m_axi_pointNumber_AWLOCK);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWLOCK );

    SC_METHOD(thread_m_axi_pointNumber_AWPROT);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWPROT );

    SC_METHOD(thread_m_axi_pointNumber_AWQOS);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWQOS );

    SC_METHOD(thread_m_axi_pointNumber_AWREGION);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWREGION );

    SC_METHOD(thread_m_axi_pointNumber_AWSIZE);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWSIZE );

    SC_METHOD(thread_m_axi_pointNumber_AWUSER);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWUSER );

    SC_METHOD(thread_m_axi_pointNumber_AWVALID);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_AWVALID );

    SC_METHOD(thread_m_axi_pointNumber_BREADY);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_BREADY );

    SC_METHOD(thread_m_axi_pointNumber_RREADY);

    SC_METHOD(thread_m_axi_pointNumber_WDATA);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_WDATA );

    SC_METHOD(thread_m_axi_pointNumber_WID);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_WID );

    SC_METHOD(thread_m_axi_pointNumber_WLAST);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_WLAST );

    SC_METHOD(thread_m_axi_pointNumber_WSTRB);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_WSTRB );

    SC_METHOD(thread_m_axi_pointNumber_WUSER);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_WUSER );

    SC_METHOD(thread_m_axi_pointNumber_WVALID);
    sensitive << ( findCharacteristicPo_U0_m_axi_pointNumber_WVALID );

    SC_METHOD(thread_start_for_findCharacteristicPo_U0_din);

    SC_METHOD(thread_sum_V_read);
    sensitive << ( calcLayerDetAndTrace_U0_sum_V_read );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "HessianDetector_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWVALID, "(port)m_axi_keyPoints_V_AWVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWREADY, "(port)m_axi_keyPoints_V_AWREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWADDR, "(port)m_axi_keyPoints_V_AWADDR");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWID, "(port)m_axi_keyPoints_V_AWID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWLEN, "(port)m_axi_keyPoints_V_AWLEN");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWSIZE, "(port)m_axi_keyPoints_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWBURST, "(port)m_axi_keyPoints_V_AWBURST");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWLOCK, "(port)m_axi_keyPoints_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWCACHE, "(port)m_axi_keyPoints_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWPROT, "(port)m_axi_keyPoints_V_AWPROT");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWQOS, "(port)m_axi_keyPoints_V_AWQOS");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWREGION, "(port)m_axi_keyPoints_V_AWREGION");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWUSER, "(port)m_axi_keyPoints_V_AWUSER");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WVALID, "(port)m_axi_keyPoints_V_WVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WREADY, "(port)m_axi_keyPoints_V_WREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WDATA, "(port)m_axi_keyPoints_V_WDATA");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WSTRB, "(port)m_axi_keyPoints_V_WSTRB");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WLAST, "(port)m_axi_keyPoints_V_WLAST");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WID, "(port)m_axi_keyPoints_V_WID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WUSER, "(port)m_axi_keyPoints_V_WUSER");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARVALID, "(port)m_axi_keyPoints_V_ARVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARREADY, "(port)m_axi_keyPoints_V_ARREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARADDR, "(port)m_axi_keyPoints_V_ARADDR");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARID, "(port)m_axi_keyPoints_V_ARID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARLEN, "(port)m_axi_keyPoints_V_ARLEN");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARSIZE, "(port)m_axi_keyPoints_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARBURST, "(port)m_axi_keyPoints_V_ARBURST");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARLOCK, "(port)m_axi_keyPoints_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARCACHE, "(port)m_axi_keyPoints_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARPROT, "(port)m_axi_keyPoints_V_ARPROT");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARQOS, "(port)m_axi_keyPoints_V_ARQOS");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARREGION, "(port)m_axi_keyPoints_V_ARREGION");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARUSER, "(port)m_axi_keyPoints_V_ARUSER");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RVALID, "(port)m_axi_keyPoints_V_RVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RREADY, "(port)m_axi_keyPoints_V_RREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RDATA, "(port)m_axi_keyPoints_V_RDATA");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RLAST, "(port)m_axi_keyPoints_V_RLAST");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RID, "(port)m_axi_keyPoints_V_RID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RUSER, "(port)m_axi_keyPoints_V_RUSER");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RRESP, "(port)m_axi_keyPoints_V_RRESP");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BVALID, "(port)m_axi_keyPoints_V_BVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BREADY, "(port)m_axi_keyPoints_V_BREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BRESP, "(port)m_axi_keyPoints_V_BRESP");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BID, "(port)m_axi_keyPoints_V_BID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BUSER, "(port)m_axi_keyPoints_V_BUSER");
    sc_trace(mVcdFile, m_axi_pointNumber_AWVALID, "(port)m_axi_pointNumber_AWVALID");
    sc_trace(mVcdFile, m_axi_pointNumber_AWREADY, "(port)m_axi_pointNumber_AWREADY");
    sc_trace(mVcdFile, m_axi_pointNumber_AWADDR, "(port)m_axi_pointNumber_AWADDR");
    sc_trace(mVcdFile, m_axi_pointNumber_AWID, "(port)m_axi_pointNumber_AWID");
    sc_trace(mVcdFile, m_axi_pointNumber_AWLEN, "(port)m_axi_pointNumber_AWLEN");
    sc_trace(mVcdFile, m_axi_pointNumber_AWSIZE, "(port)m_axi_pointNumber_AWSIZE");
    sc_trace(mVcdFile, m_axi_pointNumber_AWBURST, "(port)m_axi_pointNumber_AWBURST");
    sc_trace(mVcdFile, m_axi_pointNumber_AWLOCK, "(port)m_axi_pointNumber_AWLOCK");
    sc_trace(mVcdFile, m_axi_pointNumber_AWCACHE, "(port)m_axi_pointNumber_AWCACHE");
    sc_trace(mVcdFile, m_axi_pointNumber_AWPROT, "(port)m_axi_pointNumber_AWPROT");
    sc_trace(mVcdFile, m_axi_pointNumber_AWQOS, "(port)m_axi_pointNumber_AWQOS");
    sc_trace(mVcdFile, m_axi_pointNumber_AWREGION, "(port)m_axi_pointNumber_AWREGION");
    sc_trace(mVcdFile, m_axi_pointNumber_AWUSER, "(port)m_axi_pointNumber_AWUSER");
    sc_trace(mVcdFile, m_axi_pointNumber_WVALID, "(port)m_axi_pointNumber_WVALID");
    sc_trace(mVcdFile, m_axi_pointNumber_WREADY, "(port)m_axi_pointNumber_WREADY");
    sc_trace(mVcdFile, m_axi_pointNumber_WDATA, "(port)m_axi_pointNumber_WDATA");
    sc_trace(mVcdFile, m_axi_pointNumber_WSTRB, "(port)m_axi_pointNumber_WSTRB");
    sc_trace(mVcdFile, m_axi_pointNumber_WLAST, "(port)m_axi_pointNumber_WLAST");
    sc_trace(mVcdFile, m_axi_pointNumber_WID, "(port)m_axi_pointNumber_WID");
    sc_trace(mVcdFile, m_axi_pointNumber_WUSER, "(port)m_axi_pointNumber_WUSER");
    sc_trace(mVcdFile, m_axi_pointNumber_ARVALID, "(port)m_axi_pointNumber_ARVALID");
    sc_trace(mVcdFile, m_axi_pointNumber_ARREADY, "(port)m_axi_pointNumber_ARREADY");
    sc_trace(mVcdFile, m_axi_pointNumber_ARADDR, "(port)m_axi_pointNumber_ARADDR");
    sc_trace(mVcdFile, m_axi_pointNumber_ARID, "(port)m_axi_pointNumber_ARID");
    sc_trace(mVcdFile, m_axi_pointNumber_ARLEN, "(port)m_axi_pointNumber_ARLEN");
    sc_trace(mVcdFile, m_axi_pointNumber_ARSIZE, "(port)m_axi_pointNumber_ARSIZE");
    sc_trace(mVcdFile, m_axi_pointNumber_ARBURST, "(port)m_axi_pointNumber_ARBURST");
    sc_trace(mVcdFile, m_axi_pointNumber_ARLOCK, "(port)m_axi_pointNumber_ARLOCK");
    sc_trace(mVcdFile, m_axi_pointNumber_ARCACHE, "(port)m_axi_pointNumber_ARCACHE");
    sc_trace(mVcdFile, m_axi_pointNumber_ARPROT, "(port)m_axi_pointNumber_ARPROT");
    sc_trace(mVcdFile, m_axi_pointNumber_ARQOS, "(port)m_axi_pointNumber_ARQOS");
    sc_trace(mVcdFile, m_axi_pointNumber_ARREGION, "(port)m_axi_pointNumber_ARREGION");
    sc_trace(mVcdFile, m_axi_pointNumber_ARUSER, "(port)m_axi_pointNumber_ARUSER");
    sc_trace(mVcdFile, m_axi_pointNumber_RVALID, "(port)m_axi_pointNumber_RVALID");
    sc_trace(mVcdFile, m_axi_pointNumber_RREADY, "(port)m_axi_pointNumber_RREADY");
    sc_trace(mVcdFile, m_axi_pointNumber_RDATA, "(port)m_axi_pointNumber_RDATA");
    sc_trace(mVcdFile, m_axi_pointNumber_RLAST, "(port)m_axi_pointNumber_RLAST");
    sc_trace(mVcdFile, m_axi_pointNumber_RID, "(port)m_axi_pointNumber_RID");
    sc_trace(mVcdFile, m_axi_pointNumber_RUSER, "(port)m_axi_pointNumber_RUSER");
    sc_trace(mVcdFile, m_axi_pointNumber_RRESP, "(port)m_axi_pointNumber_RRESP");
    sc_trace(mVcdFile, m_axi_pointNumber_BVALID, "(port)m_axi_pointNumber_BVALID");
    sc_trace(mVcdFile, m_axi_pointNumber_BREADY, "(port)m_axi_pointNumber_BREADY");
    sc_trace(mVcdFile, m_axi_pointNumber_BRESP, "(port)m_axi_pointNumber_BRESP");
    sc_trace(mVcdFile, m_axi_pointNumber_BID, "(port)m_axi_pointNumber_BID");
    sc_trace(mVcdFile, m_axi_pointNumber_BUSER, "(port)m_axi_pointNumber_BUSER");
    sc_trace(mVcdFile, sum_V_dout, "(port)sum_V_dout");
    sc_trace(mVcdFile, sum_V_empty_n, "(port)sum_V_empty_n");
    sc_trace(mVcdFile, sum_V_read, "(port)sum_V_read");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_ap_start, "calcLayerDetAndTrace_U0_ap_start");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_ap_done, "calcLayerDetAndTrace_U0_ap_done");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_ap_continue, "calcLayerDetAndTrace_U0_ap_continue");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_ap_idle, "calcLayerDetAndTrace_U0_ap_idle");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_ap_ready, "calcLayerDetAndTrace_U0_ap_ready");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_start_out, "calcLayerDetAndTrace_U0_start_out");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_start_write, "calcLayerDetAndTrace_U0_start_write");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_det0_V_din, "calcLayerDetAndTrace_U0_det0_V_din");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_det0_V_write, "calcLayerDetAndTrace_U0_det0_V_write");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_det1_V3_din, "calcLayerDetAndTrace_U0_det1_V3_din");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_det1_V3_write, "calcLayerDetAndTrace_U0_det1_V3_write");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_det2_V6_din, "calcLayerDetAndTrace_U0_det2_V6_din");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_det2_V6_write, "calcLayerDetAndTrace_U0_det2_V6_write");
    sc_trace(mVcdFile, calcLayerDetAndTrace_U0_sum_V_read, "calcLayerDetAndTrace_U0_sum_V_read");
    sc_trace(mVcdFile, findCharacteristicPo_U0_ap_start, "findCharacteristicPo_U0_ap_start");
    sc_trace(mVcdFile, findCharacteristicPo_U0_ap_done, "findCharacteristicPo_U0_ap_done");
    sc_trace(mVcdFile, findCharacteristicPo_U0_ap_continue, "findCharacteristicPo_U0_ap_continue");
    sc_trace(mVcdFile, findCharacteristicPo_U0_ap_idle, "findCharacteristicPo_U0_ap_idle");
    sc_trace(mVcdFile, findCharacteristicPo_U0_ap_ready, "findCharacteristicPo_U0_ap_ready");
    sc_trace(mVcdFile, findCharacteristicPo_U0_det0_V_read, "findCharacteristicPo_U0_det0_V_read");
    sc_trace(mVcdFile, findCharacteristicPo_U0_det1_V3_read, "findCharacteristicPo_U0_det1_V3_read");
    sc_trace(mVcdFile, findCharacteristicPo_U0_det2_V6_read, "findCharacteristicPo_U0_det2_V6_read");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWVALID, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWVALID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWADDR, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWADDR");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWID, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWLEN, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWLEN");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWSIZE, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWSIZE");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWBURST, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWBURST");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWLOCK, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWLOCK");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWCACHE, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWCACHE");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWPROT, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWPROT");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWQOS, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWQOS");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWREGION, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWREGION");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_AWUSER, "findCharacteristicPo_U0_m_axi_keyPoints_V_AWUSER");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_WVALID, "findCharacteristicPo_U0_m_axi_keyPoints_V_WVALID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_WDATA, "findCharacteristicPo_U0_m_axi_keyPoints_V_WDATA");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_WSTRB, "findCharacteristicPo_U0_m_axi_keyPoints_V_WSTRB");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_WLAST, "findCharacteristicPo_U0_m_axi_keyPoints_V_WLAST");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_WID, "findCharacteristicPo_U0_m_axi_keyPoints_V_WID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_WUSER, "findCharacteristicPo_U0_m_axi_keyPoints_V_WUSER");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARVALID, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARVALID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARADDR, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARADDR");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARID, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARLEN, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARLEN");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARSIZE, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARSIZE");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARBURST, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARBURST");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARLOCK, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARLOCK");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARCACHE, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARCACHE");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARPROT, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARPROT");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARQOS, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARQOS");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARREGION, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARREGION");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_ARUSER, "findCharacteristicPo_U0_m_axi_keyPoints_V_ARUSER");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_RREADY, "findCharacteristicPo_U0_m_axi_keyPoints_V_RREADY");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_keyPoints_V_BREADY, "findCharacteristicPo_U0_m_axi_keyPoints_V_BREADY");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWVALID, "findCharacteristicPo_U0_m_axi_pointNumber_AWVALID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWADDR, "findCharacteristicPo_U0_m_axi_pointNumber_AWADDR");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWID, "findCharacteristicPo_U0_m_axi_pointNumber_AWID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWLEN, "findCharacteristicPo_U0_m_axi_pointNumber_AWLEN");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWSIZE, "findCharacteristicPo_U0_m_axi_pointNumber_AWSIZE");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWBURST, "findCharacteristicPo_U0_m_axi_pointNumber_AWBURST");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWLOCK, "findCharacteristicPo_U0_m_axi_pointNumber_AWLOCK");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWCACHE, "findCharacteristicPo_U0_m_axi_pointNumber_AWCACHE");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWPROT, "findCharacteristicPo_U0_m_axi_pointNumber_AWPROT");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWQOS, "findCharacteristicPo_U0_m_axi_pointNumber_AWQOS");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWREGION, "findCharacteristicPo_U0_m_axi_pointNumber_AWREGION");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_AWUSER, "findCharacteristicPo_U0_m_axi_pointNumber_AWUSER");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_WVALID, "findCharacteristicPo_U0_m_axi_pointNumber_WVALID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_WDATA, "findCharacteristicPo_U0_m_axi_pointNumber_WDATA");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_WSTRB, "findCharacteristicPo_U0_m_axi_pointNumber_WSTRB");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_WLAST, "findCharacteristicPo_U0_m_axi_pointNumber_WLAST");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_WID, "findCharacteristicPo_U0_m_axi_pointNumber_WID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_WUSER, "findCharacteristicPo_U0_m_axi_pointNumber_WUSER");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARVALID, "findCharacteristicPo_U0_m_axi_pointNumber_ARVALID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARADDR, "findCharacteristicPo_U0_m_axi_pointNumber_ARADDR");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARID, "findCharacteristicPo_U0_m_axi_pointNumber_ARID");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARLEN, "findCharacteristicPo_U0_m_axi_pointNumber_ARLEN");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARSIZE, "findCharacteristicPo_U0_m_axi_pointNumber_ARSIZE");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARBURST, "findCharacteristicPo_U0_m_axi_pointNumber_ARBURST");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARLOCK, "findCharacteristicPo_U0_m_axi_pointNumber_ARLOCK");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARCACHE, "findCharacteristicPo_U0_m_axi_pointNumber_ARCACHE");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARPROT, "findCharacteristicPo_U0_m_axi_pointNumber_ARPROT");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARQOS, "findCharacteristicPo_U0_m_axi_pointNumber_ARQOS");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARREGION, "findCharacteristicPo_U0_m_axi_pointNumber_ARREGION");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_ARUSER, "findCharacteristicPo_U0_m_axi_pointNumber_ARUSER");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_RREADY, "findCharacteristicPo_U0_m_axi_pointNumber_RREADY");
    sc_trace(mVcdFile, findCharacteristicPo_U0_m_axi_pointNumber_BREADY, "findCharacteristicPo_U0_m_axi_pointNumber_BREADY");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, dets_0_V_full_n, "dets_0_V_full_n");
    sc_trace(mVcdFile, dets_0_V_dout, "dets_0_V_dout");
    sc_trace(mVcdFile, dets_0_V_empty_n, "dets_0_V_empty_n");
    sc_trace(mVcdFile, dets_1_V_full_n, "dets_1_V_full_n");
    sc_trace(mVcdFile, dets_1_V_dout, "dets_1_V_dout");
    sc_trace(mVcdFile, dets_1_V_empty_n, "dets_1_V_empty_n");
    sc_trace(mVcdFile, dets_2_V_full_n, "dets_2_V_full_n");
    sc_trace(mVcdFile, dets_2_V_dout, "dets_2_V_dout");
    sc_trace(mVcdFile, dets_2_V_empty_n, "dets_2_V_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_findCharacteristicPo_U0_din, "start_for_findCharacteristicPo_U0_din");
    sc_trace(mVcdFile, start_for_findCharacteristicPo_U0_full_n, "start_for_findCharacteristicPo_U0_full_n");
    sc_trace(mVcdFile, start_for_findCharacteristicPo_U0_dout, "start_for_findCharacteristicPo_U0_dout");
    sc_trace(mVcdFile, start_for_findCharacteristicPo_U0_empty_n, "start_for_findCharacteristicPo_U0_empty_n");
    sc_trace(mVcdFile, findCharacteristicPo_U0_start_full_n, "findCharacteristicPo_U0_start_full_n");
    sc_trace(mVcdFile, findCharacteristicPo_U0_start_write, "findCharacteristicPo_U0_start_write");
#endif

    }
}

HessianDetector::~HessianDetector() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete calcLayerDetAndTrace_U0;
    delete findCharacteristicPo_U0;
    delete dets_0_V_U;
    delete dets_1_V_U;
    delete dets_2_V_U;
    delete start_for_findChaIfE_U;
}

void HessianDetector::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void HessianDetector::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_logic_1;
}

void HessianDetector::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void HessianDetector::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv1_0;
}

void HessianDetector::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv2_0;
}

void HessianDetector::thread_ap_done() {
    ap_done = findCharacteristicPo_U0_ap_done.read();
}

void HessianDetector::thread_ap_idle() {
    ap_idle = (calcLayerDetAndTrace_U0_ap_idle.read() & findCharacteristicPo_U0_ap_idle.read());
}

void HessianDetector::thread_ap_ready() {
    ap_ready = calcLayerDetAndTrace_U0_ap_ready.read();
}

void HessianDetector::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void HessianDetector::thread_ap_sync_done() {
    ap_sync_done = findCharacteristicPo_U0_ap_done.read();
}

void HessianDetector::thread_ap_sync_ready() {
    ap_sync_ready = calcLayerDetAndTrace_U0_ap_ready.read();
}

void HessianDetector::thread_calcLayerDetAndTrace_U0_ap_continue() {
    calcLayerDetAndTrace_U0_ap_continue = ap_const_logic_1;
}

void HessianDetector::thread_calcLayerDetAndTrace_U0_ap_start() {
    calcLayerDetAndTrace_U0_ap_start = ap_start.read();
}

void HessianDetector::thread_findCharacteristicPo_U0_ap_continue() {
    findCharacteristicPo_U0_ap_continue = ap_continue.read();
}

void HessianDetector::thread_findCharacteristicPo_U0_ap_start() {
    findCharacteristicPo_U0_ap_start = start_for_findCharacteristicPo_U0_empty_n.read();
}

void HessianDetector::thread_findCharacteristicPo_U0_start_full_n() {
    findCharacteristicPo_U0_start_full_n = ap_const_logic_1;
}

void HessianDetector::thread_findCharacteristicPo_U0_start_write() {
    findCharacteristicPo_U0_start_write = ap_const_logic_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARADDR() {
    m_axi_keyPoints_V_ARADDR = ap_const_lv32_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARBURST() {
    m_axi_keyPoints_V_ARBURST = ap_const_lv2_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARCACHE() {
    m_axi_keyPoints_V_ARCACHE = ap_const_lv4_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARID() {
    m_axi_keyPoints_V_ARID = ap_const_lv1_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARLEN() {
    m_axi_keyPoints_V_ARLEN = ap_const_lv32_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARLOCK() {
    m_axi_keyPoints_V_ARLOCK = ap_const_lv2_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARPROT() {
    m_axi_keyPoints_V_ARPROT = ap_const_lv3_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARQOS() {
    m_axi_keyPoints_V_ARQOS = ap_const_lv4_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARREGION() {
    m_axi_keyPoints_V_ARREGION = ap_const_lv4_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARSIZE() {
    m_axi_keyPoints_V_ARSIZE = ap_const_lv3_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARUSER() {
    m_axi_keyPoints_V_ARUSER = ap_const_lv1_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_ARVALID() {
    m_axi_keyPoints_V_ARVALID = ap_const_logic_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_AWADDR() {
    m_axi_keyPoints_V_AWADDR = findCharacteristicPo_U0_m_axi_keyPoints_V_AWADDR.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWBURST() {
    m_axi_keyPoints_V_AWBURST = findCharacteristicPo_U0_m_axi_keyPoints_V_AWBURST.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWCACHE() {
    m_axi_keyPoints_V_AWCACHE = findCharacteristicPo_U0_m_axi_keyPoints_V_AWCACHE.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWID() {
    m_axi_keyPoints_V_AWID = findCharacteristicPo_U0_m_axi_keyPoints_V_AWID.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWLEN() {
    m_axi_keyPoints_V_AWLEN = findCharacteristicPo_U0_m_axi_keyPoints_V_AWLEN.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWLOCK() {
    m_axi_keyPoints_V_AWLOCK = findCharacteristicPo_U0_m_axi_keyPoints_V_AWLOCK.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWPROT() {
    m_axi_keyPoints_V_AWPROT = findCharacteristicPo_U0_m_axi_keyPoints_V_AWPROT.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWQOS() {
    m_axi_keyPoints_V_AWQOS = findCharacteristicPo_U0_m_axi_keyPoints_V_AWQOS.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWREGION() {
    m_axi_keyPoints_V_AWREGION = findCharacteristicPo_U0_m_axi_keyPoints_V_AWREGION.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWSIZE() {
    m_axi_keyPoints_V_AWSIZE = findCharacteristicPo_U0_m_axi_keyPoints_V_AWSIZE.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWUSER() {
    m_axi_keyPoints_V_AWUSER = findCharacteristicPo_U0_m_axi_keyPoints_V_AWUSER.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_AWVALID() {
    m_axi_keyPoints_V_AWVALID = findCharacteristicPo_U0_m_axi_keyPoints_V_AWVALID.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_BREADY() {
    m_axi_keyPoints_V_BREADY = findCharacteristicPo_U0_m_axi_keyPoints_V_BREADY.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_RREADY() {
    m_axi_keyPoints_V_RREADY = ap_const_logic_0;
}

void HessianDetector::thread_m_axi_keyPoints_V_WDATA() {
    m_axi_keyPoints_V_WDATA = findCharacteristicPo_U0_m_axi_keyPoints_V_WDATA.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_WID() {
    m_axi_keyPoints_V_WID = findCharacteristicPo_U0_m_axi_keyPoints_V_WID.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_WLAST() {
    m_axi_keyPoints_V_WLAST = findCharacteristicPo_U0_m_axi_keyPoints_V_WLAST.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_WSTRB() {
    m_axi_keyPoints_V_WSTRB = findCharacteristicPo_U0_m_axi_keyPoints_V_WSTRB.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_WUSER() {
    m_axi_keyPoints_V_WUSER = findCharacteristicPo_U0_m_axi_keyPoints_V_WUSER.read();
}

void HessianDetector::thread_m_axi_keyPoints_V_WVALID() {
    m_axi_keyPoints_V_WVALID = findCharacteristicPo_U0_m_axi_keyPoints_V_WVALID.read();
}

void HessianDetector::thread_m_axi_pointNumber_ARADDR() {
    m_axi_pointNumber_ARADDR = ap_const_lv32_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARBURST() {
    m_axi_pointNumber_ARBURST = ap_const_lv2_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARCACHE() {
    m_axi_pointNumber_ARCACHE = ap_const_lv4_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARID() {
    m_axi_pointNumber_ARID = ap_const_lv1_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARLEN() {
    m_axi_pointNumber_ARLEN = ap_const_lv32_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARLOCK() {
    m_axi_pointNumber_ARLOCK = ap_const_lv2_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARPROT() {
    m_axi_pointNumber_ARPROT = ap_const_lv3_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARQOS() {
    m_axi_pointNumber_ARQOS = ap_const_lv4_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARREGION() {
    m_axi_pointNumber_ARREGION = ap_const_lv4_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARSIZE() {
    m_axi_pointNumber_ARSIZE = ap_const_lv3_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARUSER() {
    m_axi_pointNumber_ARUSER = ap_const_lv1_0;
}

void HessianDetector::thread_m_axi_pointNumber_ARVALID() {
    m_axi_pointNumber_ARVALID = ap_const_logic_0;
}

void HessianDetector::thread_m_axi_pointNumber_AWADDR() {
    m_axi_pointNumber_AWADDR = findCharacteristicPo_U0_m_axi_pointNumber_AWADDR.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWBURST() {
    m_axi_pointNumber_AWBURST = findCharacteristicPo_U0_m_axi_pointNumber_AWBURST.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWCACHE() {
    m_axi_pointNumber_AWCACHE = findCharacteristicPo_U0_m_axi_pointNumber_AWCACHE.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWID() {
    m_axi_pointNumber_AWID = findCharacteristicPo_U0_m_axi_pointNumber_AWID.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWLEN() {
    m_axi_pointNumber_AWLEN = findCharacteristicPo_U0_m_axi_pointNumber_AWLEN.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWLOCK() {
    m_axi_pointNumber_AWLOCK = findCharacteristicPo_U0_m_axi_pointNumber_AWLOCK.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWPROT() {
    m_axi_pointNumber_AWPROT = findCharacteristicPo_U0_m_axi_pointNumber_AWPROT.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWQOS() {
    m_axi_pointNumber_AWQOS = findCharacteristicPo_U0_m_axi_pointNumber_AWQOS.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWREGION() {
    m_axi_pointNumber_AWREGION = findCharacteristicPo_U0_m_axi_pointNumber_AWREGION.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWSIZE() {
    m_axi_pointNumber_AWSIZE = findCharacteristicPo_U0_m_axi_pointNumber_AWSIZE.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWUSER() {
    m_axi_pointNumber_AWUSER = findCharacteristicPo_U0_m_axi_pointNumber_AWUSER.read();
}

void HessianDetector::thread_m_axi_pointNumber_AWVALID() {
    m_axi_pointNumber_AWVALID = findCharacteristicPo_U0_m_axi_pointNumber_AWVALID.read();
}

void HessianDetector::thread_m_axi_pointNumber_BREADY() {
    m_axi_pointNumber_BREADY = findCharacteristicPo_U0_m_axi_pointNumber_BREADY.read();
}

void HessianDetector::thread_m_axi_pointNumber_RREADY() {
    m_axi_pointNumber_RREADY = ap_const_logic_0;
}

void HessianDetector::thread_m_axi_pointNumber_WDATA() {
    m_axi_pointNumber_WDATA = findCharacteristicPo_U0_m_axi_pointNumber_WDATA.read();
}

void HessianDetector::thread_m_axi_pointNumber_WID() {
    m_axi_pointNumber_WID = findCharacteristicPo_U0_m_axi_pointNumber_WID.read();
}

void HessianDetector::thread_m_axi_pointNumber_WLAST() {
    m_axi_pointNumber_WLAST = findCharacteristicPo_U0_m_axi_pointNumber_WLAST.read();
}

void HessianDetector::thread_m_axi_pointNumber_WSTRB() {
    m_axi_pointNumber_WSTRB = findCharacteristicPo_U0_m_axi_pointNumber_WSTRB.read();
}

void HessianDetector::thread_m_axi_pointNumber_WUSER() {
    m_axi_pointNumber_WUSER = findCharacteristicPo_U0_m_axi_pointNumber_WUSER.read();
}

void HessianDetector::thread_m_axi_pointNumber_WVALID() {
    m_axi_pointNumber_WVALID = findCharacteristicPo_U0_m_axi_pointNumber_WVALID.read();
}

void HessianDetector::thread_start_for_findCharacteristicPo_U0_din() {
    start_for_findCharacteristicPo_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void HessianDetector::thread_sum_V_read() {
    sum_V_read = calcLayerDetAndTrace_U0_sum_V_read.read();
}

}

