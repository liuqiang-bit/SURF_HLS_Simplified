// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "surfDetector.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int surfDetector::C_M_AXI_KEYPOINTS_V_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int surfDetector::C_M_AXI_KEYPOINTS_V_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int surfDetector::C_M_AXI_KEYPOINTS_V_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int surfDetector::C_M_AXI_KEYPOINTS_V_CACHE_VALUE = "11";
const int surfDetector::C_M_AXI_ID_WIDTH = "1";
const int surfDetector::C_M_AXI_ADDR_WIDTH = "100000";
const int surfDetector::C_M_AXI_DATA_WIDTH = "100000";
const int surfDetector::C_M_AXI_WSTRB_WIDTH = "100";
const int surfDetector::C_M_AXI_AWUSER_WIDTH = "1";
const int surfDetector::C_M_AXI_ARUSER_WIDTH = "1";
const int surfDetector::C_M_AXI_WUSER_WIDTH = "1";
const int surfDetector::C_M_AXI_RUSER_WIDTH = "1";
const int surfDetector::C_M_AXI_BUSER_WIDTH = "1";
const sc_logic surfDetector::ap_const_logic_1 = sc_dt::Log_1;
const int surfDetector::C_M_AXI_KPN_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int surfDetector::C_M_AXI_KPN_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int surfDetector::C_M_AXI_KPN_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int surfDetector::C_M_AXI_KPN_CACHE_VALUE = "11";
const sc_logic surfDetector::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> surfDetector::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> surfDetector::ap_const_lv32_1 = "1";
const sc_lv<1> surfDetector::ap_const_lv1_0 = "0";
const sc_lv<1> surfDetector::ap_const_lv1_1 = "1";
const sc_lv<3> surfDetector::ap_const_lv3_0 = "000";
const sc_lv<3> surfDetector::ap_const_lv3_1 = "1";
const sc_lv<2> surfDetector::ap_const_lv2_0 = "00";
const sc_lv<2> surfDetector::ap_const_lv2_1 = "1";
const sc_lv<4> surfDetector::ap_const_lv4_0 = "0000";
const sc_lv<4> surfDetector::ap_const_lv4_1 = "1";

surfDetector::surfDetector(sc_module_name name) : sc_module(name), mVcdFile(0) {
    surfDetector_keyPoints_V_m_axi_U = new surfDetector_keyPoints_V_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_KEYPOINTS_V_ID_WIDTH,C_M_AXI_KEYPOINTS_V_ADDR_WIDTH,C_M_AXI_KEYPOINTS_V_DATA_WIDTH,C_M_AXI_KEYPOINTS_V_AWUSER_WIDTH,C_M_AXI_KEYPOINTS_V_ARUSER_WIDTH,C_M_AXI_KEYPOINTS_V_WUSER_WIDTH,C_M_AXI_KEYPOINTS_V_RUSER_WIDTH,C_M_AXI_KEYPOINTS_V_BUSER_WIDTH,C_M_AXI_KEYPOINTS_V_TARGET_ADDR,C_M_AXI_KEYPOINTS_V_USER_VALUE,C_M_AXI_KEYPOINTS_V_PROT_VALUE,C_M_AXI_KEYPOINTS_V_CACHE_VALUE>("surfDetector_keyPoints_V_m_axi_U");
    surfDetector_keyPoints_V_m_axi_U->AWVALID(m_axi_keyPoints_V_AWVALID);
    surfDetector_keyPoints_V_m_axi_U->AWREADY(m_axi_keyPoints_V_AWREADY);
    surfDetector_keyPoints_V_m_axi_U->AWADDR(m_axi_keyPoints_V_AWADDR);
    surfDetector_keyPoints_V_m_axi_U->AWID(m_axi_keyPoints_V_AWID);
    surfDetector_keyPoints_V_m_axi_U->AWLEN(m_axi_keyPoints_V_AWLEN);
    surfDetector_keyPoints_V_m_axi_U->AWSIZE(m_axi_keyPoints_V_AWSIZE);
    surfDetector_keyPoints_V_m_axi_U->AWBURST(m_axi_keyPoints_V_AWBURST);
    surfDetector_keyPoints_V_m_axi_U->AWLOCK(m_axi_keyPoints_V_AWLOCK);
    surfDetector_keyPoints_V_m_axi_U->AWCACHE(m_axi_keyPoints_V_AWCACHE);
    surfDetector_keyPoints_V_m_axi_U->AWPROT(m_axi_keyPoints_V_AWPROT);
    surfDetector_keyPoints_V_m_axi_U->AWQOS(m_axi_keyPoints_V_AWQOS);
    surfDetector_keyPoints_V_m_axi_U->AWREGION(m_axi_keyPoints_V_AWREGION);
    surfDetector_keyPoints_V_m_axi_U->AWUSER(m_axi_keyPoints_V_AWUSER);
    surfDetector_keyPoints_V_m_axi_U->WVALID(m_axi_keyPoints_V_WVALID);
    surfDetector_keyPoints_V_m_axi_U->WREADY(m_axi_keyPoints_V_WREADY);
    surfDetector_keyPoints_V_m_axi_U->WDATA(m_axi_keyPoints_V_WDATA);
    surfDetector_keyPoints_V_m_axi_U->WSTRB(m_axi_keyPoints_V_WSTRB);
    surfDetector_keyPoints_V_m_axi_U->WLAST(m_axi_keyPoints_V_WLAST);
    surfDetector_keyPoints_V_m_axi_U->WID(m_axi_keyPoints_V_WID);
    surfDetector_keyPoints_V_m_axi_U->WUSER(m_axi_keyPoints_V_WUSER);
    surfDetector_keyPoints_V_m_axi_U->ARVALID(m_axi_keyPoints_V_ARVALID);
    surfDetector_keyPoints_V_m_axi_U->ARREADY(m_axi_keyPoints_V_ARREADY);
    surfDetector_keyPoints_V_m_axi_U->ARADDR(m_axi_keyPoints_V_ARADDR);
    surfDetector_keyPoints_V_m_axi_U->ARID(m_axi_keyPoints_V_ARID);
    surfDetector_keyPoints_V_m_axi_U->ARLEN(m_axi_keyPoints_V_ARLEN);
    surfDetector_keyPoints_V_m_axi_U->ARSIZE(m_axi_keyPoints_V_ARSIZE);
    surfDetector_keyPoints_V_m_axi_U->ARBURST(m_axi_keyPoints_V_ARBURST);
    surfDetector_keyPoints_V_m_axi_U->ARLOCK(m_axi_keyPoints_V_ARLOCK);
    surfDetector_keyPoints_V_m_axi_U->ARCACHE(m_axi_keyPoints_V_ARCACHE);
    surfDetector_keyPoints_V_m_axi_U->ARPROT(m_axi_keyPoints_V_ARPROT);
    surfDetector_keyPoints_V_m_axi_U->ARQOS(m_axi_keyPoints_V_ARQOS);
    surfDetector_keyPoints_V_m_axi_U->ARREGION(m_axi_keyPoints_V_ARREGION);
    surfDetector_keyPoints_V_m_axi_U->ARUSER(m_axi_keyPoints_V_ARUSER);
    surfDetector_keyPoints_V_m_axi_U->RVALID(m_axi_keyPoints_V_RVALID);
    surfDetector_keyPoints_V_m_axi_U->RREADY(m_axi_keyPoints_V_RREADY);
    surfDetector_keyPoints_V_m_axi_U->RDATA(m_axi_keyPoints_V_RDATA);
    surfDetector_keyPoints_V_m_axi_U->RLAST(m_axi_keyPoints_V_RLAST);
    surfDetector_keyPoints_V_m_axi_U->RID(m_axi_keyPoints_V_RID);
    surfDetector_keyPoints_V_m_axi_U->RUSER(m_axi_keyPoints_V_RUSER);
    surfDetector_keyPoints_V_m_axi_U->RRESP(m_axi_keyPoints_V_RRESP);
    surfDetector_keyPoints_V_m_axi_U->BVALID(m_axi_keyPoints_V_BVALID);
    surfDetector_keyPoints_V_m_axi_U->BREADY(m_axi_keyPoints_V_BREADY);
    surfDetector_keyPoints_V_m_axi_U->BRESP(m_axi_keyPoints_V_BRESP);
    surfDetector_keyPoints_V_m_axi_U->BID(m_axi_keyPoints_V_BID);
    surfDetector_keyPoints_V_m_axi_U->BUSER(m_axi_keyPoints_V_BUSER);
    surfDetector_keyPoints_V_m_axi_U->ACLK(ap_clk);
    surfDetector_keyPoints_V_m_axi_U->ARESET(ap_rst_n_inv);
    surfDetector_keyPoints_V_m_axi_U->ACLK_EN(ap_var_for_const0);
    surfDetector_keyPoints_V_m_axi_U->I_ARVALID(ap_var_for_const1);
    surfDetector_keyPoints_V_m_axi_U->I_ARREADY(keyPoints_V_ARREADY);
    surfDetector_keyPoints_V_m_axi_U->I_ARADDR(ap_var_for_const2);
    surfDetector_keyPoints_V_m_axi_U->I_ARID(ap_var_for_const3);
    surfDetector_keyPoints_V_m_axi_U->I_ARLEN(ap_var_for_const2);
    surfDetector_keyPoints_V_m_axi_U->I_ARSIZE(ap_var_for_const4);
    surfDetector_keyPoints_V_m_axi_U->I_ARLOCK(ap_var_for_const5);
    surfDetector_keyPoints_V_m_axi_U->I_ARCACHE(ap_var_for_const6);
    surfDetector_keyPoints_V_m_axi_U->I_ARQOS(ap_var_for_const6);
    surfDetector_keyPoints_V_m_axi_U->I_ARPROT(ap_var_for_const4);
    surfDetector_keyPoints_V_m_axi_U->I_ARUSER(ap_var_for_const3);
    surfDetector_keyPoints_V_m_axi_U->I_ARBURST(ap_var_for_const5);
    surfDetector_keyPoints_V_m_axi_U->I_ARREGION(ap_var_for_const6);
    surfDetector_keyPoints_V_m_axi_U->I_RVALID(keyPoints_V_RVALID);
    surfDetector_keyPoints_V_m_axi_U->I_RREADY(ap_var_for_const1);
    surfDetector_keyPoints_V_m_axi_U->I_RDATA(keyPoints_V_RDATA);
    surfDetector_keyPoints_V_m_axi_U->I_RID(keyPoints_V_RID);
    surfDetector_keyPoints_V_m_axi_U->I_RUSER(keyPoints_V_RUSER);
    surfDetector_keyPoints_V_m_axi_U->I_RRESP(keyPoints_V_RRESP);
    surfDetector_keyPoints_V_m_axi_U->I_RLAST(keyPoints_V_RLAST);
    surfDetector_keyPoints_V_m_axi_U->I_AWVALID(HessianDetector_U0_m_axi_keyPoints_V_AWVALID);
    surfDetector_keyPoints_V_m_axi_U->I_AWREADY(keyPoints_V_AWREADY);
    surfDetector_keyPoints_V_m_axi_U->I_AWADDR(HessianDetector_U0_m_axi_keyPoints_V_AWADDR);
    surfDetector_keyPoints_V_m_axi_U->I_AWID(HessianDetector_U0_m_axi_keyPoints_V_AWID);
    surfDetector_keyPoints_V_m_axi_U->I_AWLEN(HessianDetector_U0_m_axi_keyPoints_V_AWLEN);
    surfDetector_keyPoints_V_m_axi_U->I_AWSIZE(HessianDetector_U0_m_axi_keyPoints_V_AWSIZE);
    surfDetector_keyPoints_V_m_axi_U->I_AWLOCK(HessianDetector_U0_m_axi_keyPoints_V_AWLOCK);
    surfDetector_keyPoints_V_m_axi_U->I_AWCACHE(HessianDetector_U0_m_axi_keyPoints_V_AWCACHE);
    surfDetector_keyPoints_V_m_axi_U->I_AWQOS(HessianDetector_U0_m_axi_keyPoints_V_AWQOS);
    surfDetector_keyPoints_V_m_axi_U->I_AWPROT(HessianDetector_U0_m_axi_keyPoints_V_AWPROT);
    surfDetector_keyPoints_V_m_axi_U->I_AWUSER(HessianDetector_U0_m_axi_keyPoints_V_AWUSER);
    surfDetector_keyPoints_V_m_axi_U->I_AWBURST(HessianDetector_U0_m_axi_keyPoints_V_AWBURST);
    surfDetector_keyPoints_V_m_axi_U->I_AWREGION(HessianDetector_U0_m_axi_keyPoints_V_AWREGION);
    surfDetector_keyPoints_V_m_axi_U->I_WVALID(HessianDetector_U0_m_axi_keyPoints_V_WVALID);
    surfDetector_keyPoints_V_m_axi_U->I_WREADY(keyPoints_V_WREADY);
    surfDetector_keyPoints_V_m_axi_U->I_WDATA(HessianDetector_U0_m_axi_keyPoints_V_WDATA);
    surfDetector_keyPoints_V_m_axi_U->I_WID(HessianDetector_U0_m_axi_keyPoints_V_WID);
    surfDetector_keyPoints_V_m_axi_U->I_WUSER(HessianDetector_U0_m_axi_keyPoints_V_WUSER);
    surfDetector_keyPoints_V_m_axi_U->I_WLAST(HessianDetector_U0_m_axi_keyPoints_V_WLAST);
    surfDetector_keyPoints_V_m_axi_U->I_WSTRB(HessianDetector_U0_m_axi_keyPoints_V_WSTRB);
    surfDetector_keyPoints_V_m_axi_U->I_BVALID(keyPoints_V_BVALID);
    surfDetector_keyPoints_V_m_axi_U->I_BREADY(HessianDetector_U0_m_axi_keyPoints_V_BREADY);
    surfDetector_keyPoints_V_m_axi_U->I_BRESP(keyPoints_V_BRESP);
    surfDetector_keyPoints_V_m_axi_U->I_BID(keyPoints_V_BID);
    surfDetector_keyPoints_V_m_axi_U->I_BUSER(keyPoints_V_BUSER);
    surfDetector_kpn_m_axi_U = new surfDetector_kpn_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_KPN_ID_WIDTH,C_M_AXI_KPN_ADDR_WIDTH,C_M_AXI_KPN_DATA_WIDTH,C_M_AXI_KPN_AWUSER_WIDTH,C_M_AXI_KPN_ARUSER_WIDTH,C_M_AXI_KPN_WUSER_WIDTH,C_M_AXI_KPN_RUSER_WIDTH,C_M_AXI_KPN_BUSER_WIDTH,C_M_AXI_KPN_TARGET_ADDR,C_M_AXI_KPN_USER_VALUE,C_M_AXI_KPN_PROT_VALUE,C_M_AXI_KPN_CACHE_VALUE>("surfDetector_kpn_m_axi_U");
    surfDetector_kpn_m_axi_U->AWVALID(m_axi_kpn_AWVALID);
    surfDetector_kpn_m_axi_U->AWREADY(m_axi_kpn_AWREADY);
    surfDetector_kpn_m_axi_U->AWADDR(m_axi_kpn_AWADDR);
    surfDetector_kpn_m_axi_U->AWID(m_axi_kpn_AWID);
    surfDetector_kpn_m_axi_U->AWLEN(m_axi_kpn_AWLEN);
    surfDetector_kpn_m_axi_U->AWSIZE(m_axi_kpn_AWSIZE);
    surfDetector_kpn_m_axi_U->AWBURST(m_axi_kpn_AWBURST);
    surfDetector_kpn_m_axi_U->AWLOCK(m_axi_kpn_AWLOCK);
    surfDetector_kpn_m_axi_U->AWCACHE(m_axi_kpn_AWCACHE);
    surfDetector_kpn_m_axi_U->AWPROT(m_axi_kpn_AWPROT);
    surfDetector_kpn_m_axi_U->AWQOS(m_axi_kpn_AWQOS);
    surfDetector_kpn_m_axi_U->AWREGION(m_axi_kpn_AWREGION);
    surfDetector_kpn_m_axi_U->AWUSER(m_axi_kpn_AWUSER);
    surfDetector_kpn_m_axi_U->WVALID(m_axi_kpn_WVALID);
    surfDetector_kpn_m_axi_U->WREADY(m_axi_kpn_WREADY);
    surfDetector_kpn_m_axi_U->WDATA(m_axi_kpn_WDATA);
    surfDetector_kpn_m_axi_U->WSTRB(m_axi_kpn_WSTRB);
    surfDetector_kpn_m_axi_U->WLAST(m_axi_kpn_WLAST);
    surfDetector_kpn_m_axi_U->WID(m_axi_kpn_WID);
    surfDetector_kpn_m_axi_U->WUSER(m_axi_kpn_WUSER);
    surfDetector_kpn_m_axi_U->ARVALID(m_axi_kpn_ARVALID);
    surfDetector_kpn_m_axi_U->ARREADY(m_axi_kpn_ARREADY);
    surfDetector_kpn_m_axi_U->ARADDR(m_axi_kpn_ARADDR);
    surfDetector_kpn_m_axi_U->ARID(m_axi_kpn_ARID);
    surfDetector_kpn_m_axi_U->ARLEN(m_axi_kpn_ARLEN);
    surfDetector_kpn_m_axi_U->ARSIZE(m_axi_kpn_ARSIZE);
    surfDetector_kpn_m_axi_U->ARBURST(m_axi_kpn_ARBURST);
    surfDetector_kpn_m_axi_U->ARLOCK(m_axi_kpn_ARLOCK);
    surfDetector_kpn_m_axi_U->ARCACHE(m_axi_kpn_ARCACHE);
    surfDetector_kpn_m_axi_U->ARPROT(m_axi_kpn_ARPROT);
    surfDetector_kpn_m_axi_U->ARQOS(m_axi_kpn_ARQOS);
    surfDetector_kpn_m_axi_U->ARREGION(m_axi_kpn_ARREGION);
    surfDetector_kpn_m_axi_U->ARUSER(m_axi_kpn_ARUSER);
    surfDetector_kpn_m_axi_U->RVALID(m_axi_kpn_RVALID);
    surfDetector_kpn_m_axi_U->RREADY(m_axi_kpn_RREADY);
    surfDetector_kpn_m_axi_U->RDATA(m_axi_kpn_RDATA);
    surfDetector_kpn_m_axi_U->RLAST(m_axi_kpn_RLAST);
    surfDetector_kpn_m_axi_U->RID(m_axi_kpn_RID);
    surfDetector_kpn_m_axi_U->RUSER(m_axi_kpn_RUSER);
    surfDetector_kpn_m_axi_U->RRESP(m_axi_kpn_RRESP);
    surfDetector_kpn_m_axi_U->BVALID(m_axi_kpn_BVALID);
    surfDetector_kpn_m_axi_U->BREADY(m_axi_kpn_BREADY);
    surfDetector_kpn_m_axi_U->BRESP(m_axi_kpn_BRESP);
    surfDetector_kpn_m_axi_U->BID(m_axi_kpn_BID);
    surfDetector_kpn_m_axi_U->BUSER(m_axi_kpn_BUSER);
    surfDetector_kpn_m_axi_U->ACLK(ap_clk);
    surfDetector_kpn_m_axi_U->ARESET(ap_rst_n_inv);
    surfDetector_kpn_m_axi_U->ACLK_EN(ap_var_for_const0);
    surfDetector_kpn_m_axi_U->I_ARVALID(ap_var_for_const1);
    surfDetector_kpn_m_axi_U->I_ARREADY(kpn_ARREADY);
    surfDetector_kpn_m_axi_U->I_ARADDR(ap_var_for_const2);
    surfDetector_kpn_m_axi_U->I_ARID(ap_var_for_const3);
    surfDetector_kpn_m_axi_U->I_ARLEN(ap_var_for_const2);
    surfDetector_kpn_m_axi_U->I_ARSIZE(ap_var_for_const4);
    surfDetector_kpn_m_axi_U->I_ARLOCK(ap_var_for_const5);
    surfDetector_kpn_m_axi_U->I_ARCACHE(ap_var_for_const6);
    surfDetector_kpn_m_axi_U->I_ARQOS(ap_var_for_const6);
    surfDetector_kpn_m_axi_U->I_ARPROT(ap_var_for_const4);
    surfDetector_kpn_m_axi_U->I_ARUSER(ap_var_for_const3);
    surfDetector_kpn_m_axi_U->I_ARBURST(ap_var_for_const5);
    surfDetector_kpn_m_axi_U->I_ARREGION(ap_var_for_const6);
    surfDetector_kpn_m_axi_U->I_RVALID(kpn_RVALID);
    surfDetector_kpn_m_axi_U->I_RREADY(ap_var_for_const1);
    surfDetector_kpn_m_axi_U->I_RDATA(kpn_RDATA);
    surfDetector_kpn_m_axi_U->I_RID(kpn_RID);
    surfDetector_kpn_m_axi_U->I_RUSER(kpn_RUSER);
    surfDetector_kpn_m_axi_U->I_RRESP(kpn_RRESP);
    surfDetector_kpn_m_axi_U->I_RLAST(kpn_RLAST);
    surfDetector_kpn_m_axi_U->I_AWVALID(HessianDetector_U0_m_axi_pointNumber_AWVALID);
    surfDetector_kpn_m_axi_U->I_AWREADY(kpn_AWREADY);
    surfDetector_kpn_m_axi_U->I_AWADDR(HessianDetector_U0_m_axi_pointNumber_AWADDR);
    surfDetector_kpn_m_axi_U->I_AWID(HessianDetector_U0_m_axi_pointNumber_AWID);
    surfDetector_kpn_m_axi_U->I_AWLEN(HessianDetector_U0_m_axi_pointNumber_AWLEN);
    surfDetector_kpn_m_axi_U->I_AWSIZE(HessianDetector_U0_m_axi_pointNumber_AWSIZE);
    surfDetector_kpn_m_axi_U->I_AWLOCK(HessianDetector_U0_m_axi_pointNumber_AWLOCK);
    surfDetector_kpn_m_axi_U->I_AWCACHE(HessianDetector_U0_m_axi_pointNumber_AWCACHE);
    surfDetector_kpn_m_axi_U->I_AWQOS(HessianDetector_U0_m_axi_pointNumber_AWQOS);
    surfDetector_kpn_m_axi_U->I_AWPROT(HessianDetector_U0_m_axi_pointNumber_AWPROT);
    surfDetector_kpn_m_axi_U->I_AWUSER(HessianDetector_U0_m_axi_pointNumber_AWUSER);
    surfDetector_kpn_m_axi_U->I_AWBURST(HessianDetector_U0_m_axi_pointNumber_AWBURST);
    surfDetector_kpn_m_axi_U->I_AWREGION(HessianDetector_U0_m_axi_pointNumber_AWREGION);
    surfDetector_kpn_m_axi_U->I_WVALID(HessianDetector_U0_m_axi_pointNumber_WVALID);
    surfDetector_kpn_m_axi_U->I_WREADY(kpn_WREADY);
    surfDetector_kpn_m_axi_U->I_WDATA(HessianDetector_U0_m_axi_pointNumber_WDATA);
    surfDetector_kpn_m_axi_U->I_WID(HessianDetector_U0_m_axi_pointNumber_WID);
    surfDetector_kpn_m_axi_U->I_WUSER(HessianDetector_U0_m_axi_pointNumber_WUSER);
    surfDetector_kpn_m_axi_U->I_WLAST(HessianDetector_U0_m_axi_pointNumber_WLAST);
    surfDetector_kpn_m_axi_U->I_WSTRB(HessianDetector_U0_m_axi_pointNumber_WSTRB);
    surfDetector_kpn_m_axi_U->I_BVALID(kpn_BVALID);
    surfDetector_kpn_m_axi_U->I_BREADY(HessianDetector_U0_m_axi_pointNumber_BREADY);
    surfDetector_kpn_m_axi_U->I_BRESP(kpn_BRESP);
    surfDetector_kpn_m_axi_U->I_BID(kpn_BID);
    surfDetector_kpn_m_axi_U->I_BUSER(kpn_BUSER);
    integralImg_U0 = new integralImg("integralImg_U0");
    integralImg_U0->ap_clk(ap_clk);
    integralImg_U0->ap_rst(ap_rst_n_inv);
    integralImg_U0->ap_start(integralImg_U0_ap_start);
    integralImg_U0->start_full_n(start_for_HessianDetector_U0_full_n);
    integralImg_U0->ap_done(integralImg_U0_ap_done);
    integralImg_U0->ap_continue(integralImg_U0_ap_continue);
    integralImg_U0->ap_idle(integralImg_U0_ap_idle);
    integralImg_U0->ap_ready(integralImg_U0_ap_ready);
    integralImg_U0->start_out(integralImg_U0_start_out);
    integralImg_U0->start_write(integralImg_U0_start_write);
    integralImg_U0->video_in_TDATA(video_in_TDATA);
    integralImg_U0->video_in_TVALID(video_in_TVALID);
    integralImg_U0->video_in_TREADY(integralImg_U0_video_in_TREADY);
    integralImg_U0->video_in_TKEEP(video_in_TKEEP);
    integralImg_U0->video_in_TSTRB(video_in_TSTRB);
    integralImg_U0->video_in_TUSER(video_in_TUSER);
    integralImg_U0->video_in_TLAST(video_in_TLAST);
    integralImg_U0->video_in_TID(video_in_TID);
    integralImg_U0->video_in_TDEST(video_in_TDEST);
    integralImg_U0->sum_V_din(integralImg_U0_sum_V_din);
    integralImg_U0->sum_V_full_n(sum_V_full_n);
    integralImg_U0->sum_V_write(integralImg_U0_sum_V_write);
    HessianDetector_U0 = new HessianDetector("HessianDetector_U0");
    HessianDetector_U0->m_axi_keyPoints_V_AWVALID(HessianDetector_U0_m_axi_keyPoints_V_AWVALID);
    HessianDetector_U0->m_axi_keyPoints_V_AWREADY(keyPoints_V_AWREADY);
    HessianDetector_U0->m_axi_keyPoints_V_AWADDR(HessianDetector_U0_m_axi_keyPoints_V_AWADDR);
    HessianDetector_U0->m_axi_keyPoints_V_AWID(HessianDetector_U0_m_axi_keyPoints_V_AWID);
    HessianDetector_U0->m_axi_keyPoints_V_AWLEN(HessianDetector_U0_m_axi_keyPoints_V_AWLEN);
    HessianDetector_U0->m_axi_keyPoints_V_AWSIZE(HessianDetector_U0_m_axi_keyPoints_V_AWSIZE);
    HessianDetector_U0->m_axi_keyPoints_V_AWBURST(HessianDetector_U0_m_axi_keyPoints_V_AWBURST);
    HessianDetector_U0->m_axi_keyPoints_V_AWLOCK(HessianDetector_U0_m_axi_keyPoints_V_AWLOCK);
    HessianDetector_U0->m_axi_keyPoints_V_AWCACHE(HessianDetector_U0_m_axi_keyPoints_V_AWCACHE);
    HessianDetector_U0->m_axi_keyPoints_V_AWPROT(HessianDetector_U0_m_axi_keyPoints_V_AWPROT);
    HessianDetector_U0->m_axi_keyPoints_V_AWQOS(HessianDetector_U0_m_axi_keyPoints_V_AWQOS);
    HessianDetector_U0->m_axi_keyPoints_V_AWREGION(HessianDetector_U0_m_axi_keyPoints_V_AWREGION);
    HessianDetector_U0->m_axi_keyPoints_V_AWUSER(HessianDetector_U0_m_axi_keyPoints_V_AWUSER);
    HessianDetector_U0->m_axi_keyPoints_V_WVALID(HessianDetector_U0_m_axi_keyPoints_V_WVALID);
    HessianDetector_U0->m_axi_keyPoints_V_WREADY(keyPoints_V_WREADY);
    HessianDetector_U0->m_axi_keyPoints_V_WDATA(HessianDetector_U0_m_axi_keyPoints_V_WDATA);
    HessianDetector_U0->m_axi_keyPoints_V_WSTRB(HessianDetector_U0_m_axi_keyPoints_V_WSTRB);
    HessianDetector_U0->m_axi_keyPoints_V_WLAST(HessianDetector_U0_m_axi_keyPoints_V_WLAST);
    HessianDetector_U0->m_axi_keyPoints_V_WID(HessianDetector_U0_m_axi_keyPoints_V_WID);
    HessianDetector_U0->m_axi_keyPoints_V_WUSER(HessianDetector_U0_m_axi_keyPoints_V_WUSER);
    HessianDetector_U0->m_axi_keyPoints_V_ARVALID(HessianDetector_U0_m_axi_keyPoints_V_ARVALID);
    HessianDetector_U0->m_axi_keyPoints_V_ARREADY(ap_var_for_const1);
    HessianDetector_U0->m_axi_keyPoints_V_ARADDR(HessianDetector_U0_m_axi_keyPoints_V_ARADDR);
    HessianDetector_U0->m_axi_keyPoints_V_ARID(HessianDetector_U0_m_axi_keyPoints_V_ARID);
    HessianDetector_U0->m_axi_keyPoints_V_ARLEN(HessianDetector_U0_m_axi_keyPoints_V_ARLEN);
    HessianDetector_U0->m_axi_keyPoints_V_ARSIZE(HessianDetector_U0_m_axi_keyPoints_V_ARSIZE);
    HessianDetector_U0->m_axi_keyPoints_V_ARBURST(HessianDetector_U0_m_axi_keyPoints_V_ARBURST);
    HessianDetector_U0->m_axi_keyPoints_V_ARLOCK(HessianDetector_U0_m_axi_keyPoints_V_ARLOCK);
    HessianDetector_U0->m_axi_keyPoints_V_ARCACHE(HessianDetector_U0_m_axi_keyPoints_V_ARCACHE);
    HessianDetector_U0->m_axi_keyPoints_V_ARPROT(HessianDetector_U0_m_axi_keyPoints_V_ARPROT);
    HessianDetector_U0->m_axi_keyPoints_V_ARQOS(HessianDetector_U0_m_axi_keyPoints_V_ARQOS);
    HessianDetector_U0->m_axi_keyPoints_V_ARREGION(HessianDetector_U0_m_axi_keyPoints_V_ARREGION);
    HessianDetector_U0->m_axi_keyPoints_V_ARUSER(HessianDetector_U0_m_axi_keyPoints_V_ARUSER);
    HessianDetector_U0->m_axi_keyPoints_V_RVALID(ap_var_for_const1);
    HessianDetector_U0->m_axi_keyPoints_V_RREADY(HessianDetector_U0_m_axi_keyPoints_V_RREADY);
    HessianDetector_U0->m_axi_keyPoints_V_RDATA(ap_var_for_const2);
    HessianDetector_U0->m_axi_keyPoints_V_RLAST(ap_var_for_const1);
    HessianDetector_U0->m_axi_keyPoints_V_RID(ap_var_for_const3);
    HessianDetector_U0->m_axi_keyPoints_V_RUSER(ap_var_for_const3);
    HessianDetector_U0->m_axi_keyPoints_V_RRESP(ap_var_for_const5);
    HessianDetector_U0->m_axi_keyPoints_V_BVALID(keyPoints_V_BVALID);
    HessianDetector_U0->m_axi_keyPoints_V_BREADY(HessianDetector_U0_m_axi_keyPoints_V_BREADY);
    HessianDetector_U0->m_axi_keyPoints_V_BRESP(keyPoints_V_BRESP);
    HessianDetector_U0->m_axi_keyPoints_V_BID(keyPoints_V_BID);
    HessianDetector_U0->m_axi_keyPoints_V_BUSER(keyPoints_V_BUSER);
    HessianDetector_U0->m_axi_pointNumber_AWVALID(HessianDetector_U0_m_axi_pointNumber_AWVALID);
    HessianDetector_U0->m_axi_pointNumber_AWREADY(kpn_AWREADY);
    HessianDetector_U0->m_axi_pointNumber_AWADDR(HessianDetector_U0_m_axi_pointNumber_AWADDR);
    HessianDetector_U0->m_axi_pointNumber_AWID(HessianDetector_U0_m_axi_pointNumber_AWID);
    HessianDetector_U0->m_axi_pointNumber_AWLEN(HessianDetector_U0_m_axi_pointNumber_AWLEN);
    HessianDetector_U0->m_axi_pointNumber_AWSIZE(HessianDetector_U0_m_axi_pointNumber_AWSIZE);
    HessianDetector_U0->m_axi_pointNumber_AWBURST(HessianDetector_U0_m_axi_pointNumber_AWBURST);
    HessianDetector_U0->m_axi_pointNumber_AWLOCK(HessianDetector_U0_m_axi_pointNumber_AWLOCK);
    HessianDetector_U0->m_axi_pointNumber_AWCACHE(HessianDetector_U0_m_axi_pointNumber_AWCACHE);
    HessianDetector_U0->m_axi_pointNumber_AWPROT(HessianDetector_U0_m_axi_pointNumber_AWPROT);
    HessianDetector_U0->m_axi_pointNumber_AWQOS(HessianDetector_U0_m_axi_pointNumber_AWQOS);
    HessianDetector_U0->m_axi_pointNumber_AWREGION(HessianDetector_U0_m_axi_pointNumber_AWREGION);
    HessianDetector_U0->m_axi_pointNumber_AWUSER(HessianDetector_U0_m_axi_pointNumber_AWUSER);
    HessianDetector_U0->m_axi_pointNumber_WVALID(HessianDetector_U0_m_axi_pointNumber_WVALID);
    HessianDetector_U0->m_axi_pointNumber_WREADY(kpn_WREADY);
    HessianDetector_U0->m_axi_pointNumber_WDATA(HessianDetector_U0_m_axi_pointNumber_WDATA);
    HessianDetector_U0->m_axi_pointNumber_WSTRB(HessianDetector_U0_m_axi_pointNumber_WSTRB);
    HessianDetector_U0->m_axi_pointNumber_WLAST(HessianDetector_U0_m_axi_pointNumber_WLAST);
    HessianDetector_U0->m_axi_pointNumber_WID(HessianDetector_U0_m_axi_pointNumber_WID);
    HessianDetector_U0->m_axi_pointNumber_WUSER(HessianDetector_U0_m_axi_pointNumber_WUSER);
    HessianDetector_U0->m_axi_pointNumber_ARVALID(HessianDetector_U0_m_axi_pointNumber_ARVALID);
    HessianDetector_U0->m_axi_pointNumber_ARREADY(ap_var_for_const1);
    HessianDetector_U0->m_axi_pointNumber_ARADDR(HessianDetector_U0_m_axi_pointNumber_ARADDR);
    HessianDetector_U0->m_axi_pointNumber_ARID(HessianDetector_U0_m_axi_pointNumber_ARID);
    HessianDetector_U0->m_axi_pointNumber_ARLEN(HessianDetector_U0_m_axi_pointNumber_ARLEN);
    HessianDetector_U0->m_axi_pointNumber_ARSIZE(HessianDetector_U0_m_axi_pointNumber_ARSIZE);
    HessianDetector_U0->m_axi_pointNumber_ARBURST(HessianDetector_U0_m_axi_pointNumber_ARBURST);
    HessianDetector_U0->m_axi_pointNumber_ARLOCK(HessianDetector_U0_m_axi_pointNumber_ARLOCK);
    HessianDetector_U0->m_axi_pointNumber_ARCACHE(HessianDetector_U0_m_axi_pointNumber_ARCACHE);
    HessianDetector_U0->m_axi_pointNumber_ARPROT(HessianDetector_U0_m_axi_pointNumber_ARPROT);
    HessianDetector_U0->m_axi_pointNumber_ARQOS(HessianDetector_U0_m_axi_pointNumber_ARQOS);
    HessianDetector_U0->m_axi_pointNumber_ARREGION(HessianDetector_U0_m_axi_pointNumber_ARREGION);
    HessianDetector_U0->m_axi_pointNumber_ARUSER(HessianDetector_U0_m_axi_pointNumber_ARUSER);
    HessianDetector_U0->m_axi_pointNumber_RVALID(ap_var_for_const1);
    HessianDetector_U0->m_axi_pointNumber_RREADY(HessianDetector_U0_m_axi_pointNumber_RREADY);
    HessianDetector_U0->m_axi_pointNumber_RDATA(ap_var_for_const2);
    HessianDetector_U0->m_axi_pointNumber_RLAST(ap_var_for_const1);
    HessianDetector_U0->m_axi_pointNumber_RID(ap_var_for_const3);
    HessianDetector_U0->m_axi_pointNumber_RUSER(ap_var_for_const3);
    HessianDetector_U0->m_axi_pointNumber_RRESP(ap_var_for_const5);
    HessianDetector_U0->m_axi_pointNumber_BVALID(kpn_BVALID);
    HessianDetector_U0->m_axi_pointNumber_BREADY(HessianDetector_U0_m_axi_pointNumber_BREADY);
    HessianDetector_U0->m_axi_pointNumber_BRESP(kpn_BRESP);
    HessianDetector_U0->m_axi_pointNumber_BID(kpn_BID);
    HessianDetector_U0->m_axi_pointNumber_BUSER(kpn_BUSER);
    HessianDetector_U0->sum_V_dout(sum_V_dout);
    HessianDetector_U0->sum_V_empty_n(sum_V_empty_n);
    HessianDetector_U0->sum_V_read(HessianDetector_U0_sum_V_read);
    HessianDetector_U0->ap_clk(ap_clk);
    HessianDetector_U0->ap_rst(ap_rst_n_inv);
    HessianDetector_U0->ap_start(HessianDetector_U0_ap_start);
    HessianDetector_U0->ap_done(HessianDetector_U0_ap_done);
    HessianDetector_U0->ap_ready(HessianDetector_U0_ap_ready);
    HessianDetector_U0->ap_idle(HessianDetector_U0_ap_idle);
    HessianDetector_U0->ap_continue(HessianDetector_U0_ap_continue);
    sum_V_U = new fifo_w32_d2_A_x("sum_V_U");
    sum_V_U->clk(ap_clk);
    sum_V_U->reset(ap_rst_n_inv);
    sum_V_U->if_read_ce(ap_var_for_const0);
    sum_V_U->if_write_ce(ap_var_for_const0);
    sum_V_U->if_din(integralImg_U0_sum_V_din);
    sum_V_U->if_full_n(sum_V_full_n);
    sum_V_U->if_write(integralImg_U0_sum_V_write);
    sum_V_U->if_dout(sum_V_dout);
    sum_V_U->if_empty_n(sum_V_empty_n);
    sum_V_U->if_read(HessianDetector_U0_sum_V_read);
    start_for_HessianJfO_U = new start_for_HessianJfO("start_for_HessianJfO_U");
    start_for_HessianJfO_U->clk(ap_clk);
    start_for_HessianJfO_U->reset(ap_rst_n_inv);
    start_for_HessianJfO_U->if_read_ce(ap_var_for_const0);
    start_for_HessianJfO_U->if_write_ce(ap_var_for_const0);
    start_for_HessianJfO_U->if_din(start_for_HessianDetector_U0_din);
    start_for_HessianJfO_U->if_full_n(start_for_HessianDetector_U0_full_n);
    start_for_HessianJfO_U->if_write(integralImg_U0_start_write);
    start_for_HessianJfO_U->if_dout(start_for_HessianDetector_U0_dout);
    start_for_HessianJfO_U->if_empty_n(start_for_HessianDetector_U0_empty_n);
    start_for_HessianJfO_U->if_read(HessianDetector_U0_ap_ready);

    SC_METHOD(thread_HessianDetector_U0_ap_continue);

    SC_METHOD(thread_HessianDetector_U0_ap_start);
    sensitive << ( start_for_HessianDetector_U0_empty_n );

    SC_METHOD(thread_HessianDetector_U0_start_full_n);

    SC_METHOD(thread_HessianDetector_U0_start_write);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_integralImg_U0_ap_continue);

    SC_METHOD(thread_integralImg_U0_ap_start);

    SC_METHOD(thread_start_for_HessianDetector_U0_din);

    SC_METHOD(thread_video_in_TREADY);
    sensitive << ( integralImg_U0_video_in_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const6);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "surfDetector_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWVALID, "(port)m_axi_keyPoints_V_AWVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWREADY, "(port)m_axi_keyPoints_V_AWREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWADDR, "(port)m_axi_keyPoints_V_AWADDR");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWID, "(port)m_axi_keyPoints_V_AWID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWLEN, "(port)m_axi_keyPoints_V_AWLEN");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWSIZE, "(port)m_axi_keyPoints_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWBURST, "(port)m_axi_keyPoints_V_AWBURST");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWLOCK, "(port)m_axi_keyPoints_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWCACHE, "(port)m_axi_keyPoints_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWPROT, "(port)m_axi_keyPoints_V_AWPROT");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWQOS, "(port)m_axi_keyPoints_V_AWQOS");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWREGION, "(port)m_axi_keyPoints_V_AWREGION");
    sc_trace(mVcdFile, m_axi_keyPoints_V_AWUSER, "(port)m_axi_keyPoints_V_AWUSER");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WVALID, "(port)m_axi_keyPoints_V_WVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WREADY, "(port)m_axi_keyPoints_V_WREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WDATA, "(port)m_axi_keyPoints_V_WDATA");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WSTRB, "(port)m_axi_keyPoints_V_WSTRB");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WLAST, "(port)m_axi_keyPoints_V_WLAST");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WID, "(port)m_axi_keyPoints_V_WID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_WUSER, "(port)m_axi_keyPoints_V_WUSER");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARVALID, "(port)m_axi_keyPoints_V_ARVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARREADY, "(port)m_axi_keyPoints_V_ARREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARADDR, "(port)m_axi_keyPoints_V_ARADDR");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARID, "(port)m_axi_keyPoints_V_ARID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARLEN, "(port)m_axi_keyPoints_V_ARLEN");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARSIZE, "(port)m_axi_keyPoints_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARBURST, "(port)m_axi_keyPoints_V_ARBURST");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARLOCK, "(port)m_axi_keyPoints_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARCACHE, "(port)m_axi_keyPoints_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARPROT, "(port)m_axi_keyPoints_V_ARPROT");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARQOS, "(port)m_axi_keyPoints_V_ARQOS");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARREGION, "(port)m_axi_keyPoints_V_ARREGION");
    sc_trace(mVcdFile, m_axi_keyPoints_V_ARUSER, "(port)m_axi_keyPoints_V_ARUSER");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RVALID, "(port)m_axi_keyPoints_V_RVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RREADY, "(port)m_axi_keyPoints_V_RREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RDATA, "(port)m_axi_keyPoints_V_RDATA");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RLAST, "(port)m_axi_keyPoints_V_RLAST");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RID, "(port)m_axi_keyPoints_V_RID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RUSER, "(port)m_axi_keyPoints_V_RUSER");
    sc_trace(mVcdFile, m_axi_keyPoints_V_RRESP, "(port)m_axi_keyPoints_V_RRESP");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BVALID, "(port)m_axi_keyPoints_V_BVALID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BREADY, "(port)m_axi_keyPoints_V_BREADY");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BRESP, "(port)m_axi_keyPoints_V_BRESP");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BID, "(port)m_axi_keyPoints_V_BID");
    sc_trace(mVcdFile, m_axi_keyPoints_V_BUSER, "(port)m_axi_keyPoints_V_BUSER");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_kpn_AWVALID, "(port)m_axi_kpn_AWVALID");
    sc_trace(mVcdFile, m_axi_kpn_AWREADY, "(port)m_axi_kpn_AWREADY");
    sc_trace(mVcdFile, m_axi_kpn_AWADDR, "(port)m_axi_kpn_AWADDR");
    sc_trace(mVcdFile, m_axi_kpn_AWID, "(port)m_axi_kpn_AWID");
    sc_trace(mVcdFile, m_axi_kpn_AWLEN, "(port)m_axi_kpn_AWLEN");
    sc_trace(mVcdFile, m_axi_kpn_AWSIZE, "(port)m_axi_kpn_AWSIZE");
    sc_trace(mVcdFile, m_axi_kpn_AWBURST, "(port)m_axi_kpn_AWBURST");
    sc_trace(mVcdFile, m_axi_kpn_AWLOCK, "(port)m_axi_kpn_AWLOCK");
    sc_trace(mVcdFile, m_axi_kpn_AWCACHE, "(port)m_axi_kpn_AWCACHE");
    sc_trace(mVcdFile, m_axi_kpn_AWPROT, "(port)m_axi_kpn_AWPROT");
    sc_trace(mVcdFile, m_axi_kpn_AWQOS, "(port)m_axi_kpn_AWQOS");
    sc_trace(mVcdFile, m_axi_kpn_AWREGION, "(port)m_axi_kpn_AWREGION");
    sc_trace(mVcdFile, m_axi_kpn_AWUSER, "(port)m_axi_kpn_AWUSER");
    sc_trace(mVcdFile, m_axi_kpn_WVALID, "(port)m_axi_kpn_WVALID");
    sc_trace(mVcdFile, m_axi_kpn_WREADY, "(port)m_axi_kpn_WREADY");
    sc_trace(mVcdFile, m_axi_kpn_WDATA, "(port)m_axi_kpn_WDATA");
    sc_trace(mVcdFile, m_axi_kpn_WSTRB, "(port)m_axi_kpn_WSTRB");
    sc_trace(mVcdFile, m_axi_kpn_WLAST, "(port)m_axi_kpn_WLAST");
    sc_trace(mVcdFile, m_axi_kpn_WID, "(port)m_axi_kpn_WID");
    sc_trace(mVcdFile, m_axi_kpn_WUSER, "(port)m_axi_kpn_WUSER");
    sc_trace(mVcdFile, m_axi_kpn_ARVALID, "(port)m_axi_kpn_ARVALID");
    sc_trace(mVcdFile, m_axi_kpn_ARREADY, "(port)m_axi_kpn_ARREADY");
    sc_trace(mVcdFile, m_axi_kpn_ARADDR, "(port)m_axi_kpn_ARADDR");
    sc_trace(mVcdFile, m_axi_kpn_ARID, "(port)m_axi_kpn_ARID");
    sc_trace(mVcdFile, m_axi_kpn_ARLEN, "(port)m_axi_kpn_ARLEN");
    sc_trace(mVcdFile, m_axi_kpn_ARSIZE, "(port)m_axi_kpn_ARSIZE");
    sc_trace(mVcdFile, m_axi_kpn_ARBURST, "(port)m_axi_kpn_ARBURST");
    sc_trace(mVcdFile, m_axi_kpn_ARLOCK, "(port)m_axi_kpn_ARLOCK");
    sc_trace(mVcdFile, m_axi_kpn_ARCACHE, "(port)m_axi_kpn_ARCACHE");
    sc_trace(mVcdFile, m_axi_kpn_ARPROT, "(port)m_axi_kpn_ARPROT");
    sc_trace(mVcdFile, m_axi_kpn_ARQOS, "(port)m_axi_kpn_ARQOS");
    sc_trace(mVcdFile, m_axi_kpn_ARREGION, "(port)m_axi_kpn_ARREGION");
    sc_trace(mVcdFile, m_axi_kpn_ARUSER, "(port)m_axi_kpn_ARUSER");
    sc_trace(mVcdFile, m_axi_kpn_RVALID, "(port)m_axi_kpn_RVALID");
    sc_trace(mVcdFile, m_axi_kpn_RREADY, "(port)m_axi_kpn_RREADY");
    sc_trace(mVcdFile, m_axi_kpn_RDATA, "(port)m_axi_kpn_RDATA");
    sc_trace(mVcdFile, m_axi_kpn_RLAST, "(port)m_axi_kpn_RLAST");
    sc_trace(mVcdFile, m_axi_kpn_RID, "(port)m_axi_kpn_RID");
    sc_trace(mVcdFile, m_axi_kpn_RUSER, "(port)m_axi_kpn_RUSER");
    sc_trace(mVcdFile, m_axi_kpn_RRESP, "(port)m_axi_kpn_RRESP");
    sc_trace(mVcdFile, m_axi_kpn_BVALID, "(port)m_axi_kpn_BVALID");
    sc_trace(mVcdFile, m_axi_kpn_BREADY, "(port)m_axi_kpn_BREADY");
    sc_trace(mVcdFile, m_axi_kpn_BRESP, "(port)m_axi_kpn_BRESP");
    sc_trace(mVcdFile, m_axi_kpn_BID, "(port)m_axi_kpn_BID");
    sc_trace(mVcdFile, m_axi_kpn_BUSER, "(port)m_axi_kpn_BUSER");
    sc_trace(mVcdFile, video_in_TDATA, "(port)video_in_TDATA");
    sc_trace(mVcdFile, video_in_TKEEP, "(port)video_in_TKEEP");
    sc_trace(mVcdFile, video_in_TSTRB, "(port)video_in_TSTRB");
    sc_trace(mVcdFile, video_in_TUSER, "(port)video_in_TUSER");
    sc_trace(mVcdFile, video_in_TLAST, "(port)video_in_TLAST");
    sc_trace(mVcdFile, video_in_TID, "(port)video_in_TID");
    sc_trace(mVcdFile, video_in_TDEST, "(port)video_in_TDEST");
    sc_trace(mVcdFile, video_in_TVALID, "(port)video_in_TVALID");
    sc_trace(mVcdFile, video_in_TREADY, "(port)video_in_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, keyPoints_V_AWREADY, "keyPoints_V_AWREADY");
    sc_trace(mVcdFile, keyPoints_V_WREADY, "keyPoints_V_WREADY");
    sc_trace(mVcdFile, keyPoints_V_ARREADY, "keyPoints_V_ARREADY");
    sc_trace(mVcdFile, keyPoints_V_RVALID, "keyPoints_V_RVALID");
    sc_trace(mVcdFile, keyPoints_V_RDATA, "keyPoints_V_RDATA");
    sc_trace(mVcdFile, keyPoints_V_RLAST, "keyPoints_V_RLAST");
    sc_trace(mVcdFile, keyPoints_V_RID, "keyPoints_V_RID");
    sc_trace(mVcdFile, keyPoints_V_RUSER, "keyPoints_V_RUSER");
    sc_trace(mVcdFile, keyPoints_V_RRESP, "keyPoints_V_RRESP");
    sc_trace(mVcdFile, keyPoints_V_BVALID, "keyPoints_V_BVALID");
    sc_trace(mVcdFile, keyPoints_V_BRESP, "keyPoints_V_BRESP");
    sc_trace(mVcdFile, keyPoints_V_BID, "keyPoints_V_BID");
    sc_trace(mVcdFile, keyPoints_V_BUSER, "keyPoints_V_BUSER");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, kpn_AWREADY, "kpn_AWREADY");
    sc_trace(mVcdFile, kpn_WREADY, "kpn_WREADY");
    sc_trace(mVcdFile, kpn_ARREADY, "kpn_ARREADY");
    sc_trace(mVcdFile, kpn_RVALID, "kpn_RVALID");
    sc_trace(mVcdFile, kpn_RDATA, "kpn_RDATA");
    sc_trace(mVcdFile, kpn_RLAST, "kpn_RLAST");
    sc_trace(mVcdFile, kpn_RID, "kpn_RID");
    sc_trace(mVcdFile, kpn_RUSER, "kpn_RUSER");
    sc_trace(mVcdFile, kpn_RRESP, "kpn_RRESP");
    sc_trace(mVcdFile, kpn_BVALID, "kpn_BVALID");
    sc_trace(mVcdFile, kpn_BRESP, "kpn_BRESP");
    sc_trace(mVcdFile, kpn_BID, "kpn_BID");
    sc_trace(mVcdFile, kpn_BUSER, "kpn_BUSER");
    sc_trace(mVcdFile, integralImg_U0_ap_start, "integralImg_U0_ap_start");
    sc_trace(mVcdFile, integralImg_U0_ap_done, "integralImg_U0_ap_done");
    sc_trace(mVcdFile, integralImg_U0_ap_continue, "integralImg_U0_ap_continue");
    sc_trace(mVcdFile, integralImg_U0_ap_idle, "integralImg_U0_ap_idle");
    sc_trace(mVcdFile, integralImg_U0_ap_ready, "integralImg_U0_ap_ready");
    sc_trace(mVcdFile, integralImg_U0_start_out, "integralImg_U0_start_out");
    sc_trace(mVcdFile, integralImg_U0_start_write, "integralImg_U0_start_write");
    sc_trace(mVcdFile, integralImg_U0_video_in_TREADY, "integralImg_U0_video_in_TREADY");
    sc_trace(mVcdFile, integralImg_U0_sum_V_din, "integralImg_U0_sum_V_din");
    sc_trace(mVcdFile, integralImg_U0_sum_V_write, "integralImg_U0_sum_V_write");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWVALID, "HessianDetector_U0_m_axi_keyPoints_V_AWVALID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWADDR, "HessianDetector_U0_m_axi_keyPoints_V_AWADDR");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWID, "HessianDetector_U0_m_axi_keyPoints_V_AWID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWLEN, "HessianDetector_U0_m_axi_keyPoints_V_AWLEN");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWSIZE, "HessianDetector_U0_m_axi_keyPoints_V_AWSIZE");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWBURST, "HessianDetector_U0_m_axi_keyPoints_V_AWBURST");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWLOCK, "HessianDetector_U0_m_axi_keyPoints_V_AWLOCK");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWCACHE, "HessianDetector_U0_m_axi_keyPoints_V_AWCACHE");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWPROT, "HessianDetector_U0_m_axi_keyPoints_V_AWPROT");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWQOS, "HessianDetector_U0_m_axi_keyPoints_V_AWQOS");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWREGION, "HessianDetector_U0_m_axi_keyPoints_V_AWREGION");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_AWUSER, "HessianDetector_U0_m_axi_keyPoints_V_AWUSER");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_WVALID, "HessianDetector_U0_m_axi_keyPoints_V_WVALID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_WDATA, "HessianDetector_U0_m_axi_keyPoints_V_WDATA");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_WSTRB, "HessianDetector_U0_m_axi_keyPoints_V_WSTRB");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_WLAST, "HessianDetector_U0_m_axi_keyPoints_V_WLAST");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_WID, "HessianDetector_U0_m_axi_keyPoints_V_WID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_WUSER, "HessianDetector_U0_m_axi_keyPoints_V_WUSER");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARVALID, "HessianDetector_U0_m_axi_keyPoints_V_ARVALID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARADDR, "HessianDetector_U0_m_axi_keyPoints_V_ARADDR");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARID, "HessianDetector_U0_m_axi_keyPoints_V_ARID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARLEN, "HessianDetector_U0_m_axi_keyPoints_V_ARLEN");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARSIZE, "HessianDetector_U0_m_axi_keyPoints_V_ARSIZE");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARBURST, "HessianDetector_U0_m_axi_keyPoints_V_ARBURST");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARLOCK, "HessianDetector_U0_m_axi_keyPoints_V_ARLOCK");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARCACHE, "HessianDetector_U0_m_axi_keyPoints_V_ARCACHE");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARPROT, "HessianDetector_U0_m_axi_keyPoints_V_ARPROT");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARQOS, "HessianDetector_U0_m_axi_keyPoints_V_ARQOS");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARREGION, "HessianDetector_U0_m_axi_keyPoints_V_ARREGION");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_ARUSER, "HessianDetector_U0_m_axi_keyPoints_V_ARUSER");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_RREADY, "HessianDetector_U0_m_axi_keyPoints_V_RREADY");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_keyPoints_V_BREADY, "HessianDetector_U0_m_axi_keyPoints_V_BREADY");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWVALID, "HessianDetector_U0_m_axi_pointNumber_AWVALID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWADDR, "HessianDetector_U0_m_axi_pointNumber_AWADDR");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWID, "HessianDetector_U0_m_axi_pointNumber_AWID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWLEN, "HessianDetector_U0_m_axi_pointNumber_AWLEN");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWSIZE, "HessianDetector_U0_m_axi_pointNumber_AWSIZE");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWBURST, "HessianDetector_U0_m_axi_pointNumber_AWBURST");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWLOCK, "HessianDetector_U0_m_axi_pointNumber_AWLOCK");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWCACHE, "HessianDetector_U0_m_axi_pointNumber_AWCACHE");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWPROT, "HessianDetector_U0_m_axi_pointNumber_AWPROT");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWQOS, "HessianDetector_U0_m_axi_pointNumber_AWQOS");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWREGION, "HessianDetector_U0_m_axi_pointNumber_AWREGION");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_AWUSER, "HessianDetector_U0_m_axi_pointNumber_AWUSER");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_WVALID, "HessianDetector_U0_m_axi_pointNumber_WVALID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_WDATA, "HessianDetector_U0_m_axi_pointNumber_WDATA");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_WSTRB, "HessianDetector_U0_m_axi_pointNumber_WSTRB");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_WLAST, "HessianDetector_U0_m_axi_pointNumber_WLAST");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_WID, "HessianDetector_U0_m_axi_pointNumber_WID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_WUSER, "HessianDetector_U0_m_axi_pointNumber_WUSER");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARVALID, "HessianDetector_U0_m_axi_pointNumber_ARVALID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARADDR, "HessianDetector_U0_m_axi_pointNumber_ARADDR");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARID, "HessianDetector_U0_m_axi_pointNumber_ARID");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARLEN, "HessianDetector_U0_m_axi_pointNumber_ARLEN");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARSIZE, "HessianDetector_U0_m_axi_pointNumber_ARSIZE");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARBURST, "HessianDetector_U0_m_axi_pointNumber_ARBURST");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARLOCK, "HessianDetector_U0_m_axi_pointNumber_ARLOCK");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARCACHE, "HessianDetector_U0_m_axi_pointNumber_ARCACHE");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARPROT, "HessianDetector_U0_m_axi_pointNumber_ARPROT");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARQOS, "HessianDetector_U0_m_axi_pointNumber_ARQOS");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARREGION, "HessianDetector_U0_m_axi_pointNumber_ARREGION");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_ARUSER, "HessianDetector_U0_m_axi_pointNumber_ARUSER");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_RREADY, "HessianDetector_U0_m_axi_pointNumber_RREADY");
    sc_trace(mVcdFile, HessianDetector_U0_m_axi_pointNumber_BREADY, "HessianDetector_U0_m_axi_pointNumber_BREADY");
    sc_trace(mVcdFile, HessianDetector_U0_sum_V_read, "HessianDetector_U0_sum_V_read");
    sc_trace(mVcdFile, HessianDetector_U0_ap_start, "HessianDetector_U0_ap_start");
    sc_trace(mVcdFile, HessianDetector_U0_ap_done, "HessianDetector_U0_ap_done");
    sc_trace(mVcdFile, HessianDetector_U0_ap_ready, "HessianDetector_U0_ap_ready");
    sc_trace(mVcdFile, HessianDetector_U0_ap_idle, "HessianDetector_U0_ap_idle");
    sc_trace(mVcdFile, HessianDetector_U0_ap_continue, "HessianDetector_U0_ap_continue");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, sum_V_full_n, "sum_V_full_n");
    sc_trace(mVcdFile, sum_V_dout, "sum_V_dout");
    sc_trace(mVcdFile, sum_V_empty_n, "sum_V_empty_n");
    sc_trace(mVcdFile, start_for_HessianDetector_U0_din, "start_for_HessianDetector_U0_din");
    sc_trace(mVcdFile, start_for_HessianDetector_U0_full_n, "start_for_HessianDetector_U0_full_n");
    sc_trace(mVcdFile, start_for_HessianDetector_U0_dout, "start_for_HessianDetector_U0_dout");
    sc_trace(mVcdFile, start_for_HessianDetector_U0_empty_n, "start_for_HessianDetector_U0_empty_n");
    sc_trace(mVcdFile, HessianDetector_U0_start_full_n, "HessianDetector_U0_start_full_n");
    sc_trace(mVcdFile, HessianDetector_U0_start_write, "HessianDetector_U0_start_write");
#endif

    }
    mHdltvinHandle.open("surfDetector.hdltvin.dat");
    mHdltvoutHandle.open("surfDetector.hdltvout.dat");
}

surfDetector::~surfDetector() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete surfDetector_keyPoints_V_m_axi_U;
    delete surfDetector_kpn_m_axi_U;
    delete integralImg_U0;
    delete HessianDetector_U0;
    delete sum_V_U;
    delete start_for_HessianJfO_U;
}

void surfDetector::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void surfDetector::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void surfDetector::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void surfDetector::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void surfDetector::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void surfDetector::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void surfDetector::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void surfDetector::thread_HessianDetector_U0_ap_continue() {
    HessianDetector_U0_ap_continue = ap_const_logic_1;
}

void surfDetector::thread_HessianDetector_U0_ap_start() {
    HessianDetector_U0_ap_start = start_for_HessianDetector_U0_empty_n.read();
}

void surfDetector::thread_HessianDetector_U0_start_full_n() {
    HessianDetector_U0_start_full_n = ap_const_logic_1;
}

void surfDetector::thread_HessianDetector_U0_start_write() {
    HessianDetector_U0_start_write = ap_const_logic_0;
}

void surfDetector::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void surfDetector::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void surfDetector::thread_integralImg_U0_ap_continue() {
    integralImg_U0_ap_continue = ap_const_logic_1;
}

void surfDetector::thread_integralImg_U0_ap_start() {
    integralImg_U0_ap_start = ap_const_logic_1;
}

void surfDetector::thread_start_for_HessianDetector_U0_din() {
    start_for_HessianDetector_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void surfDetector::thread_video_in_TREADY() {
    video_in_TREADY = integralImg_U0_video_in_TREADY.read();
}

void surfDetector::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_keyPoints_V_AWVALID\" :  \"" << m_axi_keyPoints_V_AWVALID.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"m_axi_keyPoints_V_AWREADY\" :  \"" << m_axi_keyPoints_V_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWADDR\" :  \"" << m_axi_keyPoints_V_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWID\" :  \"" << m_axi_keyPoints_V_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWLEN\" :  \"" << m_axi_keyPoints_V_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWSIZE\" :  \"" << m_axi_keyPoints_V_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWBURST\" :  \"" << m_axi_keyPoints_V_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWLOCK\" :  \"" << m_axi_keyPoints_V_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWCACHE\" :  \"" << m_axi_keyPoints_V_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWPROT\" :  \"" << m_axi_keyPoints_V_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWQOS\" :  \"" << m_axi_keyPoints_V_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWREGION\" :  \"" << m_axi_keyPoints_V_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_AWUSER\" :  \"" << m_axi_keyPoints_V_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_WVALID\" :  \"" << m_axi_keyPoints_V_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_WREADY\" :  \"" << m_axi_keyPoints_V_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_WDATA\" :  \"" << m_axi_keyPoints_V_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_WSTRB\" :  \"" << m_axi_keyPoints_V_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_WLAST\" :  \"" << m_axi_keyPoints_V_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_WID\" :  \"" << m_axi_keyPoints_V_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_WUSER\" :  \"" << m_axi_keyPoints_V_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARVALID\" :  \"" << m_axi_keyPoints_V_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_ARREADY\" :  \"" << m_axi_keyPoints_V_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARADDR\" :  \"" << m_axi_keyPoints_V_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARID\" :  \"" << m_axi_keyPoints_V_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARLEN\" :  \"" << m_axi_keyPoints_V_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARSIZE\" :  \"" << m_axi_keyPoints_V_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARBURST\" :  \"" << m_axi_keyPoints_V_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARLOCK\" :  \"" << m_axi_keyPoints_V_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARCACHE\" :  \"" << m_axi_keyPoints_V_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARPROT\" :  \"" << m_axi_keyPoints_V_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARQOS\" :  \"" << m_axi_keyPoints_V_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARREGION\" :  \"" << m_axi_keyPoints_V_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_ARUSER\" :  \"" << m_axi_keyPoints_V_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_RVALID\" :  \"" << m_axi_keyPoints_V_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_RREADY\" :  \"" << m_axi_keyPoints_V_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_RDATA\" :  \"" << m_axi_keyPoints_V_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_RLAST\" :  \"" << m_axi_keyPoints_V_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_RID\" :  \"" << m_axi_keyPoints_V_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_RUSER\" :  \"" << m_axi_keyPoints_V_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_RRESP\" :  \"" << m_axi_keyPoints_V_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_BVALID\" :  \"" << m_axi_keyPoints_V_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_keyPoints_V_BREADY\" :  \"" << m_axi_keyPoints_V_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_BRESP\" :  \"" << m_axi_keyPoints_V_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_BID\" :  \"" << m_axi_keyPoints_V_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_keyPoints_V_BUSER\" :  \"" << m_axi_keyPoints_V_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWVALID\" :  \"" << m_axi_kpn_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_AWREADY\" :  \"" << m_axi_kpn_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWADDR\" :  \"" << m_axi_kpn_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWID\" :  \"" << m_axi_kpn_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWLEN\" :  \"" << m_axi_kpn_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWSIZE\" :  \"" << m_axi_kpn_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWBURST\" :  \"" << m_axi_kpn_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWLOCK\" :  \"" << m_axi_kpn_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWCACHE\" :  \"" << m_axi_kpn_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWPROT\" :  \"" << m_axi_kpn_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWQOS\" :  \"" << m_axi_kpn_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWREGION\" :  \"" << m_axi_kpn_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_AWUSER\" :  \"" << m_axi_kpn_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_WVALID\" :  \"" << m_axi_kpn_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_WREADY\" :  \"" << m_axi_kpn_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_WDATA\" :  \"" << m_axi_kpn_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_WSTRB\" :  \"" << m_axi_kpn_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_WLAST\" :  \"" << m_axi_kpn_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_WID\" :  \"" << m_axi_kpn_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_WUSER\" :  \"" << m_axi_kpn_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARVALID\" :  \"" << m_axi_kpn_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_ARREADY\" :  \"" << m_axi_kpn_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARADDR\" :  \"" << m_axi_kpn_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARID\" :  \"" << m_axi_kpn_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARLEN\" :  \"" << m_axi_kpn_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARSIZE\" :  \"" << m_axi_kpn_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARBURST\" :  \"" << m_axi_kpn_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARLOCK\" :  \"" << m_axi_kpn_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARCACHE\" :  \"" << m_axi_kpn_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARPROT\" :  \"" << m_axi_kpn_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARQOS\" :  \"" << m_axi_kpn_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARREGION\" :  \"" << m_axi_kpn_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_ARUSER\" :  \"" << m_axi_kpn_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_RVALID\" :  \"" << m_axi_kpn_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_RREADY\" :  \"" << m_axi_kpn_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_RDATA\" :  \"" << m_axi_kpn_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_RLAST\" :  \"" << m_axi_kpn_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_RID\" :  \"" << m_axi_kpn_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_RUSER\" :  \"" << m_axi_kpn_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_RRESP\" :  \"" << m_axi_kpn_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_BVALID\" :  \"" << m_axi_kpn_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_kpn_BREADY\" :  \"" << m_axi_kpn_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_BRESP\" :  \"" << m_axi_kpn_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_BID\" :  \"" << m_axi_kpn_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_kpn_BUSER\" :  \"" << m_axi_kpn_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_TDATA\" :  \"" << video_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_TKEEP\" :  \"" << video_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_TSTRB\" :  \"" << video_in_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_TUSER\" :  \"" << video_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_TLAST\" :  \"" << video_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_TID\" :  \"" << video_in_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_TDEST\" :  \"" << video_in_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"video_in_TVALID\" :  \"" << video_in_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"video_in_TREADY\" :  \"" << video_in_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

