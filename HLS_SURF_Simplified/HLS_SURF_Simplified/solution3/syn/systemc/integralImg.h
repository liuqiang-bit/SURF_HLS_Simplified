// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _integralImg_HH_
#define _integralImg_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "integralImg_buf_1.h"

namespace ap_rtl {

struct integralImg : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<24> > video_in_TDATA;
    sc_in< sc_logic > video_in_TVALID;
    sc_out< sc_logic > video_in_TREADY;
    sc_in< sc_lv<3> > video_in_TKEEP;
    sc_in< sc_lv<3> > video_in_TSTRB;
    sc_in< sc_lv<1> > video_in_TUSER;
    sc_in< sc_lv<1> > video_in_TLAST;
    sc_in< sc_lv<1> > video_in_TID;
    sc_in< sc_lv<1> > video_in_TDEST;
    sc_out< sc_lv<32> > sum_V_din;
    sc_in< sc_logic > sum_V_full_n;
    sc_out< sc_logic > sum_V_write;


    // Module declarations
    integralImg(sc_module_name name);
    SC_HAS_PROCESS(integralImg);

    ~integralImg();

    sc_trace_file* mVcdFile;

    integralImg_buf_1* buf_1_U;
    integralImg_buf_1* buf_0_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<24> > video_in_V_data_V_0_data_out;
    sc_signal< sc_logic > video_in_V_data_V_0_vld_in;
    sc_signal< sc_logic > video_in_V_data_V_0_vld_out;
    sc_signal< sc_logic > video_in_V_data_V_0_ack_in;
    sc_signal< sc_logic > video_in_V_data_V_0_ack_out;
    sc_signal< sc_lv<24> > video_in_V_data_V_0_payload_A;
    sc_signal< sc_lv<24> > video_in_V_data_V_0_payload_B;
    sc_signal< sc_logic > video_in_V_data_V_0_sel_rd;
    sc_signal< sc_logic > video_in_V_data_V_0_sel_wr;
    sc_signal< sc_logic > video_in_V_data_V_0_sel;
    sc_signal< sc_logic > video_in_V_data_V_0_load_A;
    sc_signal< sc_logic > video_in_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > video_in_V_data_V_0_state;
    sc_signal< sc_logic > video_in_V_data_V_0_state_cmp_full;
    sc_signal< sc_logic > video_in_V_dest_V_0_vld_in;
    sc_signal< sc_logic > video_in_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > video_in_V_dest_V_0_state;
    sc_signal< sc_lv<10> > buf_1_address0;
    sc_signal< sc_logic > buf_1_ce0;
    sc_signal< sc_logic > buf_1_we0;
    sc_signal< sc_lv<32> > buf_1_q0;
    sc_signal< sc_lv<10> > buf_1_address1;
    sc_signal< sc_logic > buf_1_ce1;
    sc_signal< sc_lv<32> > buf_1_q1;
    sc_signal< sc_lv<10> > buf_0_address0;
    sc_signal< sc_logic > buf_0_ce0;
    sc_signal< sc_logic > buf_0_we0;
    sc_signal< sc_lv<32> > buf_0_q0;
    sc_signal< sc_lv<10> > buf_0_address1;
    sc_signal< sc_logic > buf_0_ce1;
    sc_signal< sc_lv<32> > buf_0_q1;
    sc_signal< sc_logic > video_in_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_4_i_fu_302_p2;
    sc_signal< sc_lv<1> > or_cond_i_fu_320_p2;
    sc_signal< sc_logic > sum_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<10> > r_V_fu_290_p2;
    sc_signal< sc_lv<10> > r_V_reg_488;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_1_i_fu_296_p2;
    sc_signal< sc_lv<1> > tmp_1_i_reg_493;
    sc_signal< sc_lv<1> > tmp_i_fu_284_p2;
    sc_signal< sc_lv<10> > c_V_fu_308_p2;
    sc_signal< sc_lv<10> > c_V_reg_501;
    sc_signal< bool > ap_predicate_op32_read_state3;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<24> > tmp_data_V_reg_509;
    sc_signal< sc_lv<1> > phitmp_i_fu_329_p2;
    sc_signal< sc_lv<1> > phitmp1_i_fu_335_p2;
    sc_signal< sc_lv<2> > i_fu_353_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > tmp_15_i_fu_384_p2;
    sc_signal< sc_lv<1> > exitcond_i_fu_347_p2;
    sc_signal< sc_lv<31> > tmp_reg_537;
    sc_signal< sc_lv<1> > r_V_3_reg_201;
    sc_signal< sc_lv<32> > tmp_11_i_fu_473_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > r_V_4_reg_213;
    sc_signal< sc_lv<10> > t_V_reg_225;
    sc_signal< sc_lv<10> > t_V_1_reg_236;
    sc_signal< sc_lv<32> > pix_val_load_1_reg_248;
    sc_signal< sc_lv<2> > i_i_reg_259;
    sc_signal< sc_lv<32> > tmp_1_reg_270;
    sc_signal< sc_lv<64> > tmp_i_23_fu_410_p1;
    sc_signal< sc_lv<64> > tmp_5_i_fu_422_p1;
    sc_signal< sc_lv<64> > tmp_16_i_fu_479_p1;
    sc_signal< sc_lv<32> > tmp_3_fu_428_p1;
    sc_signal< sc_lv<1> > tmp_6_i_fu_314_p2;
    sc_signal< sc_lv<5> > tmp_12_i_fu_359_p3;
    sc_signal< sc_lv<24> > tmp_12_cast_i_cast_fu_367_p1;
    sc_signal< sc_lv<24> > tmp_13_i_fu_371_p2;
    sc_signal< sc_lv<8> > tmp_2_fu_376_p1;
    sc_signal< sc_lv<32> > tmp_14_cast_i_fu_380_p1;
    sc_signal< sc_lv<32> > mul_fu_394_p0;
    sc_signal< sc_lv<65> > mul_fu_394_p2;
    sc_signal< sc_lv<10> > ret_V_fu_416_p2;
    sc_signal< sc_lv<32> > buf_load_phi_i_fu_437_p3;
    sc_signal< sc_lv<32> > tmp_7_i_fu_461_p2;
    sc_signal< sc_lv<32> > buf_load_1_phi_i_fu_445_p3;
    sc_signal< sc_lv<32> > buf_load_2_phi_i_fu_453_p3;
    sc_signal< sc_lv<32> > tmp_10_i_fu_467_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_lv<65> > mul_fu_394_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_259;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<10> ap_const_lv10_321;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<65> ap_const_lv65_155555556;
    static const sc_lv<32> ap_const_lv32_22;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<10> ap_const_lv10_3FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_state1();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op32_read_state3();
    void thread_ap_ready();
    void thread_buf_0_address0();
    void thread_buf_0_address1();
    void thread_buf_0_ce0();
    void thread_buf_0_ce1();
    void thread_buf_0_we0();
    void thread_buf_1_address0();
    void thread_buf_1_address1();
    void thread_buf_1_ce0();
    void thread_buf_1_ce1();
    void thread_buf_1_we0();
    void thread_buf_load_1_phi_i_fu_445_p3();
    void thread_buf_load_2_phi_i_fu_453_p3();
    void thread_buf_load_phi_i_fu_437_p3();
    void thread_c_V_fu_308_p2();
    void thread_exitcond_i_fu_347_p2();
    void thread_i_fu_353_p2();
    void thread_internal_ap_ready();
    void thread_mul_fu_394_p0();
    void thread_mul_fu_394_p00();
    void thread_mul_fu_394_p2();
    void thread_or_cond_i_fu_320_p2();
    void thread_phitmp1_i_fu_335_p2();
    void thread_phitmp_i_fu_329_p2();
    void thread_r_V_fu_290_p2();
    void thread_real_start();
    void thread_ret_V_fu_416_p2();
    void thread_start_out();
    void thread_start_write();
    void thread_sum_V_blk_n();
    void thread_sum_V_din();
    void thread_sum_V_write();
    void thread_tmp_10_i_fu_467_p2();
    void thread_tmp_11_i_fu_473_p2();
    void thread_tmp_12_cast_i_cast_fu_367_p1();
    void thread_tmp_12_i_fu_359_p3();
    void thread_tmp_13_i_fu_371_p2();
    void thread_tmp_14_cast_i_fu_380_p1();
    void thread_tmp_15_i_fu_384_p2();
    void thread_tmp_16_i_fu_479_p1();
    void thread_tmp_1_i_fu_296_p2();
    void thread_tmp_2_fu_376_p1();
    void thread_tmp_3_fu_428_p1();
    void thread_tmp_4_i_fu_302_p2();
    void thread_tmp_5_i_fu_422_p1();
    void thread_tmp_6_i_fu_314_p2();
    void thread_tmp_7_i_fu_461_p2();
    void thread_tmp_i_23_fu_410_p1();
    void thread_tmp_i_fu_284_p2();
    void thread_video_in_TDATA_blk_n();
    void thread_video_in_TREADY();
    void thread_video_in_V_data_V_0_ack_in();
    void thread_video_in_V_data_V_0_ack_out();
    void thread_video_in_V_data_V_0_data_out();
    void thread_video_in_V_data_V_0_load_A();
    void thread_video_in_V_data_V_0_load_B();
    void thread_video_in_V_data_V_0_sel();
    void thread_video_in_V_data_V_0_state_cmp_full();
    void thread_video_in_V_data_V_0_vld_in();
    void thread_video_in_V_data_V_0_vld_out();
    void thread_video_in_V_dest_V_0_ack_out();
    void thread_video_in_V_dest_V_0_vld_in();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
