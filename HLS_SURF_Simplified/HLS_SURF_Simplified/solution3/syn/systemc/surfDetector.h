// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _surfDetector_HH_
#define _surfDetector_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "integralImg.h"
#include "HessianDetector.h"
#include "fifo_w32_d2_A_x.h"
#include "start_for_HessianJfO.h"
#include "surfDetector_keyPoints_V_m_axi.h"
#include "surfDetector_kpn_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_KEYPOINTS_V_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_KEYPOINTS_V_ID_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_V_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_V_DATA_WIDTH = 32,
         unsigned int C_M_AXI_KEYPOINTS_V_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_V_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_V_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_V_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_KPN_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_KPN_ID_WIDTH = 1,
         unsigned int C_M_AXI_KPN_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_KPN_DATA_WIDTH = 32,
         unsigned int C_M_AXI_KPN_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_KPN_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_KPN_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_KPN_BUSER_WIDTH = 1>
struct surfDetector : public sc_module {
    // Port declarations 101
    sc_out< sc_logic > m_axi_keyPoints_V_AWVALID;
    sc_in< sc_logic > m_axi_keyPoints_V_AWREADY;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_ADDR_WIDTH> > m_axi_keyPoints_V_AWADDR;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_ID_WIDTH> > m_axi_keyPoints_V_AWID;
    sc_out< sc_lv<8> > m_axi_keyPoints_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_keyPoints_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_keyPoints_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_keyPoints_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_keyPoints_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_keyPoints_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_keyPoints_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_keyPoints_V_AWREGION;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_AWUSER_WIDTH> > m_axi_keyPoints_V_AWUSER;
    sc_out< sc_logic > m_axi_keyPoints_V_WVALID;
    sc_in< sc_logic > m_axi_keyPoints_V_WREADY;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_DATA_WIDTH> > m_axi_keyPoints_V_WDATA;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_DATA_WIDTH/8> > m_axi_keyPoints_V_WSTRB;
    sc_out< sc_logic > m_axi_keyPoints_V_WLAST;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_ID_WIDTH> > m_axi_keyPoints_V_WID;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_WUSER_WIDTH> > m_axi_keyPoints_V_WUSER;
    sc_out< sc_logic > m_axi_keyPoints_V_ARVALID;
    sc_in< sc_logic > m_axi_keyPoints_V_ARREADY;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_ADDR_WIDTH> > m_axi_keyPoints_V_ARADDR;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_ID_WIDTH> > m_axi_keyPoints_V_ARID;
    sc_out< sc_lv<8> > m_axi_keyPoints_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_keyPoints_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_keyPoints_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_keyPoints_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_keyPoints_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_keyPoints_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_keyPoints_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_keyPoints_V_ARREGION;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_V_ARUSER_WIDTH> > m_axi_keyPoints_V_ARUSER;
    sc_in< sc_logic > m_axi_keyPoints_V_RVALID;
    sc_out< sc_logic > m_axi_keyPoints_V_RREADY;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_V_DATA_WIDTH> > m_axi_keyPoints_V_RDATA;
    sc_in< sc_logic > m_axi_keyPoints_V_RLAST;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_V_ID_WIDTH> > m_axi_keyPoints_V_RID;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_V_RUSER_WIDTH> > m_axi_keyPoints_V_RUSER;
    sc_in< sc_lv<2> > m_axi_keyPoints_V_RRESP;
    sc_in< sc_logic > m_axi_keyPoints_V_BVALID;
    sc_out< sc_logic > m_axi_keyPoints_V_BREADY;
    sc_in< sc_lv<2> > m_axi_keyPoints_V_BRESP;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_V_ID_WIDTH> > m_axi_keyPoints_V_BID;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_V_BUSER_WIDTH> > m_axi_keyPoints_V_BUSER;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > m_axi_kpn_AWVALID;
    sc_in< sc_logic > m_axi_kpn_AWREADY;
    sc_out< sc_uint<C_M_AXI_KPN_ADDR_WIDTH> > m_axi_kpn_AWADDR;
    sc_out< sc_uint<C_M_AXI_KPN_ID_WIDTH> > m_axi_kpn_AWID;
    sc_out< sc_lv<8> > m_axi_kpn_AWLEN;
    sc_out< sc_lv<3> > m_axi_kpn_AWSIZE;
    sc_out< sc_lv<2> > m_axi_kpn_AWBURST;
    sc_out< sc_lv<2> > m_axi_kpn_AWLOCK;
    sc_out< sc_lv<4> > m_axi_kpn_AWCACHE;
    sc_out< sc_lv<3> > m_axi_kpn_AWPROT;
    sc_out< sc_lv<4> > m_axi_kpn_AWQOS;
    sc_out< sc_lv<4> > m_axi_kpn_AWREGION;
    sc_out< sc_uint<C_M_AXI_KPN_AWUSER_WIDTH> > m_axi_kpn_AWUSER;
    sc_out< sc_logic > m_axi_kpn_WVALID;
    sc_in< sc_logic > m_axi_kpn_WREADY;
    sc_out< sc_uint<C_M_AXI_KPN_DATA_WIDTH> > m_axi_kpn_WDATA;
    sc_out< sc_uint<C_M_AXI_KPN_DATA_WIDTH/8> > m_axi_kpn_WSTRB;
    sc_out< sc_logic > m_axi_kpn_WLAST;
    sc_out< sc_uint<C_M_AXI_KPN_ID_WIDTH> > m_axi_kpn_WID;
    sc_out< sc_uint<C_M_AXI_KPN_WUSER_WIDTH> > m_axi_kpn_WUSER;
    sc_out< sc_logic > m_axi_kpn_ARVALID;
    sc_in< sc_logic > m_axi_kpn_ARREADY;
    sc_out< sc_uint<C_M_AXI_KPN_ADDR_WIDTH> > m_axi_kpn_ARADDR;
    sc_out< sc_uint<C_M_AXI_KPN_ID_WIDTH> > m_axi_kpn_ARID;
    sc_out< sc_lv<8> > m_axi_kpn_ARLEN;
    sc_out< sc_lv<3> > m_axi_kpn_ARSIZE;
    sc_out< sc_lv<2> > m_axi_kpn_ARBURST;
    sc_out< sc_lv<2> > m_axi_kpn_ARLOCK;
    sc_out< sc_lv<4> > m_axi_kpn_ARCACHE;
    sc_out< sc_lv<3> > m_axi_kpn_ARPROT;
    sc_out< sc_lv<4> > m_axi_kpn_ARQOS;
    sc_out< sc_lv<4> > m_axi_kpn_ARREGION;
    sc_out< sc_uint<C_M_AXI_KPN_ARUSER_WIDTH> > m_axi_kpn_ARUSER;
    sc_in< sc_logic > m_axi_kpn_RVALID;
    sc_out< sc_logic > m_axi_kpn_RREADY;
    sc_in< sc_uint<C_M_AXI_KPN_DATA_WIDTH> > m_axi_kpn_RDATA;
    sc_in< sc_logic > m_axi_kpn_RLAST;
    sc_in< sc_uint<C_M_AXI_KPN_ID_WIDTH> > m_axi_kpn_RID;
    sc_in< sc_uint<C_M_AXI_KPN_RUSER_WIDTH> > m_axi_kpn_RUSER;
    sc_in< sc_lv<2> > m_axi_kpn_RRESP;
    sc_in< sc_logic > m_axi_kpn_BVALID;
    sc_out< sc_logic > m_axi_kpn_BREADY;
    sc_in< sc_lv<2> > m_axi_kpn_BRESP;
    sc_in< sc_uint<C_M_AXI_KPN_ID_WIDTH> > m_axi_kpn_BID;
    sc_in< sc_uint<C_M_AXI_KPN_BUSER_WIDTH> > m_axi_kpn_BUSER;
    sc_in< sc_lv<24> > video_in_TDATA;
    sc_in< sc_lv<3> > video_in_TKEEP;
    sc_in< sc_lv<3> > video_in_TSTRB;
    sc_in< sc_lv<1> > video_in_TUSER;
    sc_in< sc_lv<1> > video_in_TLAST;
    sc_in< sc_lv<1> > video_in_TID;
    sc_in< sc_lv<1> > video_in_TDEST;
    sc_in< sc_logic > video_in_TVALID;
    sc_out< sc_logic > video_in_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const6;


    // Module declarations
    surfDetector(sc_module_name name);
    SC_HAS_PROCESS(surfDetector);

    ~surfDetector();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    surfDetector_keyPoints_V_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_KEYPOINTS_V_ID_WIDTH,C_M_AXI_KEYPOINTS_V_ADDR_WIDTH,C_M_AXI_KEYPOINTS_V_DATA_WIDTH,C_M_AXI_KEYPOINTS_V_AWUSER_WIDTH,C_M_AXI_KEYPOINTS_V_ARUSER_WIDTH,C_M_AXI_KEYPOINTS_V_WUSER_WIDTH,C_M_AXI_KEYPOINTS_V_RUSER_WIDTH,C_M_AXI_KEYPOINTS_V_BUSER_WIDTH,C_M_AXI_KEYPOINTS_V_TARGET_ADDR,C_M_AXI_KEYPOINTS_V_USER_VALUE,C_M_AXI_KEYPOINTS_V_PROT_VALUE,C_M_AXI_KEYPOINTS_V_CACHE_VALUE>* surfDetector_keyPoints_V_m_axi_U;
    surfDetector_kpn_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_KPN_ID_WIDTH,C_M_AXI_KPN_ADDR_WIDTH,C_M_AXI_KPN_DATA_WIDTH,C_M_AXI_KPN_AWUSER_WIDTH,C_M_AXI_KPN_ARUSER_WIDTH,C_M_AXI_KPN_WUSER_WIDTH,C_M_AXI_KPN_RUSER_WIDTH,C_M_AXI_KPN_BUSER_WIDTH,C_M_AXI_KPN_TARGET_ADDR,C_M_AXI_KPN_USER_VALUE,C_M_AXI_KPN_PROT_VALUE,C_M_AXI_KPN_CACHE_VALUE>* surfDetector_kpn_m_axi_U;
    integralImg* integralImg_U0;
    HessianDetector* HessianDetector_U0;
    fifo_w32_d2_A_x* sum_V_U;
    start_for_HessianJfO* start_for_HessianJfO_U;
    sc_signal< sc_logic > keyPoints_V_AWREADY;
    sc_signal< sc_logic > keyPoints_V_WREADY;
    sc_signal< sc_logic > keyPoints_V_ARREADY;
    sc_signal< sc_logic > keyPoints_V_RVALID;
    sc_signal< sc_lv<32> > keyPoints_V_RDATA;
    sc_signal< sc_logic > keyPoints_V_RLAST;
    sc_signal< sc_lv<1> > keyPoints_V_RID;
    sc_signal< sc_lv<1> > keyPoints_V_RUSER;
    sc_signal< sc_lv<2> > keyPoints_V_RRESP;
    sc_signal< sc_logic > keyPoints_V_BVALID;
    sc_signal< sc_lv<2> > keyPoints_V_BRESP;
    sc_signal< sc_lv<1> > keyPoints_V_BID;
    sc_signal< sc_lv<1> > keyPoints_V_BUSER;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > kpn_AWREADY;
    sc_signal< sc_logic > kpn_WREADY;
    sc_signal< sc_logic > kpn_ARREADY;
    sc_signal< sc_logic > kpn_RVALID;
    sc_signal< sc_lv<32> > kpn_RDATA;
    sc_signal< sc_logic > kpn_RLAST;
    sc_signal< sc_lv<1> > kpn_RID;
    sc_signal< sc_lv<1> > kpn_RUSER;
    sc_signal< sc_lv<2> > kpn_RRESP;
    sc_signal< sc_logic > kpn_BVALID;
    sc_signal< sc_lv<2> > kpn_BRESP;
    sc_signal< sc_lv<1> > kpn_BID;
    sc_signal< sc_lv<1> > kpn_BUSER;
    sc_signal< sc_logic > integralImg_U0_ap_start;
    sc_signal< sc_logic > integralImg_U0_ap_done;
    sc_signal< sc_logic > integralImg_U0_ap_continue;
    sc_signal< sc_logic > integralImg_U0_ap_idle;
    sc_signal< sc_logic > integralImg_U0_ap_ready;
    sc_signal< sc_logic > integralImg_U0_start_out;
    sc_signal< sc_logic > integralImg_U0_start_write;
    sc_signal< sc_logic > integralImg_U0_video_in_TREADY;
    sc_signal< sc_lv<32> > integralImg_U0_sum_V_din;
    sc_signal< sc_logic > integralImg_U0_sum_V_write;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_AWVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_AWADDR;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_AWID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_AWLEN;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_keyPoints_V_AWSIZE;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_keyPoints_V_AWBURST;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_keyPoints_V_AWLOCK;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_AWCACHE;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_keyPoints_V_AWPROT;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_AWQOS;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_AWREGION;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_AWUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_WVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_WDATA;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_WSTRB;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_WLAST;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_WID;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_WUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_ARVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_ARADDR;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_ARID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_ARLEN;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_keyPoints_V_ARSIZE;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_keyPoints_V_ARBURST;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_keyPoints_V_ARLOCK;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_ARCACHE;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_keyPoints_V_ARPROT;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_ARQOS;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_ARREGION;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_ARUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_RREADY;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_BREADY;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_AWVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_AWADDR;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_AWID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_AWLEN;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_pointNumber_AWSIZE;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_pointNumber_AWBURST;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_pointNumber_AWLOCK;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_AWCACHE;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_pointNumber_AWPROT;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_AWQOS;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_AWREGION;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_AWUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_WVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_WDATA;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_WSTRB;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_WLAST;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_WID;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_WUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_ARVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_ARADDR;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_ARID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_ARLEN;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_pointNumber_ARSIZE;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_pointNumber_ARBURST;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_pointNumber_ARLOCK;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_ARCACHE;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_pointNumber_ARPROT;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_ARQOS;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_ARREGION;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_ARUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_RREADY;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_BREADY;
    sc_signal< sc_logic > HessianDetector_U0_sum_V_read;
    sc_signal< sc_logic > HessianDetector_U0_ap_start;
    sc_signal< sc_logic > HessianDetector_U0_ap_done;
    sc_signal< sc_logic > HessianDetector_U0_ap_ready;
    sc_signal< sc_logic > HessianDetector_U0_ap_idle;
    sc_signal< sc_logic > HessianDetector_U0_ap_continue;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > sum_V_full_n;
    sc_signal< sc_lv<32> > sum_V_dout;
    sc_signal< sc_logic > sum_V_empty_n;
    sc_signal< sc_lv<1> > start_for_HessianDetector_U0_din;
    sc_signal< sc_logic > start_for_HessianDetector_U0_full_n;
    sc_signal< sc_lv<1> > start_for_HessianDetector_U0_dout;
    sc_signal< sc_logic > start_for_HessianDetector_U0_empty_n;
    sc_signal< sc_logic > HessianDetector_U0_start_full_n;
    sc_signal< sc_logic > HessianDetector_U0_start_write;
    static const int C_M_AXI_KEYPOINTS_V_TARGET_ADDR;
    static const int C_M_AXI_KEYPOINTS_V_USER_VALUE;
    static const int C_M_AXI_KEYPOINTS_V_PROT_VALUE;
    static const int C_M_AXI_KEYPOINTS_V_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_KPN_TARGET_ADDR;
    static const int C_M_AXI_KPN_USER_VALUE;
    static const int C_M_AXI_KPN_PROT_VALUE;
    static const int C_M_AXI_KPN_CACHE_VALUE;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_HessianDetector_U0_ap_continue();
    void thread_HessianDetector_U0_ap_start();
    void thread_HessianDetector_U0_start_full_n();
    void thread_HessianDetector_U0_start_write();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_integralImg_U0_ap_continue();
    void thread_integralImg_U0_ap_start();
    void thread_start_for_HessianDetector_U0_din();
    void thread_video_in_TREADY();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
