// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module integralImg (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        video_in_TDATA,
        video_in_TVALID,
        video_in_TREADY,
        video_in_TKEEP,
        video_in_TSTRB,
        video_in_TUSER,
        video_in_TLAST,
        video_in_TID,
        video_in_TDEST,
        sum_V_din,
        sum_V_full_n,
        sum_V_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] video_in_TDATA;
input   video_in_TVALID;
output   video_in_TREADY;
input  [2:0] video_in_TKEEP;
input  [2:0] video_in_TSTRB;
input  [0:0] video_in_TUSER;
input  [0:0] video_in_TLAST;
input  [0:0] video_in_TID;
input  [0:0] video_in_TDEST;
output  [31:0] sum_V_din;
input   sum_V_full_n;
output   sum_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg sum_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [23:0] video_in_V_data_V_0_data_out;
wire    video_in_V_data_V_0_vld_in;
wire    video_in_V_data_V_0_vld_out;
wire    video_in_V_data_V_0_ack_in;
reg    video_in_V_data_V_0_ack_out;
reg   [23:0] video_in_V_data_V_0_payload_A;
reg   [23:0] video_in_V_data_V_0_payload_B;
reg    video_in_V_data_V_0_sel_rd;
reg    video_in_V_data_V_0_sel_wr;
wire    video_in_V_data_V_0_sel;
wire    video_in_V_data_V_0_load_A;
wire    video_in_V_data_V_0_load_B;
reg   [1:0] video_in_V_data_V_0_state;
wire    video_in_V_data_V_0_state_cmp_full;
wire    video_in_V_dest_V_0_vld_in;
reg    video_in_V_dest_V_0_ack_out;
reg   [1:0] video_in_V_dest_V_0_state;
reg   [9:0] buf_1_address0;
reg    buf_1_ce0;
reg    buf_1_we0;
wire   [31:0] buf_1_q0;
wire   [9:0] buf_1_address1;
reg    buf_1_ce1;
wire   [31:0] buf_1_q1;
reg   [9:0] buf_0_address0;
reg    buf_0_ce0;
reg    buf_0_we0;
wire   [31:0] buf_0_q0;
wire   [9:0] buf_0_address1;
reg    buf_0_ce1;
wire   [31:0] buf_0_q1;
reg    video_in_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_4_i_fu_302_p2;
wire   [0:0] or_cond_i_fu_320_p2;
reg    sum_V_blk_n;
wire    ap_CS_fsm_state6;
wire   [9:0] r_V_fu_290_p2;
reg   [9:0] r_V_reg_488;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_i_fu_296_p2;
reg   [0:0] tmp_1_i_reg_493;
wire   [0:0] tmp_i_fu_284_p2;
wire   [9:0] c_V_fu_308_p2;
reg   [9:0] c_V_reg_501;
reg    ap_predicate_op32_read_state3;
reg    ap_block_state3;
reg   [23:0] tmp_data_V_reg_509;
wire   [0:0] phitmp_i_fu_329_p2;
wire   [0:0] phitmp1_i_fu_335_p2;
wire   [1:0] i_fu_353_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_15_i_fu_384_p2;
wire   [0:0] exitcond_i_fu_347_p2;
reg   [30:0] tmp_reg_537;
reg   [0:0] r_V_3_reg_201;
wire   [31:0] tmp_11_i_fu_473_p2;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
reg   [0:0] r_V_4_reg_213;
reg   [9:0] t_V_reg_225;
reg   [9:0] t_V_1_reg_236;
reg   [31:0] pix_val_load_1_reg_248;
reg   [1:0] i_i_reg_259;
reg   [31:0] tmp_1_reg_270;
wire   [63:0] tmp_i_23_fu_410_p1;
wire   [63:0] tmp_5_i_fu_422_p1;
wire   [63:0] tmp_16_i_fu_479_p1;
wire  signed [31:0] tmp_3_fu_428_p1;
wire   [0:0] tmp_6_i_fu_314_p2;
wire   [4:0] tmp_12_i_fu_359_p3;
wire   [23:0] tmp_12_cast_i_cast_fu_367_p1;
wire   [23:0] tmp_13_i_fu_371_p2;
wire   [7:0] tmp_2_fu_376_p1;
wire   [31:0] tmp_14_cast_i_fu_380_p1;
wire   [31:0] mul_fu_394_p0;
wire   [64:0] mul_fu_394_p2;
wire   [9:0] ret_V_fu_416_p2;
wire   [31:0] buf_load_phi_i_fu_437_p3;
wire   [31:0] tmp_7_i_fu_461_p2;
wire   [31:0] buf_load_1_phi_i_fu_445_p3;
wire   [31:0] buf_load_2_phi_i_fu_453_p3;
wire   [31:0] tmp_10_i_fu_467_p2;
reg   [5:0] ap_NS_fsm;
wire   [64:0] mul_fu_394_p00;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 video_in_V_data_V_0_sel_rd = 1'b0;
#0 video_in_V_data_V_0_sel_wr = 1'b0;
#0 video_in_V_data_V_0_state = 2'd0;
#0 video_in_V_dest_V_0_state = 2'd0;
end

integralImg_buf_1 #(
    .DataWidth( 32 ),
    .AddressRange( 800 ),
    .AddressWidth( 10 ))
buf_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_1_address0),
    .ce0(buf_1_ce0),
    .we0(buf_1_we0),
    .d0(tmp_1_reg_270),
    .q0(buf_1_q0),
    .address1(buf_1_address1),
    .ce1(buf_1_ce1),
    .q1(buf_1_q1)
);

integralImg_buf_1 #(
    .DataWidth( 32 ),
    .AddressRange( 800 ),
    .AddressWidth( 10 ))
buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_0_address0),
    .ce0(buf_0_ce0),
    .we0(buf_0_we0),
    .d0(tmp_1_reg_270),
    .q0(buf_0_q0),
    .address1(buf_0_address1),
    .ce1(buf_0_ce1),
    .q1(buf_0_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_i_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((video_in_V_data_V_0_ack_out == 1'b1) & (video_in_V_data_V_0_vld_out == 1'b1))) begin
            video_in_V_data_V_0_sel_rd <= ~video_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((video_in_V_data_V_0_ack_in == 1'b1) & (video_in_V_data_V_0_vld_in == 1'b1))) begin
            video_in_V_data_V_0_sel_wr <= ~video_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((video_in_V_data_V_0_state == 2'd2) & (video_in_V_data_V_0_vld_in == 1'b0)) | ((video_in_V_data_V_0_state == 2'd3) & (video_in_V_data_V_0_vld_in == 1'b0) & (video_in_V_data_V_0_ack_out == 1'b1)))) begin
            video_in_V_data_V_0_state <= 2'd2;
        end else if ((((video_in_V_data_V_0_state == 2'd1) & (video_in_V_data_V_0_ack_out == 1'b0)) | ((video_in_V_data_V_0_state == 2'd3) & (video_in_V_data_V_0_ack_out == 1'b0) & (video_in_V_data_V_0_vld_in == 1'b1)))) begin
            video_in_V_data_V_0_state <= 2'd1;
        end else if (((~((video_in_V_data_V_0_vld_in == 1'b0) & (video_in_V_data_V_0_ack_out == 1'b1)) & ~((video_in_V_data_V_0_ack_out == 1'b0) & (video_in_V_data_V_0_vld_in == 1'b1)) & (video_in_V_data_V_0_state == 2'd3)) | ((video_in_V_data_V_0_state == 2'd1) & (video_in_V_data_V_0_ack_out == 1'b1)) | ((video_in_V_data_V_0_state == 2'd2) & (video_in_V_data_V_0_vld_in == 1'b1)))) begin
            video_in_V_data_V_0_state <= 2'd3;
        end else begin
            video_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        video_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((video_in_V_dest_V_0_state == 2'd2) & (video_in_V_dest_V_0_vld_in == 1'b0)) | ((video_in_V_dest_V_0_state == 2'd3) & (video_in_V_dest_V_0_vld_in == 1'b0) & (video_in_V_dest_V_0_ack_out == 1'b1)))) begin
            video_in_V_dest_V_0_state <= 2'd2;
        end else if ((((video_in_V_dest_V_0_state == 2'd1) & (video_in_V_dest_V_0_ack_out == 1'b0)) | ((video_in_V_dest_V_0_state == 2'd3) & (video_in_V_dest_V_0_ack_out == 1'b0) & (video_in_V_dest_V_0_vld_in == 1'b1)))) begin
            video_in_V_dest_V_0_state <= 2'd1;
        end else if (((~((video_in_V_dest_V_0_vld_in == 1'b0) & (video_in_V_dest_V_0_ack_out == 1'b1)) & ~((video_in_V_dest_V_0_ack_out == 1'b0) & (video_in_V_dest_V_0_vld_in == 1'b1)) & (video_in_V_dest_V_0_state == 2'd3)) | ((video_in_V_dest_V_0_state == 2'd1) & (video_in_V_dest_V_0_ack_out == 1'b1)) | ((video_in_V_dest_V_0_state == 2'd2) & (video_in_V_dest_V_0_vld_in == 1'b1)))) begin
            video_in_V_dest_V_0_state <= 2'd3;
        end else begin
            video_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_i_reg_259 <= i_fu_353_p2;
    end else if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (or_cond_i_fu_320_p2 == 1'd0) & (tmp_4_i_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_i_reg_259 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        pix_val_load_1_reg_248 <= tmp_15_i_fu_384_p2;
    end else if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (or_cond_i_fu_320_p2 == 1'd0) & (tmp_4_i_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        pix_val_load_1_reg_248 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (tmp_4_i_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_V_3_reg_201 <= phitmp_i_fu_329_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_3_reg_201 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (tmp_4_i_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_V_4_reg_213 <= phitmp1_i_fu_335_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_4_reg_213 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((sum_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        t_V_1_reg_236 <= c_V_reg_501;
    end else if (((tmp_i_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_236 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (tmp_4_i_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_reg_225 <= r_V_reg_488;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_225 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (or_cond_i_fu_320_p2 == 1'd1) & (tmp_4_i_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_1_reg_270 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_1_reg_270 <= tmp_11_i_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3))) begin
        c_V_reg_501 <= c_V_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_V_reg_488 <= r_V_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_i_reg_493 <= tmp_1_i_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (or_cond_i_fu_320_p2 == 1'd0) & (tmp_4_i_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_reg_509 <= video_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_347_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_reg_537 <= {{mul_fu_394_p2[64:34]}};
    end
end

always @ (posedge ap_clk) begin
    if ((video_in_V_data_V_0_load_A == 1'b1)) begin
        video_in_V_data_V_0_payload_A <= video_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((video_in_V_data_V_0_load_B == 1'b1)) begin
        video_in_V_data_V_0_payload_B <= video_in_TDATA;
    end
end

always @ (*) begin
    if (((tmp_i_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_0_address0 = tmp_16_i_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_0_address0 = tmp_i_23_fu_410_p1;
    end else begin
        buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((sum_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        buf_0_ce0 = 1'b1;
    end else begin
        buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_0_ce1 = 1'b1;
    end else begin
        buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((r_V_4_reg_213 == 1'd0) & (sum_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        buf_0_we0 = 1'b1;
    end else begin
        buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_1_address0 = tmp_16_i_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_1_address0 = tmp_i_23_fu_410_p1;
    end else begin
        buf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((sum_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        buf_1_ce0 = 1'b1;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_1_ce1 = 1'b1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((r_V_4_reg_213 == 1'd1) & (sum_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        buf_1_we0 = 1'b1;
    end else begin
        buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_V_blk_n = sum_V_full_n;
    end else begin
        sum_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((sum_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        sum_V_write = 1'b1;
    end else begin
        sum_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_fu_320_p2 == 1'd0) & (tmp_4_i_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        video_in_TDATA_blk_n = video_in_V_data_V_0_state[1'd0];
    end else begin
        video_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (ap_predicate_op32_read_state3 == 1'b1))) begin
        video_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((video_in_V_data_V_0_sel == 1'b1)) begin
        video_in_V_data_V_0_data_out = video_in_V_data_V_0_payload_B;
    end else begin
        video_in_V_data_V_0_data_out = video_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (1'b1 == ap_CS_fsm_state3) & (ap_predicate_op32_read_state3 == 1'b1))) begin
        video_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (tmp_4_i_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (or_cond_i_fu_320_p2 == 1'd0) & (tmp_4_i_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1)) & (or_cond_i_fu_320_p2 == 1'd1) & (tmp_4_i_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_i_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((sum_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((video_in_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op32_read_state3 == 1'b1));
end

always @ (*) begin
    ap_predicate_op32_read_state3 = ((or_cond_i_fu_320_p2 == 1'd0) & (tmp_4_i_fu_302_p2 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign buf_0_address1 = tmp_5_i_fu_422_p1;

assign buf_1_address1 = tmp_5_i_fu_422_p1;

assign buf_load_1_phi_i_fu_445_p3 = ((r_V_3_reg_201[0:0] === 1'b1) ? buf_1_q1 : buf_0_q1);

assign buf_load_2_phi_i_fu_453_p3 = ((r_V_4_reg_213[0:0] === 1'b1) ? buf_1_q1 : buf_0_q1);

assign buf_load_phi_i_fu_437_p3 = ((r_V_3_reg_201[0:0] === 1'b1) ? buf_1_q0 : buf_0_q0);

assign c_V_fu_308_p2 = (t_V_1_reg_236 + 10'd1);

assign exitcond_i_fu_347_p2 = ((i_i_reg_259 == 2'd3) ? 1'b1 : 1'b0);

assign i_fu_353_p2 = (i_i_reg_259 + 2'd1);

assign mul_fu_394_p0 = mul_fu_394_p00;

assign mul_fu_394_p00 = pix_val_load_1_reg_248;

assign mul_fu_394_p2 = (mul_fu_394_p0 * $signed(65'h155555556));

assign or_cond_i_fu_320_p2 = (tmp_6_i_fu_314_p2 | tmp_1_i_reg_493);

assign phitmp1_i_fu_335_p2 = (r_V_4_reg_213 ^ 1'd1);

assign phitmp_i_fu_329_p2 = (r_V_3_reg_201 ^ 1'd1);

assign r_V_fu_290_p2 = (t_V_reg_225 + 10'd1);

assign ret_V_fu_416_p2 = ($signed(t_V_1_reg_236) + $signed(10'd1023));

assign start_out = real_start;

assign sum_V_din = tmp_1_reg_270;

assign tmp_10_i_fu_467_p2 = (tmp_7_i_fu_461_p2 - buf_load_1_phi_i_fu_445_p3);

assign tmp_11_i_fu_473_p2 = (buf_load_2_phi_i_fu_453_p3 + tmp_10_i_fu_467_p2);

assign tmp_12_cast_i_cast_fu_367_p1 = tmp_12_i_fu_359_p3;

assign tmp_12_i_fu_359_p3 = {{i_i_reg_259}, {3'd0}};

assign tmp_13_i_fu_371_p2 = tmp_data_V_reg_509 >> tmp_12_cast_i_cast_fu_367_p1;

assign tmp_14_cast_i_fu_380_p1 = tmp_2_fu_376_p1;

assign tmp_15_i_fu_384_p2 = (pix_val_load_1_reg_248 + tmp_14_cast_i_fu_380_p1);

assign tmp_16_i_fu_479_p1 = t_V_1_reg_236;

assign tmp_1_i_fu_296_p2 = ((t_V_reg_225 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_2_fu_376_p1 = tmp_13_i_fu_371_p2[7:0];

assign tmp_3_fu_428_p1 = $signed(tmp_reg_537);

assign tmp_4_i_fu_302_p2 = ((t_V_1_reg_236 == 10'd801) ? 1'b1 : 1'b0);

assign tmp_5_i_fu_422_p1 = ret_V_fu_416_p2;

assign tmp_6_i_fu_314_p2 = ((t_V_1_reg_236 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_7_i_fu_461_p2 = ($signed(tmp_3_fu_428_p1) + $signed(buf_load_phi_i_fu_437_p3));

assign tmp_i_23_fu_410_p1 = t_V_1_reg_236;

assign tmp_i_fu_284_p2 = ((t_V_reg_225 == 10'd601) ? 1'b1 : 1'b0);

assign video_in_TREADY = video_in_V_dest_V_0_state[1'd1];

assign video_in_V_data_V_0_ack_in = video_in_V_data_V_0_state[1'd1];

assign video_in_V_data_V_0_load_A = (video_in_V_data_V_0_state_cmp_full & ~video_in_V_data_V_0_sel_wr);

assign video_in_V_data_V_0_load_B = (video_in_V_data_V_0_state_cmp_full & video_in_V_data_V_0_sel_wr);

assign video_in_V_data_V_0_sel = video_in_V_data_V_0_sel_rd;

assign video_in_V_data_V_0_state_cmp_full = ((video_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_data_V_0_vld_in = video_in_TVALID;

assign video_in_V_data_V_0_vld_out = video_in_V_data_V_0_state[1'd0];

assign video_in_V_dest_V_0_vld_in = video_in_TVALID;

endmodule //integralImg
