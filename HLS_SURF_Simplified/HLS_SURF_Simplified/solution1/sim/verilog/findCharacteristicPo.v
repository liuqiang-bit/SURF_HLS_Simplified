// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module findCharacteristicPo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] MSB_V_1;
wire   [9:0] r_fu_80_p2;
wire    ap_CS_fsm_state2;
reg   [9:0] val_assign_reg_58;
reg    ap_block_state1;
wire   [0:0] exitcond_fu_74_p2;
wire   [5:0] p_Result_2_fu_103_p5;
wire   [0:0] tmp_s_fu_86_p2;
reg   [5:0] p_Val2_s_fu_54;
wire   [5:0] ret_V_fu_141_p3;
wire   [5:0] tmp_26_fu_290_p2;
wire   [1:0] tmp_27_fu_95_p1;
wire   [3:0] tmp_28_fu_131_p1;
wire   [3:0] r_V_fu_121_p4;
wire   [3:0] tmp_8_fu_135_p2;
wire   [1:0] tmp_6_fu_154_p1;
wire   [2:0] Lo_assign_fu_158_p3;
wire   [2:0] Hi_assign_fu_166_p2;
wire   [0:0] tmp_9_fu_176_p2;
wire   [2:0] tmp_10_fu_182_p2;
wire   [2:0] tmp_11_fu_188_p3;
wire   [2:0] tmp_13_fu_204_p3;
wire   [2:0] tmp_12_fu_196_p3;
wire   [2:0] tmp_14_fu_212_p2;
wire   [5:0] tmp_7_fu_172_p1;
wire   [5:0] tmp_15_fu_218_p1;
wire   [5:0] tmp_18_fu_230_p2;
reg   [5:0] tmp_19_fu_236_p4;
wire   [5:0] tmp_16_fu_222_p1;
wire   [5:0] tmp_17_fu_226_p1;
wire   [5:0] tmp_21_fu_254_p2;
wire   [5:0] tmp_22_fu_260_p2;
wire   [5:0] p_demorgan_fu_266_p2;
wire   [5:0] tmp_23_fu_272_p2;
wire   [5:0] tmp_20_fu_246_p3;
wire   [5:0] tmp_24_fu_278_p2;
wire   [5:0] tmp_25_fu_284_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 MSB_V_1 = 6'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_86_p2 == 1'd1) & (exitcond_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_fu_54 <= tmp_26_fu_290_p2;
    end else if (((tmp_s_fu_86_p2 == 1'd0) & (exitcond_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_fu_54 <= ret_V_fu_141_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_54 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        val_assign_reg_58 <= r_fu_80_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_reg_58 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_86_p2 == 1'd0) & (exitcond_fu_74_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        MSB_V_1 <= p_Result_2_fu_103_p5;
    end
end

always @ (*) begin
    if (((exitcond_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_fu_166_p2 = (3'd1 | Lo_assign_fu_158_p3);

assign Lo_assign_fu_158_p3 = {{tmp_6_fu_154_p1}, {1'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign exitcond_fu_74_p2 = ((val_assign_reg_58 == 10'd591) ? 1'b1 : 1'b0);

assign p_Result_2_fu_103_p5 = {{tmp_27_fu_95_p1}, {MSB_V_1[3:0]}};

assign p_demorgan_fu_266_p2 = (tmp_22_fu_260_p2 & tmp_21_fu_254_p2);

assign r_V_fu_121_p4 = {{p_Val2_s_fu_54[5:2]}};

assign r_fu_80_p2 = (val_assign_reg_58 + 10'd1);

assign ret_V_fu_141_p3 = {{tmp_27_fu_95_p1}, {tmp_8_fu_135_p2}};

assign tmp_10_fu_182_p2 = ($signed(3'd5) - $signed(Lo_assign_fu_158_p3));

assign tmp_11_fu_188_p3 = ((tmp_9_fu_176_p2[0:0] === 1'b1) ? Lo_assign_fu_158_p3 : Hi_assign_fu_166_p2);

assign tmp_12_fu_196_p3 = ((tmp_9_fu_176_p2[0:0] === 1'b1) ? Hi_assign_fu_166_p2 : Lo_assign_fu_158_p3);

assign tmp_13_fu_204_p3 = ((tmp_9_fu_176_p2[0:0] === 1'b1) ? tmp_10_fu_182_p2 : Lo_assign_fu_158_p3);

assign tmp_14_fu_212_p2 = ($signed(3'd5) - $signed(tmp_11_fu_188_p3));

assign tmp_15_fu_218_p1 = tmp_13_fu_204_p3;

assign tmp_16_fu_222_p1 = tmp_12_fu_196_p3;

assign tmp_17_fu_226_p1 = tmp_14_fu_212_p2;

assign tmp_18_fu_230_p2 = tmp_7_fu_172_p1 << tmp_15_fu_218_p1;

integer ap_tvar_int_0;

always @ (tmp_18_fu_230_p2) begin
    for (ap_tvar_int_0 = 6 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 5 - 0) begin
            tmp_19_fu_236_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_19_fu_236_p4[ap_tvar_int_0] = tmp_18_fu_230_p2[5 - ap_tvar_int_0];
        end
    end
end

assign tmp_20_fu_246_p3 = ((tmp_9_fu_176_p2[0:0] === 1'b1) ? tmp_19_fu_236_p4 : tmp_18_fu_230_p2);

assign tmp_21_fu_254_p2 = 6'd63 << tmp_16_fu_222_p1;

assign tmp_22_fu_260_p2 = 6'd63 >> tmp_17_fu_226_p1;

assign tmp_23_fu_272_p2 = (p_demorgan_fu_266_p2 ^ 6'd63);

assign tmp_24_fu_278_p2 = (tmp_23_fu_272_p2 & p_Val2_s_fu_54);

assign tmp_25_fu_284_p2 = (tmp_20_fu_246_p3 & p_demorgan_fu_266_p2);

assign tmp_26_fu_290_p2 = (tmp_25_fu_284_p2 | tmp_24_fu_278_p2);

assign tmp_27_fu_95_p1 = p_Val2_s_fu_54[1:0];

assign tmp_28_fu_131_p1 = MSB_V_1[3:0];

assign tmp_6_fu_154_p1 = val_assign_reg_58[1:0];

assign tmp_7_fu_172_p1 = val_assign_reg_58[5:0];

assign tmp_8_fu_135_p2 = (tmp_28_fu_131_p1 | r_V_fu_121_p4);

assign tmp_9_fu_176_p2 = ((Lo_assign_fu_158_p3 > Hi_assign_fu_166_p2) ? 1'b1 : 1'b0);

assign tmp_s_fu_86_p2 = ((val_assign_reg_58 < 10'd3) ? 1'b1 : 1'b0);

endmodule //findCharacteristicPo
