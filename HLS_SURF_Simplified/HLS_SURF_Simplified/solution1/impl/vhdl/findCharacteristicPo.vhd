-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity findCharacteristicPo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    det0_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    det0_V_V_empty_n : IN STD_LOGIC;
    det0_V_V_read : OUT STD_LOGIC;
    det1_V_V3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    det1_V_V3_empty_n : IN STD_LOGIC;
    det1_V_V3_read : OUT STD_LOGIC;
    det2_V_V6_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    det2_V_V6_empty_n : IN STD_LOGIC;
    det2_V_V6_read : OUT STD_LOGIC;
    hessianThreshold_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    hessianThreshold_V_empty_n : IN STD_LOGIC;
    hessianThreshold_V_read : OUT STD_LOGIC;
    m_axi_keyPoints_V_AWVALID : OUT STD_LOGIC;
    m_axi_keyPoints_V_AWREADY : IN STD_LOGIC;
    m_axi_keyPoints_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_keyPoints_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_keyPoints_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_WVALID : OUT STD_LOGIC;
    m_axi_keyPoints_V_WREADY : IN STD_LOGIC;
    m_axi_keyPoints_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_keyPoints_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_WLAST : OUT STD_LOGIC;
    m_axi_keyPoints_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_ARVALID : OUT STD_LOGIC;
    m_axi_keyPoints_V_ARREADY : IN STD_LOGIC;
    m_axi_keyPoints_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_keyPoints_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_keyPoints_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_RVALID : IN STD_LOGIC;
    m_axi_keyPoints_V_RREADY : OUT STD_LOGIC;
    m_axi_keyPoints_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_keyPoints_V_RLAST : IN STD_LOGIC;
    m_axi_keyPoints_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_BVALID : IN STD_LOGIC;
    m_axi_keyPoints_V_BREADY : OUT STD_LOGIC;
    m_axi_keyPoints_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_keyPoints_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    keyPoints_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    keyPoints_V_offset_empty_n : IN STD_LOGIC;
    keyPoints_V_offset_read : OUT STD_LOGIC;
    m_axi_pointNumber_AWVALID : OUT STD_LOGIC;
    m_axi_pointNumber_AWREADY : IN STD_LOGIC;
    m_axi_pointNumber_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pointNumber_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pointNumber_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pointNumber_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pointNumber_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_WVALID : OUT STD_LOGIC;
    m_axi_pointNumber_WREADY : IN STD_LOGIC;
    m_axi_pointNumber_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pointNumber_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_WLAST : OUT STD_LOGIC;
    m_axi_pointNumber_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_ARVALID : OUT STD_LOGIC;
    m_axi_pointNumber_ARREADY : IN STD_LOGIC;
    m_axi_pointNumber_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pointNumber_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pointNumber_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pointNumber_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pointNumber_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_RVALID : IN STD_LOGIC;
    m_axi_pointNumber_RREADY : OUT STD_LOGIC;
    m_axi_pointNumber_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_pointNumber_RLAST : IN STD_LOGIC;
    m_axi_pointNumber_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_BVALID : IN STD_LOGIC;
    m_axi_pointNumber_BREADY : OUT STD_LOGIC;
    m_axi_pointNumber_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_pointNumber_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    pointNumber_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    pointNumber_offset_empty_n : IN STD_LOGIC;
    pointNumber_offset_read : OUT STD_LOGIC );
end;


architecture behav of findCharacteristicPo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (49 downto 0) := "00000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (49 downto 0) := "00000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (49 downto 0) := "00000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (49 downto 0) := "00000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (49 downto 0) := "00000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (49 downto 0) := "00000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (49 downto 0) := "00001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (49 downto 0) := "00010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (49 downto 0) := "00100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (49 downto 0) := "01000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (49 downto 0) := "10000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv10_311 : STD_LOGIC_VECTOR (9 downto 0) := "1100010001";
    constant ap_const_lv10_24F : STD_LOGIC_VECTOR (9 downto 0) := "1001001111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv10_3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv14_945 : STD_LOGIC_VECTOR (13 downto 0) := "00100101000101";
    constant ap_const_lv14_128A : STD_LOGIC_VECTOR (13 downto 0) := "01001010001010";
    constant ap_const_lv10_6 : STD_LOGIC_VECTOR (9 downto 0) := "0000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv10_249 : STD_LOGIC_VECTOR (9 downto 0) := "1001001001";
    constant ap_const_lv10_24C : STD_LOGIC_VECTOR (9 downto 0) := "1001001100";
    constant ap_const_lv10_317 : STD_LOGIC_VECTOR (9 downto 0) := "1100010111";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv10_314 : STD_LOGIC_VECTOR (9 downto 0) := "1100010100";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv13_317 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv13_945 : STD_LOGIC_VECTOR (12 downto 0) := "0100101000101";
    constant ap_const_lv13_128A : STD_LOGIC_VECTOR (12 downto 0) := "1001010001010";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv14_317 : STD_LOGIC_VECTOR (13 downto 0) := "00001100010111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bRow_V_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal bRow_V_1 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal bRow_V_2 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal MSB_V_1 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal N1_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_ce0 : STD_LOGIC;
    signal N1_V_we0 : STD_LOGIC;
    signal N1_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal N1_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmpPointNum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal det0_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal det1_V_V3_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_29_i_i_reg_1522 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_1605 : STD_LOGIC_VECTOR (0 downto 0);
    signal det2_V_V6_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_34_i_i_reg_1546 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_i_reg_1609 : STD_LOGIC_VECTOR (0 downto 0);
    signal hessianThreshold_V_blk_n : STD_LOGIC;
    signal keyPoints_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal keyPoints_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal keyPoints_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal keyPoints_V_offset_blk_n : STD_LOGIC;
    signal pointNumber_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_i_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pointNumber_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal pointNumber_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal pointNumber_offset_blk_n : STD_LOGIC;
    signal pointNumber_addr_reg_1493 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal hessianThreshold_V_r_reg_1499 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_cast_i_fu_558_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_i_reg_1504 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_i_i_fu_573_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_i_i_reg_1512 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_ioackin_m_axi_pointNumber_AWREADY : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal rIndex_1_i_i_fu_601_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal rIndex_1_i_i_reg_1517 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i_i_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_821_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_reg_1526 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_i_fu_1478_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_11_i_reg_1531 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_12_i_fu_867_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_12_i_fu_867_p2 : signal is "no";
    signal tmp_12_i_reg_1536 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_i_fu_872_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of tmp_13_i_fu_872_p2 : signal is "no";
    signal tmp_13_i_reg_1541 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_34_i_i_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1550 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_1_trunc_i_fu_899_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal val_assign_1_trunc_i_reg_1554 : STD_LOGIC_VECTOR (9 downto 0);
    signal notlhs3_i_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs3_i_reg_1559 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_i_fu_911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_i_reg_1565 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_i_i_fu_923_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_1_i_i_reg_1573 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal tmp_39_i_cast190_i_fu_929_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_39_i_cast190_i_reg_1578 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_39_i_cast189_i_fu_933_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_i_cast189_i_reg_1588 : STD_LOGIC_VECTOR (11 downto 0);
    signal N1_V_addr_1_reg_1595 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_2_reg_1600 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_cond_i_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_i_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op178_read_state5 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal tmp_17_i_fu_1046_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_i_reg_1616 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_predicate_op187_read_state6 : BOOLEAN;
    signal ap_block_state6 : BOOLEAN;
    signal or_cond3_i_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_1052_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_reg_1622 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_60_i_i_fu_1056_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_60_i_i_reg_1629 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_61_i_cast_i_fu_1062_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_61_i_cast_i_reg_1634 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_i_fu_1066_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_i_reg_1643 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_61_i_cast188_i_fu_1082_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_61_i_cast188_i_reg_1654 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal N1_V_addr_4_reg_1660 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_5_reg_1665 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_6_reg_1670 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_i_fu_1113_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_i_reg_1675 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_7_reg_1680 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_8_reg_1685 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_load_reg_1690 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i_fu_1151_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_i_reg_1698 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_63_i_i_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1157_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_34_reg_1704 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_64_i_i_fu_1161_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_64_i_i_reg_1711 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_65_i_cast_i_fu_1167_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_65_i_cast_i_reg_1716 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_65_i_cast187_i_fu_1181_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_65_i_cast187_i_reg_1727 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal N1_V_addr_9_reg_1733 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_10_reg_1738 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_11_reg_1743 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_14_reg_1753 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_15_reg_1758 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_16_reg_1763 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_17_reg_1768 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_18_reg_1773 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_19_reg_1778 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_20_reg_1783 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_41_i_fu_1311_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_41_i_reg_1806 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_i_fu_1321_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_i_reg_1812 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_i_fu_1326_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_i_reg_1817 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_i_fu_1331_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_44_i_reg_1822 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal N1_V_addr_23_reg_1837 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_24_reg_1842 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_25_reg_1847 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_26_reg_1852 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_27_reg_1857 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_28_reg_1862 : STD_LOGIC_VECTOR (12 downto 0);
    signal N1_V_addr_29_reg_1867 : STD_LOGIC_VECTOR (12 downto 0);
    signal keyPoints_V_addr_reg_1932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal val_assign_2_trunc_i_fu_1449_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal val_assign_2_trunc_i_reg_1938 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_ioackin_m_axi_keyPoints_V_AWREADY : STD_LOGIC;
    signal rIndex_i_i_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_i_i_reg_485 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_i_i_reg_497 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_14_cast_i_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_i_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_i_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_i_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_i_fu_1090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_i_fu_1099_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_i_fu_1108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_cast_i_fu_1123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_i_fu_1133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_i_fu_1176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_i_fu_1188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_i_fu_1198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_i_fu_1208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_cast_i_fu_1217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast_i_fu_1226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_cast_i_fu_1242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_i_fu_1252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_cast_i_fu_1262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_i_fu_1278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_i_fu_1288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_cast_i_fu_1298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_cast_i_fu_1336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_i_fu_1340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_i_fu_1344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_cast_i_fu_1358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_i_fu_1368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_i_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_i_fu_1393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_i_fu_1403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_i_fu_1413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_i_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_i_fu_1427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_pointNumber_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_keyPoints_V_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_keyPoints_V_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_keyPoints_V_WREADY : STD_LOGIC;
    signal ap_reg_ioackin_m_axi_pointNumber_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_pointNumber_WREADY : STD_LOGIC;
    signal tmp_29_fu_825_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_2_i_i_fu_623_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_95_i_i_fu_1437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i_i_fu_178 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_3_i_i_fu_661_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_fu_810_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal pointNumber_offset3_s_fu_528_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_548_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_fu_579_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp3_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rIndex_2_i_i_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_615_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_fu_651_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_i_i_fu_641_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_i_fu_655_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_674_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Lo_assign_i_i_fu_678_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal Hi_assign_i_i_fu_686_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_702_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_11_fu_708_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_724_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_716_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_fu_732_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_692_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_738_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_750_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_756_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_742_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_746_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_774_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_780_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_demorgan_fu_786_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_fu_792_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_766_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_798_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_25_fu_804_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_883_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_39_i_cast_i_fu_937_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_i_fu_941_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of tmp_14_i_fu_941_p2 : signal is "no";
    signal tmp_15_i_fu_951_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_16_i_fu_961_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_i_i_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_i_fu_971_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_i_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs2_i_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1011_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_i_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp6_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_fu_1046_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_i_fu_1071_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_i_fu_1085_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_i_fu_1095_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_i_fu_1104_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_i_fu_1118_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_i_fu_1128_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_i_fu_1151_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_i_fu_1171_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_i_fu_1184_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_i_fu_1193_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_28_i_fu_1203_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_31_i_fu_1213_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_32_i_fu_1222_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_i_fu_1231_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_34_i_fu_1236_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_35_i_fu_1247_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_36_i_fu_1257_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_i_fu_1267_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_38_i_fu_1272_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_39_i_fu_1283_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_40_i_fu_1293_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_41_i_fu_1311_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_35_fu_1317_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_45_i_fu_1348_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_46_i_fu_1353_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_47_i_fu_1363_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_48_i_fu_1373_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_49_i_fu_1383_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_50_i_fu_1388_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_51_i_fu_1398_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_52_i_fu_1408_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_94_i_cast_i_fu_1418_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_94_i_cast_i_fu_1418_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_i_fu_1422_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_95_i_i_fu_1437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_2_trunc_c_fu_1455_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_i_fu_1458_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_11_i_fu_1478_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_17_i_fu_1046_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_29_i_fu_1151_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_41_i_fu_1311_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component surf_Simplified_mvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component findCharacteristiudo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    N1_V_U : component findCharacteristiudo
    generic map (
        DataWidth => 32,
        AddressRange => 7119,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => N1_V_address0,
        ce0 => N1_V_ce0,
        we0 => N1_V_we0,
        d0 => N1_V_d0,
        q0 => N1_V_q0);

    surf_Simplified_mvdy_U61 : component surf_Simplified_mvdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        din0 => tmp_11_i_fu_1478_p0,
        din1 => tmp_30_reg_1526,
        dout => tmp_11_i_fu_1478_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_pointNumber_BVALID = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_keyPoints_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_keyPoints_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                    if ((ap_sig_ioackin_m_axi_keyPoints_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_keyPoints_V_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_keyPoints_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_keyPoints_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_keyPoints_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_keyPoints_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                    if ((ap_sig_ioackin_m_axi_keyPoints_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_keyPoints_V_WREADY <= ap_const_logic_0;
                    elsif ((m_axi_keyPoints_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_keyPoints_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_pointNumber_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_pointNumber_AWREADY <= ap_const_logic_0;
            else
                if (((exitcond1_i_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    if ((ap_const_boolean_0 = ap_block_state2_io)) then 
                        ap_reg_ioackin_m_axi_pointNumber_AWREADY <= ap_const_logic_0;
                    elsif ((m_axi_pointNumber_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_pointNumber_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_pointNumber_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_pointNumber_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                    if ((ap_sig_ioackin_m_axi_pointNumber_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_pointNumber_WREADY <= ap_const_logic_0;
                    elsif ((m_axi_pointNumber_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_pointNumber_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    c_i_i_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                c_i_i_reg_497 <= c_1_i_i_reg_1573;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                c_i_i_reg_497 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_Val2_i_i_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (tmp_29_i_i_fu_609_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_i_fu_567_p2 = ap_const_lv1_0))) then 
                p_Val2_i_i_fu_178 <= tmp_26_fu_810_p2;
            elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_29_i_i_fu_609_p2 = ap_const_lv1_0) and (exitcond1_i_fu_567_p2 = ap_const_lv1_0))) then 
                p_Val2_i_i_fu_178 <= ret_V_3_i_i_fu_661_p3;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_i_i_fu_178 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    rIndex_i_i_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (exitcond_i_fu_917_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                rIndex_i_i_reg_474 <= rIndex_1_i_i_reg_1517;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rIndex_i_i_reg_474 <= ap_const_lv32_FFFFFFFF;
            end if; 
        end if;
    end process;

    tmpPointNum_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_pointNumber_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                tmpPointNum <= ap_const_lv32_0;
            elsif (((grp_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                tmpPointNum <= tmp_95_i_i_fu_1437_p2;
            end if; 
        end if;
    end process;

    val_assign_i_i_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (exitcond_i_fu_917_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                val_assign_i_i_reg_485 <= r_i_i_reg_1512;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                val_assign_i_i_reg_485 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_29_i_i_fu_609_p2 = ap_const_lv1_0) and (exitcond1_i_fu_567_p2 = ap_const_lv1_0))) then
                MSB_V_1 <= p_Result_2_i_i_fu_623_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                N1_V_addr_10_reg_1738 <= tmp_27_cast_i_fu_1198_p1(13 - 1 downto 0);
                N1_V_addr_11_reg_1743 <= tmp_28_cast_i_fu_1208_p1(13 - 1 downto 0);
                    N1_V_addr_14_reg_1753(11 downto 0) <= tmp_32_cast_i_fu_1226_p1(13 - 1 downto 0)(11 downto 0);
                N1_V_addr_15_reg_1758 <= tmp_34_cast_i_fu_1242_p1(13 - 1 downto 0);
                N1_V_addr_16_reg_1763 <= tmp_35_cast_i_fu_1252_p1(13 - 1 downto 0);
                N1_V_addr_17_reg_1768 <= tmp_36_cast_i_fu_1262_p1(13 - 1 downto 0);
                N1_V_addr_18_reg_1773 <= tmp_38_cast_i_fu_1278_p1(13 - 1 downto 0);
                N1_V_addr_19_reg_1778 <= tmp_39_cast_i_fu_1288_p1(13 - 1 downto 0);
                N1_V_addr_20_reg_1783 <= tmp_40_cast_i_fu_1298_p1(13 - 1 downto 0);
                    N1_V_addr_9_reg_1733(11 downto 0) <= tmp_26_cast_i_fu_1188_p1(13 - 1 downto 0)(11 downto 0);
                    tmp_65_i_cast187_i_reg_1727(9 downto 0) <= tmp_65_i_cast187_i_fu_1181_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) then
                N1_V_addr_1_reg_1595 <= tmp_15_cast_i_fu_956_p1(13 - 1 downto 0);
                N1_V_addr_2_reg_1600 <= tmp_16_cast_i_fu_966_p1(13 - 1 downto 0);
                    tmp_39_i_cast189_i_reg_1588(9 downto 0) <= tmp_39_i_cast189_i_fu_933_p1(9 downto 0);
                    tmp_39_i_cast190_i_reg_1578(9 downto 0) <= tmp_39_i_cast190_i_fu_929_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                    N1_V_addr_23_reg_1837(11 downto 0) <= tmp_44_cast_i_fu_1344_p1(13 - 1 downto 0)(11 downto 0);
                N1_V_addr_24_reg_1842 <= tmp_46_cast_i_fu_1358_p1(13 - 1 downto 0);
                N1_V_addr_25_reg_1847 <= tmp_47_cast_i_fu_1368_p1(13 - 1 downto 0);
                N1_V_addr_26_reg_1852 <= tmp_48_cast_i_fu_1378_p1(13 - 1 downto 0);
                N1_V_addr_27_reg_1857 <= tmp_50_cast_i_fu_1393_p1(13 - 1 downto 0);
                N1_V_addr_28_reg_1862 <= tmp_51_cast_i_fu_1403_p1(13 - 1 downto 0);
                N1_V_addr_29_reg_1867 <= tmp_52_cast_i_fu_1413_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    N1_V_addr_4_reg_1660(11 downto 0) <= tmp_20_cast_i_fu_1090_p1(13 - 1 downto 0)(11 downto 0);
                    N1_V_addr_5_reg_1665(11 downto 0) <= tmp_21_cast_i_fu_1099_p1(13 - 1 downto 0)(11 downto 0);
                N1_V_addr_6_reg_1670 <= tmp_22_cast_i_fu_1108_p1(13 - 1 downto 0);
                N1_V_addr_7_reg_1680 <= tmp_24_cast_i_fu_1123_p1(13 - 1 downto 0);
                N1_V_addr_8_reg_1685 <= tmp_25_cast_i_fu_1133_p1(13 - 1 downto 0);
                N1_V_load_reg_1690 <= N1_V_q0;
                tmp_23_i_reg_1675 <= tmp_23_i_fu_1113_p2;
                    tmp_61_i_cast188_i_reg_1654(9 downto 0) <= tmp_61_i_cast188_i_fu_1082_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bRow_V_0 <= tmp_29_fu_825_p1;
                bRow_V_1 <= p_Val2_i_i_fu_178(3 downto 2);
                bRow_V_2 <= p_Val2_i_i_fu_178(5 downto 4);
                icmp_reg_1550 <= icmp_fu_893_p2;
                notlhs3_i_reg_1559 <= notlhs3_i_fu_905_p2;
                notlhs_i_reg_1565 <= notlhs_i_fu_911_p2;
                tmp_11_i_reg_1531 <= tmp_11_i_fu_1478_p2;
                tmp_12_i_reg_1536 <= tmp_12_i_fu_867_p2;
                tmp_13_i_reg_1541 <= tmp_13_i_fu_872_p2;
                tmp_34_i_i_reg_1546 <= tmp_34_i_i_fu_877_p2;
                val_assign_1_trunc_i_reg_1554 <= val_assign_1_trunc_i_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                c_1_i_i_reg_1573 <= c_1_i_i_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                hessianThreshold_V_r_reg_1499 <= hessianThreshold_V_dout;
                    pointNumber_addr_reg_1493(29 downto 0) <= tmp_6_i_fu_538_p1(32 - 1 downto 0)(29 downto 0);
                    sext_cast_i_reg_1504(29 downto 0) <= sext_cast_i_fu_558_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                keyPoints_V_addr_reg_1932 <= sum_cast_i_fu_1427_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op178_read_state5 = ap_const_boolean_1) and (det1_V_V3_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_34_i_i_reg_1546 = ap_const_lv1_0))) then
                or_cond2_i_reg_1609 <= or_cond2_i_fu_1005_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_29_i_i_reg_1522 = ap_const_lv1_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) then
                or_cond_i_reg_1605 <= or_cond_i_fu_988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_i_fu_567_p2 = ap_const_lv1_0))) then
                rIndex_1_i_i_reg_1517 <= rIndex_1_i_i_fu_601_p3;
                tmp_29_i_i_reg_1522 <= tmp_29_i_i_fu_609_p2;
                tmp_30_reg_1526 <= tmp_30_fu_821_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                r_i_i_reg_1512 <= r_i_i_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op187_read_state6 = ap_const_boolean_1) and (det2_V_V6_empty_n = ap_const_logic_0))) and (or_cond3_i_fu_1032_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_reg_1550 = ap_const_lv1_0))) then
                tmp_17_i_reg_1616 <= tmp_17_i_fu_1046_p2;
                tmp_33_reg_1622 <= tmp_33_fu_1052_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_18_i_reg_1643 <= tmp_18_i_fu_1066_p2;
                tmp_60_i_i_reg_1629 <= tmp_60_i_i_fu_1056_p2;
                    tmp_61_i_cast_i_reg_1634(9 downto 0) <= tmp_61_i_cast_i_fu_1062_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_63_i_i_fu_1138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_29_i_reg_1698 <= tmp_29_i_fu_1151_p2;
                tmp_34_reg_1704 <= tmp_34_fu_1157_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                tmp_41_i_reg_1806 <= tmp_41_i_fu_1311_p2;
                tmp_42_i_reg_1812 <= tmp_42_i_fu_1321_p2;
                tmp_43_i_reg_1817 <= tmp_43_i_fu_1326_p2;
                tmp_44_i_reg_1822 <= tmp_44_i_fu_1331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_64_i_i_reg_1711 <= tmp_64_i_i_fu_1161_p2;
                    tmp_65_i_cast_i_reg_1716(9 downto 0) <= tmp_65_i_cast_i_fu_1167_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_ioackin_m_axi_keyPoints_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                val_assign_2_trunc_i_reg_1938 <= val_assign_2_trunc_i_fu_1449_p2;
            end if;
        end if;
    end process;
    pointNumber_addr_reg_1493(31 downto 30) <= "00";
    sext_cast_i_reg_1504(32 downto 30) <= "000";
    tmp_39_i_cast190_i_reg_1578(12 downto 10) <= "000";
    tmp_39_i_cast189_i_reg_1588(11 downto 10) <= "00";
    tmp_61_i_cast_i_reg_1634(12 downto 10) <= "000";
    tmp_61_i_cast188_i_reg_1654(11 downto 10) <= "00";
    N1_V_addr_4_reg_1660(12) <= '0';
    N1_V_addr_5_reg_1665(12) <= '0';
    tmp_65_i_cast_i_reg_1716(11 downto 10) <= "00";
    tmp_65_i_cast187_i_reg_1727(12 downto 10) <= "000";
    N1_V_addr_9_reg_1733(12) <= '0';
    N1_V_addr_14_reg_1753(12) <= '0';
    N1_V_addr_23_reg_1837(12) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, det0_V_V_empty_n, det1_V_V3_empty_n, det2_V_V6_empty_n, hessianThreshold_V_empty_n, m_axi_keyPoints_V_BVALID, keyPoints_V_offset_empty_n, m_axi_pointNumber_BVALID, pointNumber_offset_empty_n, ap_CS_fsm_state4, exitcond_i_fu_917_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state43, ap_CS_fsm_state2, exitcond1_i_fu_567_p2, ap_CS_fsm_state45, ap_CS_fsm_state50, ap_block_state2_io, icmp_reg_1550, ap_predicate_op178_read_state5, ap_predicate_op187_read_state6, or_cond3_i_fu_1032_p2, ap_CS_fsm_state8, tmp_63_i_i_fu_1138_p2, ap_CS_fsm_state10, ap_CS_fsm_state15, grp_fu_518_p2, ap_CS_fsm_state17, ap_CS_fsm_state36, ap_sig_ioackin_m_axi_keyPoints_V_AWREADY, ap_sig_ioackin_m_axi_keyPoints_V_WREADY, ap_sig_ioackin_m_axi_pointNumber_WREADY, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_i_fu_567_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (exitcond1_i_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (exitcond_i_fu_917_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_predicate_op178_read_state5 = ap_const_boolean_1) and (det1_V_V3_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((ap_predicate_op187_read_state6 = ap_const_boolean_1) and (det2_V_V6_empty_n = ap_const_logic_0))) and (or_cond3_i_fu_1032_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_reg_1550 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif ((not(((ap_predicate_op187_read_state6 = ap_const_boolean_1) and (det2_V_V6_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6) and ((icmp_reg_1550 = ap_const_lv1_1) or (or_cond3_i_fu_1032_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_63_i_i_fu_1138_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_fu_518_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_sig_ioackin_m_axi_keyPoints_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_sig_ioackin_m_axi_keyPoints_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (m_axi_keyPoints_V_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state45 => 
                if (((ap_sig_ioackin_m_axi_pointNumber_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_pointNumber_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Hi_assign_i_i_fu_686_p2 <= (ap_const_lv3_1 or Lo_assign_i_i_fu_678_p3);
    Lo_assign_i_i_fu_678_p3 <= (tmp_7_fu_674_p1 & ap_const_lv1_0);

    N1_V_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, N1_V_addr_1_reg_1595, N1_V_addr_2_reg_1600, ap_CS_fsm_state7, N1_V_addr_4_reg_1660, N1_V_addr_5_reg_1665, N1_V_addr_6_reg_1670, N1_V_addr_7_reg_1680, N1_V_addr_8_reg_1685, ap_CS_fsm_state9, ap_CS_fsm_state10, N1_V_addr_9_reg_1733, N1_V_addr_10_reg_1738, N1_V_addr_11_reg_1743, N1_V_addr_14_reg_1753, N1_V_addr_15_reg_1758, N1_V_addr_16_reg_1763, N1_V_addr_17_reg_1768, N1_V_addr_18_reg_1773, N1_V_addr_19_reg_1778, N1_V_addr_20_reg_1783, ap_CS_fsm_state16, ap_CS_fsm_state17, N1_V_addr_23_reg_1837, N1_V_addr_24_reg_1842, N1_V_addr_25_reg_1847, N1_V_addr_26_reg_1852, N1_V_addr_27_reg_1857, N1_V_addr_28_reg_1862, N1_V_addr_29_reg_1867, tmp_14_cast_i_fu_946_p1, tmp_19_cast_i_fu_1077_p1, tmp_30_cast_i_fu_1176_p1, tmp_31_cast_i_fu_1217_p1, tmp_42_cast_i_fu_1336_p1, tmp_43_cast_i_fu_1340_p1, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            N1_V_address0 <= N1_V_addr_29_reg_1867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            N1_V_address0 <= N1_V_addr_28_reg_1862;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            N1_V_address0 <= N1_V_addr_27_reg_1857;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            N1_V_address0 <= N1_V_addr_8_reg_1685;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            N1_V_address0 <= N1_V_addr_7_reg_1680;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            N1_V_address0 <= N1_V_addr_11_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            N1_V_address0 <= N1_V_addr_20_reg_1783;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            N1_V_address0 <= N1_V_addr_19_reg_1778;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            N1_V_address0 <= N1_V_addr_18_reg_1773;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            N1_V_address0 <= N1_V_addr_26_reg_1852;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            N1_V_address0 <= N1_V_addr_25_reg_1847;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            N1_V_address0 <= N1_V_addr_24_reg_1842;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            N1_V_address0 <= N1_V_addr_6_reg_1670;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            N1_V_address0 <= N1_V_addr_10_reg_1738;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            N1_V_address0 <= N1_V_addr_17_reg_1768;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            N1_V_address0 <= N1_V_addr_16_reg_1763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            N1_V_address0 <= N1_V_addr_15_reg_1758;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            N1_V_address0 <= N1_V_addr_23_reg_1837;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            N1_V_address0 <= tmp_43_cast_i_fu_1340_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            N1_V_address0 <= tmp_42_cast_i_fu_1336_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            N1_V_address0 <= N1_V_addr_5_reg_1665;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            N1_V_address0 <= N1_V_addr_4_reg_1660;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            N1_V_address0 <= N1_V_addr_9_reg_1733;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            N1_V_address0 <= N1_V_addr_14_reg_1753;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            N1_V_address0 <= tmp_31_cast_i_fu_1217_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            N1_V_address0 <= tmp_30_cast_i_fu_1176_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            N1_V_address0 <= tmp_19_cast_i_fu_1077_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            N1_V_address0 <= N1_V_addr_2_reg_1600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            N1_V_address0 <= N1_V_addr_1_reg_1595;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            N1_V_address0 <= tmp_14_cast_i_fu_946_p1(13 - 1 downto 0);
        else 
            N1_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    N1_V_ce0_assign_proc : process(det0_V_V_empty_n, det1_V_V3_empty_n, det2_V_V6_empty_n, ap_CS_fsm_state4, exitcond_i_fu_917_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_predicate_op178_read_state5, ap_predicate_op187_read_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (not(((ap_predicate_op187_read_state6 = ap_const_boolean_1) and (det2_V_V6_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_predicate_op178_read_state5 = ap_const_boolean_1) and (det1_V_V3_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            N1_V_ce0 <= ap_const_logic_1;
        else 
            N1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    N1_V_d0_assign_proc : process(det0_V_V_dout, det1_V_V3_dout, det2_V_V6_dout, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            N1_V_d0 <= det2_V_V6_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            N1_V_d0 <= det1_V_V3_dout;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            N1_V_d0 <= det0_V_V_dout;
        else 
            N1_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    N1_V_we0_assign_proc : process(det0_V_V_empty_n, det1_V_V3_empty_n, det2_V_V6_empty_n, ap_CS_fsm_state4, exitcond_i_fu_917_p2, ap_CS_fsm_state5, tmp_29_i_i_reg_1522, or_cond_i_reg_1605, ap_CS_fsm_state6, tmp_34_i_i_reg_1546, or_cond2_i_reg_1609, ap_predicate_op178_read_state5, ap_predicate_op187_read_state6)
    begin
        if (((not(((ap_predicate_op187_read_state6 = ap_const_boolean_1) and (det2_V_V6_empty_n = ap_const_logic_0))) and (or_cond2_i_reg_1609 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_34_i_i_reg_1546 = ap_const_lv1_0)) or (not(((ap_predicate_op178_read_state5 = ap_const_boolean_1) and (det1_V_V3_empty_n = ap_const_logic_0))) and (or_cond_i_reg_1605 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_i_i_reg_1522 = ap_const_lv1_0)) or (not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_917_p2 = ap_const_lv1_0)))) then 
            N1_V_we0 <= ap_const_logic_1;
        else 
            N1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, hessianThreshold_V_empty_n, keyPoints_V_offset_empty_n, pointNumber_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(exitcond1_i_fu_567_p2, ap_sig_ioackin_m_axi_pointNumber_AWREADY)
    begin
                ap_block_state2_io <= ((ap_sig_ioackin_m_axi_pointNumber_AWREADY = ap_const_logic_0) and (exitcond1_i_fu_567_p2 = ap_const_lv1_1));
    end process;


    ap_block_state4_assign_proc : process(det0_V_V_empty_n, exitcond_i_fu_917_p2)
    begin
                ap_block_state4 <= ((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0));
    end process;


    ap_block_state5_assign_proc : process(det1_V_V3_empty_n, ap_predicate_op178_read_state5)
    begin
                ap_block_state5 <= ((ap_predicate_op178_read_state5 = ap_const_boolean_1) and (det1_V_V3_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(det2_V_V6_empty_n, ap_predicate_op187_read_state6)
    begin
                ap_block_state6 <= ((ap_predicate_op187_read_state6 = ap_const_boolean_1) and (det2_V_V6_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_pointNumber_BVALID, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_pointNumber_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op178_read_state5_assign_proc : process(tmp_29_i_i_reg_1522, or_cond_i_reg_1605)
    begin
                ap_predicate_op178_read_state5 <= ((or_cond_i_reg_1605 = ap_const_lv1_1) and (tmp_29_i_i_reg_1522 = ap_const_lv1_0));
    end process;


    ap_predicate_op187_read_state6_assign_proc : process(tmp_34_i_i_reg_1546, or_cond2_i_reg_1609)
    begin
                ap_predicate_op187_read_state6 <= ((or_cond2_i_reg_1609 = ap_const_lv1_1) and (tmp_34_i_i_reg_1546 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(m_axi_pointNumber_BVALID, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_pointNumber_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_keyPoints_V_AWREADY_assign_proc : process(m_axi_keyPoints_V_AWREADY, ap_reg_ioackin_m_axi_keyPoints_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_keyPoints_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_keyPoints_V_AWREADY <= m_axi_keyPoints_V_AWREADY;
        else 
            ap_sig_ioackin_m_axi_keyPoints_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_keyPoints_V_WREADY_assign_proc : process(m_axi_keyPoints_V_WREADY, ap_reg_ioackin_m_axi_keyPoints_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_keyPoints_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_keyPoints_V_WREADY <= m_axi_keyPoints_V_WREADY;
        else 
            ap_sig_ioackin_m_axi_keyPoints_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_pointNumber_AWREADY_assign_proc : process(m_axi_pointNumber_AWREADY, ap_reg_ioackin_m_axi_pointNumber_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_pointNumber_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_pointNumber_AWREADY <= m_axi_pointNumber_AWREADY;
        else 
            ap_sig_ioackin_m_axi_pointNumber_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_pointNumber_WREADY_assign_proc : process(m_axi_pointNumber_WREADY, ap_reg_ioackin_m_axi_pointNumber_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_pointNumber_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_pointNumber_WREADY <= m_axi_pointNumber_WREADY;
        else 
            ap_sig_ioackin_m_axi_pointNumber_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    c_1_i_i_fu_923_p2 <= std_logic_vector(unsigned(c_i_i_reg_497) + unsigned(ap_const_lv10_1));

    det0_V_V_blk_n_assign_proc : process(det0_V_V_empty_n, ap_CS_fsm_state4, exitcond_i_fu_917_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) then 
            det0_V_V_blk_n <= det0_V_V_empty_n;
        else 
            det0_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    det0_V_V_read_assign_proc : process(det0_V_V_empty_n, ap_CS_fsm_state4, exitcond_i_fu_917_p2)
    begin
        if ((not(((det0_V_V_empty_n = ap_const_logic_0) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_917_p2 = ap_const_lv1_0))) then 
            det0_V_V_read <= ap_const_logic_1;
        else 
            det0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    det1_V_V3_blk_n_assign_proc : process(det1_V_V3_empty_n, ap_CS_fsm_state5, tmp_29_i_i_reg_1522, or_cond_i_reg_1605)
    begin
        if (((or_cond_i_reg_1605 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_29_i_i_reg_1522 = ap_const_lv1_0))) then 
            det1_V_V3_blk_n <= det1_V_V3_empty_n;
        else 
            det1_V_V3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    det1_V_V3_read_assign_proc : process(det1_V_V3_empty_n, ap_CS_fsm_state5, ap_predicate_op178_read_state5)
    begin
        if ((not(((ap_predicate_op178_read_state5 = ap_const_boolean_1) and (det1_V_V3_empty_n = ap_const_logic_0))) and (ap_predicate_op178_read_state5 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            det1_V_V3_read <= ap_const_logic_1;
        else 
            det1_V_V3_read <= ap_const_logic_0;
        end if; 
    end process;


    det2_V_V6_blk_n_assign_proc : process(det2_V_V6_empty_n, ap_CS_fsm_state6, tmp_34_i_i_reg_1546, or_cond2_i_reg_1609)
    begin
        if (((or_cond2_i_reg_1609 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_34_i_i_reg_1546 = ap_const_lv1_0))) then 
            det2_V_V6_blk_n <= det2_V_V6_empty_n;
        else 
            det2_V_V6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    det2_V_V6_read_assign_proc : process(det2_V_V6_empty_n, ap_CS_fsm_state6, ap_predicate_op187_read_state6)
    begin
        if ((not(((ap_predicate_op187_read_state6 = ap_const_boolean_1) and (det2_V_V6_empty_n = ap_const_logic_0))) and (ap_predicate_op187_read_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            det2_V_V6_read <= ap_const_logic_1;
        else 
            det2_V_V6_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_567_p2 <= "1" when (val_assign_i_i_reg_485 = ap_const_lv10_24F) else "0";
    exitcond_i_fu_917_p2 <= "1" when (c_i_i_reg_497 = ap_const_lv10_317) else "0";
    grp_fu_512_p2 <= "1" when (unsigned(c_i_i_reg_497) < unsigned(ap_const_lv10_311)) else "0";
    grp_fu_518_p2 <= "1" when (signed(N1_V_load_reg_1690) > signed(N1_V_q0)) else "0";

    hessianThreshold_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, hessianThreshold_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hessianThreshold_V_blk_n <= hessianThreshold_V_empty_n;
        else 
            hessianThreshold_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hessianThreshold_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, hessianThreshold_V_empty_n, keyPoints_V_offset_empty_n, pointNumber_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hessianThreshold_V_read <= ap_const_logic_1;
        else 
            hessianThreshold_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp3_fu_589_p2 <= "1" when (signed(tmp_6_fu_579_p4) < signed(ap_const_lv31_1)) else "0";
    icmp6_fu_1021_p2 <= "0" when (tmp_32_fu_1011_p4 = ap_const_lv7_0) else "1";
    icmp_fu_893_p2 <= "1" when (tmp_31_fu_883_p4 = ap_const_lv7_0) else "0";

    keyPoints_V_blk_n_AW_assign_proc : process(m_axi_keyPoints_V_AWREADY, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            keyPoints_V_blk_n_AW <= m_axi_keyPoints_V_AWREADY;
        else 
            keyPoints_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    keyPoints_V_blk_n_B_assign_proc : process(m_axi_keyPoints_V_BVALID, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            keyPoints_V_blk_n_B <= m_axi_keyPoints_V_BVALID;
        else 
            keyPoints_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    keyPoints_V_blk_n_W_assign_proc : process(m_axi_keyPoints_V_WREADY, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            keyPoints_V_blk_n_W <= m_axi_keyPoints_V_WREADY;
        else 
            keyPoints_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    keyPoints_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, keyPoints_V_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            keyPoints_V_offset_blk_n <= keyPoints_V_offset_empty_n;
        else 
            keyPoints_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    keyPoints_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, hessianThreshold_V_empty_n, keyPoints_V_offset_empty_n, pointNumber_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            keyPoints_V_offset_read <= ap_const_logic_1;
        else 
            keyPoints_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_keyPoints_V_ARADDR <= ap_const_lv32_0;
    m_axi_keyPoints_V_ARBURST <= ap_const_lv2_0;
    m_axi_keyPoints_V_ARCACHE <= ap_const_lv4_0;
    m_axi_keyPoints_V_ARID <= ap_const_lv1_0;
    m_axi_keyPoints_V_ARLEN <= ap_const_lv32_0;
    m_axi_keyPoints_V_ARLOCK <= ap_const_lv2_0;
    m_axi_keyPoints_V_ARPROT <= ap_const_lv3_0;
    m_axi_keyPoints_V_ARQOS <= ap_const_lv4_0;
    m_axi_keyPoints_V_ARREGION <= ap_const_lv4_0;
    m_axi_keyPoints_V_ARSIZE <= ap_const_lv3_0;
    m_axi_keyPoints_V_ARUSER <= ap_const_lv1_0;
    m_axi_keyPoints_V_ARVALID <= ap_const_logic_0;
    m_axi_keyPoints_V_AWADDR <= keyPoints_V_addr_reg_1932;
    m_axi_keyPoints_V_AWBURST <= ap_const_lv2_0;
    m_axi_keyPoints_V_AWCACHE <= ap_const_lv4_0;
    m_axi_keyPoints_V_AWID <= ap_const_lv1_0;
    m_axi_keyPoints_V_AWLEN <= ap_const_lv32_1;
    m_axi_keyPoints_V_AWLOCK <= ap_const_lv2_0;
    m_axi_keyPoints_V_AWPROT <= ap_const_lv3_0;
    m_axi_keyPoints_V_AWQOS <= ap_const_lv4_0;
    m_axi_keyPoints_V_AWREGION <= ap_const_lv4_0;
    m_axi_keyPoints_V_AWSIZE <= ap_const_lv3_0;
    m_axi_keyPoints_V_AWUSER <= ap_const_lv1_0;

    m_axi_keyPoints_V_AWVALID_assign_proc : process(ap_CS_fsm_state37, ap_reg_ioackin_m_axi_keyPoints_V_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_keyPoints_V_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            m_axi_keyPoints_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_keyPoints_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_keyPoints_V_BREADY_assign_proc : process(m_axi_keyPoints_V_BVALID, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (m_axi_keyPoints_V_BVALID = ap_const_logic_1))) then 
            m_axi_keyPoints_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_keyPoints_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_keyPoints_V_RREADY <= ap_const_logic_0;
    m_axi_keyPoints_V_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_fu_1458_p4),32));
    m_axi_keyPoints_V_WID <= ap_const_lv1_0;
    m_axi_keyPoints_V_WLAST <= ap_const_logic_0;
    m_axi_keyPoints_V_WSTRB <= ap_const_lv4_F;
    m_axi_keyPoints_V_WUSER <= ap_const_lv1_0;

    m_axi_keyPoints_V_WVALID_assign_proc : process(ap_CS_fsm_state38, ap_reg_ioackin_m_axi_keyPoints_V_WREADY)
    begin
        if (((ap_reg_ioackin_m_axi_keyPoints_V_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            m_axi_keyPoints_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_keyPoints_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_pointNumber_ARADDR <= ap_const_lv32_0;
    m_axi_pointNumber_ARBURST <= ap_const_lv2_0;
    m_axi_pointNumber_ARCACHE <= ap_const_lv4_0;
    m_axi_pointNumber_ARID <= ap_const_lv1_0;
    m_axi_pointNumber_ARLEN <= ap_const_lv32_0;
    m_axi_pointNumber_ARLOCK <= ap_const_lv2_0;
    m_axi_pointNumber_ARPROT <= ap_const_lv3_0;
    m_axi_pointNumber_ARQOS <= ap_const_lv4_0;
    m_axi_pointNumber_ARREGION <= ap_const_lv4_0;
    m_axi_pointNumber_ARSIZE <= ap_const_lv3_0;
    m_axi_pointNumber_ARUSER <= ap_const_lv1_0;
    m_axi_pointNumber_ARVALID <= ap_const_logic_0;
    m_axi_pointNumber_AWADDR <= pointNumber_addr_reg_1493;
    m_axi_pointNumber_AWBURST <= ap_const_lv2_0;
    m_axi_pointNumber_AWCACHE <= ap_const_lv4_0;
    m_axi_pointNumber_AWID <= ap_const_lv1_0;
    m_axi_pointNumber_AWLEN <= ap_const_lv32_1;
    m_axi_pointNumber_AWLOCK <= ap_const_lv2_0;
    m_axi_pointNumber_AWPROT <= ap_const_lv3_0;
    m_axi_pointNumber_AWQOS <= ap_const_lv4_0;
    m_axi_pointNumber_AWREGION <= ap_const_lv4_0;
    m_axi_pointNumber_AWSIZE <= ap_const_lv3_0;
    m_axi_pointNumber_AWUSER <= ap_const_lv1_0;

    m_axi_pointNumber_AWVALID_assign_proc : process(ap_CS_fsm_state2, exitcond1_i_fu_567_p2, ap_reg_ioackin_m_axi_pointNumber_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_pointNumber_AWREADY = ap_const_logic_0) and (exitcond1_i_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_pointNumber_AWVALID <= ap_const_logic_1;
        else 
            m_axi_pointNumber_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_pointNumber_BREADY_assign_proc : process(m_axi_pointNumber_BVALID, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) and (m_axi_pointNumber_BVALID = ap_const_logic_1))) then 
            m_axi_pointNumber_BREADY <= ap_const_logic_1;
        else 
            m_axi_pointNumber_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_pointNumber_RREADY <= ap_const_logic_0;
    m_axi_pointNumber_WDATA <= tmpPointNum;
    m_axi_pointNumber_WID <= ap_const_lv1_0;
    m_axi_pointNumber_WLAST <= ap_const_logic_0;
    m_axi_pointNumber_WSTRB <= ap_const_lv4_F;
    m_axi_pointNumber_WUSER <= ap_const_lv1_0;

    m_axi_pointNumber_WVALID_assign_proc : process(ap_CS_fsm_state45, ap_reg_ioackin_m_axi_pointNumber_WREADY)
    begin
        if (((ap_reg_ioackin_m_axi_pointNumber_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            m_axi_pointNumber_WVALID <= ap_const_logic_1;
        else 
            m_axi_pointNumber_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    notlhs3_i_fu_905_p2 <= "1" when (unsigned(val_assign_i_i_reg_485) < unsigned(ap_const_lv10_249)) else "0";
    notlhs_i_fu_911_p2 <= "1" when (unsigned(val_assign_i_i_reg_485) < unsigned(ap_const_lv10_24C)) else "0";
    notrhs2_i_fu_994_p2 <= "1" when (unsigned(c_i_i_reg_497) > unsigned(ap_const_lv10_5)) else "0";
    notrhs_i_fu_971_p2 <= "1" when (unsigned(c_i_i_reg_497) > unsigned(ap_const_lv10_2)) else "0";
    or_cond2_i_fu_1005_p2 <= (tmp5_i_fu_1000_p2 and notrhs2_i_fu_994_p2);
    or_cond3_i_fu_1032_p2 <= (tmp6_i_fu_1027_p2 and icmp6_fu_1021_p2);
    or_cond_i_fu_988_p2 <= (tmp_i_fu_983_p2 and notrhs_i_fu_971_p2);
    p_Result_2_i_i_fu_623_p5 <= (tmp_27_fu_615_p1 & MSB_V_1(3 downto 0));
    p_demorgan_fu_786_p2 <= (tmp_22_fu_780_p2 and tmp_21_fu_774_p2);

    pointNumber_blk_n_AW_assign_proc : process(m_axi_pointNumber_AWREADY, ap_CS_fsm_state2, exitcond1_i_fu_567_p2)
    begin
        if (((exitcond1_i_fu_567_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            pointNumber_blk_n_AW <= m_axi_pointNumber_AWREADY;
        else 
            pointNumber_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    pointNumber_blk_n_B_assign_proc : process(m_axi_pointNumber_BVALID, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            pointNumber_blk_n_B <= m_axi_pointNumber_BVALID;
        else 
            pointNumber_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    pointNumber_blk_n_W_assign_proc : process(m_axi_pointNumber_WREADY, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            pointNumber_blk_n_W <= m_axi_pointNumber_WREADY;
        else 
            pointNumber_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    pointNumber_offset3_s_fu_528_p4 <= pointNumber_offset_dout(31 downto 2);

    pointNumber_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, pointNumber_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pointNumber_offset_blk_n <= pointNumber_offset_empty_n;
        else 
            pointNumber_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pointNumber_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, hessianThreshold_V_empty_n, keyPoints_V_offset_empty_n, pointNumber_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (hessianThreshold_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (pointNumber_offset_empty_n = ap_const_logic_0) or (keyPoints_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pointNumber_offset_read <= ap_const_logic_1;
        else 
            pointNumber_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    rIndex_1_i_i_fu_601_p3 <= 
        rIndex_2_i_i_fu_595_p2 when (icmp3_fu_589_p2(0) = '1') else 
        ap_const_lv32_0;
    rIndex_2_i_i_fu_595_p2 <= std_logic_vector(unsigned(rIndex_i_i_reg_474) + unsigned(ap_const_lv32_1));
    r_V_i_i_fu_641_p4 <= p_Val2_i_i_fu_178(5 downto 2);
    r_i_i_fu_573_p2 <= std_logic_vector(unsigned(val_assign_i_i_reg_485) + unsigned(ap_const_lv10_1));
    ret_V_3_i_i_fu_661_p3 <= (tmp_27_fu_615_p1 & tmp_9_i_fu_655_p2);
    sext_cast_i_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_548_p4),33));
        sum_cast_i_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_fu_1422_p2),64));

    sum_i_fu_1422_p2 <= std_logic_vector(unsigned(sext_cast_i_reg_1504) + unsigned(tmp_94_i_cast_i_fu_1418_p1));
    tmp5_i_fu_1000_p2 <= (notlhs3_i_reg_1559 and grp_fu_512_p2);
    tmp6_i_fu_1027_p2 <= (notlhs3_i_reg_1559 and grp_fu_512_p2);
    tmp_10_fu_702_p2 <= std_logic_vector(signed(ap_const_lv3_5) - signed(Lo_assign_i_i_fu_678_p3));
    tmp_11_fu_708_p3 <= 
        Lo_assign_i_i_fu_678_p3 when (tmp_9_fu_696_p2(0) = '1') else 
        Hi_assign_i_i_fu_686_p2;
    tmp_11_i_fu_1478_p0 <= ap_const_lv14_317(11 - 1 downto 0);
    tmp_12_fu_716_p3 <= 
        Hi_assign_i_i_fu_686_p2 when (tmp_9_fu_696_p2(0) = '1') else 
        Lo_assign_i_i_fu_678_p3;
    tmp_12_i_fu_867_p2 <= std_logic_vector(unsigned(ap_const_lv14_945) + unsigned(tmp_11_i_fu_1478_p2));
    tmp_13_fu_724_p3 <= 
        tmp_10_fu_702_p2 when (tmp_9_fu_696_p2(0) = '1') else 
        Lo_assign_i_i_fu_678_p3;
    tmp_13_i_fu_872_p2 <= std_logic_vector(unsigned(ap_const_lv14_128A) + unsigned(tmp_11_i_fu_1478_p2));
        tmp_14_cast_i_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_i_fu_941_p2),64));

    tmp_14_fu_732_p2 <= std_logic_vector(signed(ap_const_lv3_5) - signed(tmp_11_fu_708_p3));
    tmp_14_i_fu_941_p2 <= std_logic_vector(signed(tmp_11_i_reg_1531) + signed(tmp_39_i_cast_i_fu_937_p1));
        tmp_15_cast_i_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_i_fu_951_p2),64));

    tmp_15_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_724_p3),6));
    tmp_15_i_fu_951_p2 <= std_logic_vector(unsigned(tmp_12_i_reg_1536) + unsigned(tmp_39_i_cast_i_fu_937_p1));
        tmp_16_cast_i_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_i_fu_961_p2),64));

    tmp_16_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_716_p3),6));
    tmp_16_i_fu_961_p2 <= std_logic_vector(unsigned(tmp_13_i_reg_1541) + unsigned(tmp_39_i_cast_i_fu_937_p1));
    tmp_17_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_732_p2),6));
    tmp_17_i_fu_1046_p1 <= tmp_17_i_fu_1046_p10(2 - 1 downto 0);
    tmp_17_i_fu_1046_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bRow_V_1),13));
    tmp_17_i_fu_1046_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv13_317) * unsigned(tmp_17_i_fu_1046_p1), 13));
    tmp_18_fu_750_p2 <= std_logic_vector(shift_left(unsigned(tmp_8_fu_692_p1),to_integer(unsigned('0' & tmp_15_fu_738_p1(6-1 downto 0)))));
    tmp_18_i_fu_1066_p2 <= std_logic_vector(unsigned(ap_const_lv13_945) + unsigned(tmp_17_i_reg_1616));
    tmp_19_cast_i_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_i_fu_1071_p2),64));
    
    tmp_19_fu_756_p4_proc : process(tmp_18_fu_750_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(6+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(6+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(6 - 1 downto 0);
    variable tmp_19_fu_756_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(6 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(6 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(6 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_5(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := tmp_18_fu_750_p2;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(6-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(6-1-unsigned(ap_const_lv32_5(3-1 downto 0)));
            for tmp_19_fu_756_p4_i in 0 to 6-1 loop
                v0_cpy(tmp_19_fu_756_p4_i) := tmp_18_fu_750_p2(6-1-tmp_19_fu_756_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(6-1 downto 0)))));
        res_mask := res_mask(6-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_19_fu_756_p4 <= resvalue(6-1 downto 0);
    end process;

    tmp_19_i_fu_1071_p2 <= std_logic_vector(unsigned(tmp_61_i_cast_i_fu_1062_p1) + unsigned(tmp_18_i_fu_1066_p2));
    tmp_20_cast_i_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_i_fu_1085_p2),64));
    tmp_20_fu_766_p3 <= 
        tmp_19_fu_756_p4 when (tmp_9_fu_696_p2(0) = '1') else 
        tmp_18_fu_750_p2;
    tmp_20_i_fu_1085_p2 <= std_logic_vector(unsigned(tmp_61_i_cast188_i_fu_1082_p1) + unsigned(tmp_33_reg_1622));
    tmp_21_cast_i_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_i_fu_1095_p2),64));
    tmp_21_fu_774_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv6_3F),to_integer(unsigned('0' & tmp_16_fu_742_p1(6-1 downto 0)))));
    tmp_21_i_fu_1095_p2 <= std_logic_vector(unsigned(tmp_39_i_cast189_i_reg_1588) + unsigned(tmp_33_reg_1622));
    tmp_22_cast_i_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_i_fu_1104_p2),64));
    tmp_22_fu_780_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv6_3F),to_integer(unsigned('0' & tmp_17_fu_746_p1(6-1 downto 0)))));
    tmp_22_i_fu_1104_p2 <= std_logic_vector(unsigned(tmp_39_i_cast190_i_reg_1578) + unsigned(tmp_18_i_reg_1643));
    tmp_23_fu_792_p2 <= (p_demorgan_fu_786_p2 xor ap_const_lv6_3F);
    tmp_23_i_fu_1113_p2 <= std_logic_vector(signed(ap_const_lv13_128A) + signed(tmp_17_i_reg_1616));
    tmp_24_cast_i_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_i_fu_1118_p2),64));
    tmp_24_fu_798_p2 <= (tmp_23_fu_792_p2 and p_Val2_i_i_fu_178);
    tmp_24_i_fu_1118_p2 <= std_logic_vector(unsigned(tmp_61_i_cast_i_reg_1634) + unsigned(tmp_23_i_fu_1113_p2));
    tmp_25_cast_i_fu_1133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_i_fu_1128_p2),64));
    tmp_25_fu_804_p2 <= (tmp_20_fu_766_p3 and p_demorgan_fu_786_p2);
    tmp_25_i_fu_1128_p2 <= std_logic_vector(unsigned(tmp_39_i_cast190_i_reg_1578) + unsigned(tmp_23_i_fu_1113_p2));
    tmp_26_cast_i_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_i_fu_1184_p2),64));
    tmp_26_fu_810_p2 <= (tmp_25_fu_804_p2 or tmp_24_fu_798_p2);
    tmp_26_i_fu_1184_p2 <= std_logic_vector(unsigned(tmp_65_i_cast_i_reg_1716) + unsigned(tmp_33_reg_1622));
    tmp_27_cast_i_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_i_fu_1193_p2),64));
    tmp_27_fu_615_p1 <= p_Val2_i_i_fu_178(2 - 1 downto 0);
    tmp_27_i_fu_1193_p2 <= std_logic_vector(unsigned(tmp_65_i_cast187_i_fu_1181_p1) + unsigned(tmp_18_i_reg_1643));
    tmp_28_cast_i_fu_1208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_i_fu_1203_p2),64));
    tmp_28_fu_651_p1 <= MSB_V_1(4 - 1 downto 0);
    tmp_28_i_fu_1203_p2 <= std_logic_vector(unsigned(tmp_65_i_cast187_i_fu_1181_p1) + unsigned(tmp_23_i_reg_1675));
    tmp_29_fu_825_p1 <= p_Val2_i_i_fu_178(2 - 1 downto 0);
    tmp_29_i_fu_1151_p1 <= tmp_29_i_fu_1151_p10(2 - 1 downto 0);
    tmp_29_i_fu_1151_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bRow_V_0),13));
    tmp_29_i_fu_1151_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv13_317) * unsigned(tmp_29_i_fu_1151_p1), 13));
    tmp_29_i_i_fu_609_p2 <= "1" when (unsigned(val_assign_i_i_reg_485) < unsigned(ap_const_lv10_3)) else "0";
    tmp_30_cast_i_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_i_fu_1171_p2),64));
    tmp_30_fu_821_p1 <= rIndex_1_i_i_fu_601_p3(14 - 1 downto 0);
    tmp_30_i_fu_1171_p2 <= std_logic_vector(unsigned(tmp_65_i_cast_i_fu_1167_p1) + unsigned(tmp_34_reg_1704));
    tmp_31_cast_i_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_i_fu_1213_p2),64));
    tmp_31_fu_883_p4 <= val_assign_i_i_reg_485(9 downto 3);
    tmp_31_i_fu_1213_p2 <= std_logic_vector(unsigned(tmp_61_i_cast188_i_reg_1654) + unsigned(tmp_34_reg_1704));
    tmp_32_cast_i_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_i_fu_1222_p2),64));
    tmp_32_fu_1011_p4 <= c_i_i_reg_497(9 downto 3);
    tmp_32_i_fu_1222_p2 <= std_logic_vector(unsigned(tmp_39_i_cast189_i_reg_1588) + unsigned(tmp_34_reg_1704));
    tmp_33_fu_1052_p1 <= tmp_17_i_fu_1046_p2(12 - 1 downto 0);
    tmp_33_i_fu_1231_p2 <= std_logic_vector(unsigned(ap_const_lv13_945) + unsigned(tmp_29_i_reg_1698));
    tmp_34_cast_i_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_i_fu_1236_p2),64));
    tmp_34_fu_1157_p1 <= tmp_29_i_fu_1151_p2(12 - 1 downto 0);
    tmp_34_i_fu_1236_p2 <= std_logic_vector(unsigned(tmp_65_i_cast187_i_fu_1181_p1) + unsigned(tmp_33_i_fu_1231_p2));
    tmp_34_i_i_fu_877_p2 <= "1" when (unsigned(val_assign_i_i_reg_485) < unsigned(ap_const_lv10_6)) else "0";
    tmp_35_cast_i_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_i_fu_1247_p2),64));
    tmp_35_fu_1317_p1 <= tmp_41_i_fu_1311_p2(12 - 1 downto 0);
    tmp_35_i_fu_1247_p2 <= std_logic_vector(unsigned(tmp_61_i_cast_i_reg_1634) + unsigned(tmp_33_i_fu_1231_p2));
    tmp_36_cast_i_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_i_fu_1257_p2),64));
    tmp_36_i_fu_1257_p2 <= std_logic_vector(unsigned(tmp_39_i_cast190_i_reg_1578) + unsigned(tmp_33_i_fu_1231_p2));
    tmp_37_i_fu_1267_p2 <= std_logic_vector(signed(ap_const_lv13_128A) + signed(tmp_29_i_reg_1698));
    tmp_38_cast_i_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_i_fu_1272_p2),64));
    tmp_38_i_fu_1272_p2 <= std_logic_vector(unsigned(tmp_65_i_cast187_i_fu_1181_p1) + unsigned(tmp_37_i_fu_1267_p2));
    tmp_39_cast_i_fu_1288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_i_fu_1283_p2),64));
    tmp_39_i_cast189_i_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_i_reg_497),12));
    tmp_39_i_cast190_i_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_i_reg_497),13));
    tmp_39_i_cast_i_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_i_reg_497),14));
    tmp_39_i_fu_1283_p2 <= std_logic_vector(unsigned(tmp_61_i_cast_i_reg_1634) + unsigned(tmp_37_i_fu_1267_p2));
    tmp_3_i_fu_1458_p4 <= ((val_assign_1_trunc_i_reg_1554 & val_assign_2_trunc_c_fu_1455_p1) & ap_const_lv2_0);
    tmp_40_cast_i_fu_1298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_i_fu_1293_p2),64));
    tmp_40_i_fu_1293_p2 <= std_logic_vector(unsigned(tmp_39_i_cast190_i_reg_1578) + unsigned(tmp_37_i_fu_1267_p2));
    tmp_41_i_fu_1311_p1 <= tmp_41_i_fu_1311_p10(2 - 1 downto 0);
    tmp_41_i_fu_1311_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bRow_V_2),13));
    tmp_41_i_fu_1311_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv13_317) * unsigned(tmp_41_i_fu_1311_p1), 13));
    tmp_42_cast_i_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_i_reg_1812),64));
    tmp_42_i_fu_1321_p2 <= std_logic_vector(unsigned(tmp_65_i_cast_i_reg_1716) + unsigned(tmp_35_fu_1317_p1));
    tmp_43_cast_i_fu_1340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_i_reg_1817),64));
    tmp_43_i_fu_1326_p2 <= std_logic_vector(unsigned(tmp_61_i_cast188_i_reg_1654) + unsigned(tmp_35_fu_1317_p1));
    tmp_44_cast_i_fu_1344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_i_reg_1822),64));
    tmp_44_i_fu_1331_p2 <= std_logic_vector(unsigned(tmp_39_i_cast189_i_reg_1588) + unsigned(tmp_35_fu_1317_p1));
    tmp_45_i_fu_1348_p2 <= std_logic_vector(unsigned(ap_const_lv13_945) + unsigned(tmp_41_i_reg_1806));
    tmp_45_i_i_fu_977_p2 <= "1" when (unsigned(c_i_i_reg_497) < unsigned(ap_const_lv10_314)) else "0";
    tmp_46_cast_i_fu_1358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_i_fu_1353_p2),64));
    tmp_46_i_fu_1353_p2 <= std_logic_vector(unsigned(tmp_65_i_cast187_i_reg_1727) + unsigned(tmp_45_i_fu_1348_p2));
    tmp_47_cast_i_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_i_fu_1363_p2),64));
    tmp_47_i_fu_1363_p2 <= std_logic_vector(unsigned(tmp_61_i_cast_i_reg_1634) + unsigned(tmp_45_i_fu_1348_p2));
    tmp_48_cast_i_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_i_fu_1373_p2),64));
    tmp_48_i_fu_1373_p2 <= std_logic_vector(unsigned(tmp_39_i_cast190_i_reg_1578) + unsigned(tmp_45_i_fu_1348_p2));
    tmp_49_i_fu_1383_p2 <= std_logic_vector(signed(ap_const_lv13_128A) + signed(tmp_41_i_reg_1806));
    tmp_50_cast_i_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_i_fu_1388_p2),64));
    tmp_50_i_fu_1388_p2 <= std_logic_vector(unsigned(tmp_65_i_cast187_i_reg_1727) + unsigned(tmp_49_i_fu_1383_p2));
    tmp_51_cast_i_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_i_fu_1398_p2),64));
    tmp_51_i_fu_1398_p2 <= std_logic_vector(unsigned(tmp_61_i_cast_i_reg_1634) + unsigned(tmp_49_i_fu_1383_p2));
    tmp_52_cast_i_fu_1413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_i_fu_1408_p2),64));
    tmp_52_i_fu_1408_p2 <= std_logic_vector(unsigned(tmp_39_i_cast190_i_reg_1578) + unsigned(tmp_49_i_fu_1383_p2));
    tmp_60_i_i_fu_1056_p2 <= std_logic_vector(signed(ap_const_lv10_3FF) + signed(c_i_i_reg_497));
    tmp_61_i_cast188_i_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_i_i_reg_1629),12));
    tmp_61_i_cast_i_fu_1062_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_i_i_fu_1056_p2),13));
    tmp_63_i_i_fu_1138_p2 <= "1" when (signed(N1_V_q0) > signed(hessianThreshold_V_r_reg_1499)) else "0";
    tmp_64_i_i_fu_1161_p2 <= std_logic_vector(signed(ap_const_lv10_3FE) + signed(c_i_i_reg_497));
    tmp_65_i_cast187_i_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_i_i_reg_1711),13));
    tmp_65_i_cast_i_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_i_i_fu_1161_p2),12));
    tmp_6_fu_579_p4 <= rIndex_i_i_reg_474(31 downto 1);
    tmp_6_i_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pointNumber_offset3_s_fu_528_p4),64));
    tmp_7_fu_674_p1 <= val_assign_i_i_reg_485(2 - 1 downto 0);
    tmp_8_fu_692_p1 <= val_assign_i_i_reg_485(6 - 1 downto 0);
    tmp_94_i_cast_i_fu_1418_p0 <= tmpPointNum;
        tmp_94_i_cast_i_fu_1418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_94_i_cast_i_fu_1418_p0),33));

    tmp_95_i_i_fu_1437_p0 <= tmpPointNum;
    tmp_95_i_i_fu_1437_p2 <= std_logic_vector(signed(tmp_95_i_i_fu_1437_p0) + signed(ap_const_lv32_1));
    tmp_9_fu_696_p2 <= "1" when (unsigned(Lo_assign_i_i_fu_678_p3) > unsigned(Hi_assign_i_i_fu_686_p2)) else "0";
    tmp_9_i_fu_655_p2 <= (tmp_28_fu_651_p1 or r_V_i_i_fu_641_p4);
    tmp_fu_548_p4 <= keyPoints_V_offset_dout(31 downto 2);
    tmp_i_fu_983_p2 <= (tmp_45_i_i_fu_977_p2 and notlhs_i_reg_1565);
    val_assign_1_trunc_i_fu_899_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(val_assign_i_i_reg_485));
    val_assign_2_trunc_c_fu_1455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_2_trunc_i_reg_1938),15));
    val_assign_2_trunc_i_fu_1449_p2 <= std_logic_vector(unsigned(c_i_i_reg_497) + unsigned(ap_const_lv10_4));
end behav;
