-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calcHaarPattern_x_y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sumBuf_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    sumBuf_ce0 : OUT STD_LOGIC;
    sumBuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sumBuf_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    sumBuf_ce1 : OUT STD_LOGIC;
    sumBuf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    box_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    box_0_V_ce0 : OUT STD_LOGIC;
    box_0_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    box_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    box_1_V_ce0 : OUT STD_LOGIC;
    box_1_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    box_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    box_2_V_ce0 : OUT STD_LOGIC;
    box_2_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    box_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    box_3_V_ce0 : OUT STD_LOGIC;
    box_3_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    box_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    box_4_V_ce0 : OUT STD_LOGIC;
    box_4_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    box_V_offset : IN STD_LOGIC_VECTOR (1 downto 0);
    sumBufIndex_V : IN STD_LOGIC_VECTOR (175 downto 0);
    rOffset : IN STD_LOGIC_VECTOR (5 downto 0);
    cOffset : IN STD_LOGIC_VECTOR (10 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calcHaarPattern_x_y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv27_7FFFFFF : STD_LOGIC_VECTOR (26 downto 0) := "111111111111111111111111111";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv8_AF : STD_LOGIC_VECTOR (7 downto 0) := "10101111";
    constant ap_const_lv176_lc_1 : STD_LOGIC_VECTOR (175 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_321 : STD_LOGIC_VECTOR (15 downto 0) := "0000001100100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_253_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_961 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast1_fu_259_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_cast1_reg_966 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_22_cast_fu_273_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_22_cast_reg_972 : STD_LOGIC_VECTOR (22 downto 0);
    signal kn_1_fu_283_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kn_1_reg_981 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_384_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_reg_1011 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Hi_assign_fu_461_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal Hi_assign_reg_1017 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_9_fu_467_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_9_reg_1022 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_116_fu_472_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_116_reg_1027 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_119_fu_476_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_119_reg_1032 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_142_fu_557_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_142_reg_1038 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hi_assign_3_fu_634_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal Hi_assign_3_reg_1044 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_16_fu_640_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_16_reg_1049 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_145_fu_645_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_145_reg_1054 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_148_fu_649_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_reg_1059 : STD_LOGIC_VECTOR (7 downto 0);
    signal box_4_V_load_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_133_fu_760_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_133_reg_1070 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_162_fu_871_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_162_reg_1075 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_935_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_1080 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_21_fu_893_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_21_fu_893_p2 : signal is "no";
    signal tmp_21_reg_1096 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_897_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_22_fu_897_p2 : signal is "no";
    signal tmp_22_reg_1101 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_18_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal r_V_s_fu_926_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_s_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal d_V_fu_930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_16_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal kn_reg_226 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_73_cast_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_cast_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_cast_fu_888_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_cast_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_83_cast_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_241_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_249_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal box_V_offset_cast_ca_fu_237_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast1_fu_259_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_263_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_263_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_267_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_41_fu_289_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_293_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_106_fu_325_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_fu_307_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_2_fu_335_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_344_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_fu_354_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_317_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_358_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_fu_366_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_107_fu_341_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_fu_376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_115_fu_408_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_3_fu_390_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_fu_418_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_4_fu_400_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_424_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_2_fu_432_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_27_cast_fu_440_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_6_fu_444_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_449_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_8_cast_fu_457_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_135_fu_498_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_5_fu_480_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal ret_V_6_fu_508_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_10_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_137_fu_517_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_138_fu_527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_490_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_139_fu_531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_140_fu_539_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_136_fu_514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_141_fu_549_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_144_fu_581_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_7_fu_563_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_13_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_8_fu_591_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_7_fu_573_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_3_fu_597_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_4_fu_605_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_53_cast_fu_613_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_14_fu_617_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_15_fu_622_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_15_cast_fu_630_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_7_fu_656_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal Lo_assign_fu_663_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hi_assign_cast_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_fu_673_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_117_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_689_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_123_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_120_fu_680_p4 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_122_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_124_fu_705_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_126_fu_720_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_127_fu_728_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_125_fu_713_p3 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_128_fu_734_p1 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_129_fu_738_p1 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_130_fu_742_p2 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_131_fu_748_p2 : STD_LOGIC_VECTOR (175 downto 0);
    signal p_Result_5_fu_754_p2 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_17_fu_767_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal Lo_assign_3_fu_774_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Hi_assign_3_cast_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_147_fu_784_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_146_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_150_fu_800_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_152_fu_811_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_149_fu_791_p4 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_151_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_153_fu_816_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_155_fu_831_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_156_fu_839_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_fu_824_p3 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_157_fu_845_p1 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_158_fu_849_p1 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_159_fu_853_p2 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_160_fu_859_p2 : STD_LOGIC_VECTOR (175 downto 0);
    signal p_Result_8_fu_865_p2 : STD_LOGIC_VECTOR (175 downto 0);
    signal tmp_11_fu_875_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_11_fu_875_p2 : signal is "no";
    signal tmp_12_fu_884_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp_12_fu_884_p2 : signal is "no";
    signal tmp_20_fu_940_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_915_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_935_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_20_fu_940_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component surf_Simplified_mbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    surf_Simplified_mbkb_U22 : component surf_Simplified_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_133_reg_1070,
        din1 => tmp_8_fu_935_p1,
        dout => tmp_8_fu_935_p2);

    surf_Simplified_mbkb_U23 : component surf_Simplified_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_162_reg_1075,
        din1 => tmp_20_fu_940_p1,
        dout => tmp_20_fu_940_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((exitcond_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= p_Val2_16_reg_214;
                end if; 
            end if;
        end if;
    end process;


    kn_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                kn_reg_226 <= kn_1_reg_981;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                kn_reg_226 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_16_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_16_reg_214 <= d_V_fu_930_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_16_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    Hi_assign_3_reg_1044(26 downto 3) <= Hi_assign_3_fu_634_p2(26 downto 3);
                    Hi_assign_reg_1017(26 downto 3) <= Hi_assign_fu_461_p2(26 downto 3);
                box_4_V_load_reg_1065 <= box_4_V_q0;
                tmp_113_reg_1011 <= tmp_113_fu_384_p2;
                tmp_116_reg_1027 <= tmp_116_fu_472_p1;
                    tmp_119_reg_1032(7 downto 3) <= tmp_119_fu_476_p1(7 downto 3);
                tmp_142_reg_1038 <= tmp_142_fu_557_p2;
                tmp_145_reg_1054 <= tmp_145_fu_645_p1;
                    tmp_148_reg_1059(7 downto 3) <= tmp_148_fu_649_p1(7 downto 3);
                tmp_16_reg_1049 <= tmp_16_fu_640_p2;
                tmp_9_reg_1022 <= tmp_9_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                kn_1_reg_981 <= kn_1_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                r_V_s_reg_1126 <= r_V_s_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_133_reg_1070 <= tmp_133_fu_760_p1;
                tmp_162_reg_1075 <= tmp_162_fu_871_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_18_reg_1116 <= tmp_18_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_21_reg_1096 <= tmp_21_fu_893_p2;
                tmp_22_reg_1101 <= tmp_22_fu_897_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_22_cast_reg_972 <= tmp_22_cast_fu_273_p1;
                tmp_cast1_reg_966 <= tmp_cast1_fu_259_p1;
                tmp_s_reg_961 <= tmp_s_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_8_reg_1080 <= tmp_8_fu_935_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_V_reg_1121 <= tmp_V_fu_920_p2;
            end if;
        end if;
    end process;
    Hi_assign_reg_1017(2 downto 0) <= "111";
    tmp_119_reg_1032(2 downto 0) <= "111";
    Hi_assign_3_reg_1044(2 downto 0) <= "111";
    tmp_148_reg_1059(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_277_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
        Hi_assign_3_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Hi_assign_3_reg_1044),32));

    Hi_assign_3_fu_634_p2 <= std_logic_vector(signed(tmp_15_cast_fu_630_p1) + signed(ap_const_lv27_7FFFFFF));
        Hi_assign_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Hi_assign_reg_1017),32));

    Hi_assign_fu_461_p2 <= std_logic_vector(signed(tmp_8_cast_fu_457_p1) + signed(ap_const_lv27_7FFFFFF));
        Lo_assign_3_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_767_p3),32));

        Lo_assign_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_656_p3),32));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_277_p2)
    begin
        if ((((exitcond_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_277_p2)
    begin
        if (((exitcond_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_277_p2, p_Val2_16_reg_214, ap_return_preg)
    begin
        if (((exitcond_fu_277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= p_Val2_16_reg_214;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    box_0_V_address0 <= tmp_73_cast_fu_298_p1(4 - 1 downto 0);

    box_0_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            box_0_V_ce0 <= ap_const_logic_1;
        else 
            box_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    box_1_V_address0 <= tmp_73_cast_fu_298_p1(4 - 1 downto 0);

    box_1_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            box_1_V_ce0 <= ap_const_logic_1;
        else 
            box_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    box_2_V_address0 <= tmp_73_cast_fu_298_p1(4 - 1 downto 0);

    box_2_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            box_2_V_ce0 <= ap_const_logic_1;
        else 
            box_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    box_3_V_address0 <= tmp_73_cast_fu_298_p1(4 - 1 downto 0);

    box_3_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            box_3_V_ce0 <= ap_const_logic_1;
        else 
            box_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    box_4_V_address0 <= tmp_73_cast_fu_298_p1(4 - 1 downto 0);

    box_4_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            box_4_V_ce0 <= ap_const_logic_1;
        else 
            box_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    box_V_offset_cast_ca_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(box_V_offset),5));
    d_V_fu_930_p2 <= std_logic_vector(unsigned(p_Val2_16_reg_214) + unsigned(r_V_s_reg_1126));
    exitcond_fu_277_p2 <= "1" when (kn_reg_226 = ap_const_lv2_3) else "0";
    kn_1_fu_283_p2 <= std_logic_vector(unsigned(kn_reg_226) + unsigned(ap_const_lv2_1));
    p_1_fu_424_p3 <= 
        ret_V_3_fu_390_p4 when (tmp_5_fu_412_p2(0) = '1') else 
        ret_V_4_fu_418_p2;
    p_2_fu_432_p3 <= 
        p_1_fu_424_p3 when (p_Result_4_fu_400_p3(0) = '1') else 
        ret_V_3_fu_390_p4;
    p_3_fu_597_p3 <= 
        ret_V_7_fu_563_p4 when (tmp_13_fu_585_p2(0) = '1') else 
        ret_V_8_fu_591_p2;
    p_4_fu_605_p3 <= 
        p_3_fu_597_p3 when (p_Result_7_fu_573_p3(0) = '1') else 
        ret_V_7_fu_563_p4;
    p_Result_4_fu_400_p3 <= box_3_V_q0(31 downto 31);
    p_Result_5_fu_754_p2 <= (tmp_131_fu_748_p2 and tmp_130_fu_742_p2);
    p_Result_6_fu_490_p3 <= box_0_V_q0(31 downto 31);
    p_Result_7_fu_573_p3 <= box_1_V_q0(31 downto 31);
    p_Result_8_fu_865_p2 <= (tmp_160_fu_859_p2 and tmp_159_fu_853_p2);
    p_Result_s_fu_317_p3 <= box_2_V_q0(31 downto 31);
    p_shl_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_241_p3),5));
    r_V_s_fu_926_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_V_reg_1121) * signed(box_4_V_load_reg_1065))), 32));
    ret_V_2_fu_335_p2 <= std_logic_vector(unsigned(ret_V_fu_307_p4) + unsigned(ap_const_lv22_1));
    ret_V_3_fu_390_p4 <= box_3_V_q0(31 downto 10);
    ret_V_4_fu_418_p2 <= std_logic_vector(unsigned(ret_V_3_fu_390_p4) + unsigned(ap_const_lv22_1));
    ret_V_5_fu_480_p4 <= box_0_V_q0(31 downto 10);
    ret_V_6_fu_508_p2 <= std_logic_vector(unsigned(ret_V_5_fu_480_p4) + unsigned(ap_const_lv22_1));
    ret_V_7_fu_563_p4 <= box_1_V_q0(31 downto 10);
    ret_V_8_fu_591_p2 <= std_logic_vector(unsigned(ret_V_7_fu_563_p4) + unsigned(ap_const_lv22_1));
    ret_V_fu_307_p4 <= box_2_V_q0(31 downto 10);

    sumBuf_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_77_cast_fu_879_p1, tmp_82_cast_fu_901_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sumBuf_address0 <= tmp_82_cast_fu_901_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sumBuf_address0 <= tmp_77_cast_fu_879_p1(15 - 1 downto 0);
        else 
            sumBuf_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    sumBuf_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_78_cast_fu_888_p1, tmp_83_cast_fu_905_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sumBuf_address1 <= tmp_83_cast_fu_905_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sumBuf_address1 <= tmp_78_cast_fu_888_p1(15 - 1 downto 0);
        else 
            sumBuf_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    sumBuf_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sumBuf_ce0 <= ap_const_logic_1;
        else 
            sumBuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sumBuf_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sumBuf_ce1 <= ap_const_logic_1;
        else 
            sumBuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_106_fu_325_p1 <= box_2_V_q0(10 - 1 downto 0);
    tmp_107_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cOffset),16));
    tmp_108_fu_344_p4 <= box_2_V_q0(25 downto 10);
    tmp_109_fu_354_p1 <= ret_V_2_fu_335_p2(16 - 1 downto 0);
    tmp_10_fu_502_p2 <= "1" when (tmp_135_fu_498_p1 = ap_const_lv10_0) else "0";
    tmp_110_fu_358_p3 <= 
        tmp_108_fu_344_p4 when (tmp_2_fu_329_p2(0) = '1') else 
        tmp_109_fu_354_p1;
    tmp_111_fu_366_p4 <= box_2_V_q0(25 downto 10);
    tmp_112_fu_376_p3 <= 
        tmp_110_fu_358_p3 when (p_Result_s_fu_317_p3(0) = '1') else 
        tmp_111_fu_366_p4;
    tmp_113_fu_384_p2 <= std_logic_vector(unsigned(tmp_107_fu_341_p1) + unsigned(tmp_112_fu_376_p3));
    tmp_115_fu_408_p1 <= box_3_V_q0(10 - 1 downto 0);
    tmp_116_fu_472_p1 <= tmp_9_fu_467_p2(5 - 1 downto 0);
    tmp_117_fu_667_p2 <= "1" when (unsigned(Lo_assign_fu_663_p1) > unsigned(Hi_assign_cast_fu_653_p1)) else "0";
    tmp_118_fu_673_p3 <= (tmp_116_reg_1027 & ap_const_lv3_0);
    tmp_119_fu_476_p1 <= Hi_assign_fu_461_p2(8 - 1 downto 0);
    tmp_11_fu_875_p2 <= std_logic_vector(signed(tmp_8_reg_1080) + signed(tmp_113_reg_1011));
    
    tmp_120_fu_680_p4_proc : process(sumBufIndex_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(176+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(176+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(176 - 1 downto 0);
    variable tmp_120_fu_680_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(176 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(176 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(176 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_AF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := sumBufIndex_V;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(176-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(176-1-unsigned(ap_const_lv32_AF(8-1 downto 0)));
            for tmp_120_fu_680_p4_i in 0 to 176-1 loop
                v0_cpy(tmp_120_fu_680_p4_i) := sumBufIndex_V(176-1-tmp_120_fu_680_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(176-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_120_fu_680_p4 <= resvalue(176-1 downto 0);
    end process;

    tmp_121_fu_689_p2 <= std_logic_vector(unsigned(tmp_118_fu_673_p3) - unsigned(tmp_119_reg_1032));
    tmp_122_fu_694_p2 <= std_logic_vector(signed(ap_const_lv8_AF) - signed(tmp_118_fu_673_p3));
    tmp_123_fu_700_p2 <= std_logic_vector(unsigned(tmp_119_reg_1032) - unsigned(tmp_118_fu_673_p3));
    tmp_124_fu_705_p3 <= 
        tmp_121_fu_689_p2 when (tmp_117_fu_667_p2(0) = '1') else 
        tmp_123_fu_700_p2;
    tmp_125_fu_713_p3 <= 
        tmp_120_fu_680_p4 when (tmp_117_fu_667_p2(0) = '1') else 
        sumBufIndex_V;
    tmp_126_fu_720_p3 <= 
        tmp_122_fu_694_p2 when (tmp_117_fu_667_p2(0) = '1') else 
        tmp_118_fu_673_p3;
    tmp_127_fu_728_p2 <= std_logic_vector(signed(ap_const_lv8_AF) - signed(tmp_124_fu_705_p3));
    tmp_128_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_fu_720_p3),176));
    tmp_129_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_728_p2),176));
    tmp_12_fu_884_p2 <= std_logic_vector(signed(tmp_8_reg_1080) + signed(tmp_142_reg_1038));
    tmp_130_fu_742_p2 <= std_logic_vector(shift_right(unsigned(tmp_125_fu_713_p3),to_integer(unsigned('0' & tmp_128_fu_734_p1(31-1 downto 0)))));
    tmp_131_fu_748_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv176_lc_1),to_integer(unsigned('0' & tmp_129_fu_738_p1(31-1 downto 0)))));
    tmp_133_fu_760_p1 <= p_Result_5_fu_754_p2(16 - 1 downto 0);
    tmp_135_fu_498_p1 <= box_0_V_q0(10 - 1 downto 0);
    tmp_136_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cOffset),16));
    tmp_137_fu_517_p4 <= box_0_V_q0(25 downto 10);
    tmp_138_fu_527_p1 <= ret_V_6_fu_508_p2(16 - 1 downto 0);
    tmp_139_fu_531_p3 <= 
        tmp_137_fu_517_p4 when (tmp_10_fu_502_p2(0) = '1') else 
        tmp_138_fu_527_p1;
    tmp_13_fu_585_p2 <= "1" when (tmp_144_fu_581_p1 = ap_const_lv10_0) else "0";
    tmp_140_fu_539_p4 <= box_0_V_q0(25 downto 10);
    tmp_141_fu_549_p3 <= 
        tmp_139_fu_531_p3 when (p_Result_6_fu_490_p3(0) = '1') else 
        tmp_140_fu_539_p4;
    tmp_142_fu_557_p2 <= std_logic_vector(unsigned(tmp_136_fu_514_p1) + unsigned(tmp_141_fu_549_p3));
    tmp_144_fu_581_p1 <= box_1_V_q0(10 - 1 downto 0);
    tmp_145_fu_645_p1 <= tmp_16_fu_640_p2(5 - 1 downto 0);
    tmp_146_fu_778_p2 <= "1" when (unsigned(Lo_assign_3_fu_774_p1) > unsigned(Hi_assign_3_cast_fu_764_p1)) else "0";
    tmp_147_fu_784_p3 <= (tmp_145_reg_1054 & ap_const_lv3_0);
    tmp_148_fu_649_p1 <= Hi_assign_3_fu_634_p2(8 - 1 downto 0);
    
    tmp_149_fu_791_p4_proc : process(sumBufIndex_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(176+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(176+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(176 - 1 downto 0);
    variable tmp_149_fu_791_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(176 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(176 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(176 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_AF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := sumBufIndex_V;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(176-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(176-1-unsigned(ap_const_lv32_AF(8-1 downto 0)));
            for tmp_149_fu_791_p4_i in 0 to 176-1 loop
                v0_cpy(tmp_149_fu_791_p4_i) := sumBufIndex_V(176-1-tmp_149_fu_791_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(176-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_149_fu_791_p4 <= resvalue(176-1 downto 0);
    end process;

    tmp_14_fu_617_p2 <= std_logic_vector(signed(tmp_53_cast_fu_613_p1) + signed(tmp_22_cast_reg_972));
    tmp_150_fu_800_p2 <= std_logic_vector(unsigned(tmp_147_fu_784_p3) - unsigned(tmp_148_reg_1059));
    tmp_151_fu_805_p2 <= std_logic_vector(signed(ap_const_lv8_AF) - signed(tmp_147_fu_784_p3));
    tmp_152_fu_811_p2 <= std_logic_vector(unsigned(tmp_148_reg_1059) - unsigned(tmp_147_fu_784_p3));
    tmp_153_fu_816_p3 <= 
        tmp_150_fu_800_p2 when (tmp_146_fu_778_p2(0) = '1') else 
        tmp_152_fu_811_p2;
    tmp_154_fu_824_p3 <= 
        tmp_149_fu_791_p4 when (tmp_146_fu_778_p2(0) = '1') else 
        sumBufIndex_V;
    tmp_155_fu_831_p3 <= 
        tmp_151_fu_805_p2 when (tmp_146_fu_778_p2(0) = '1') else 
        tmp_147_fu_784_p3;
    tmp_156_fu_839_p2 <= std_logic_vector(signed(ap_const_lv8_AF) - signed(tmp_153_fu_816_p3));
    tmp_157_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_155_fu_831_p3),176));
    tmp_158_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_839_p2),176));
    tmp_159_fu_853_p2 <= std_logic_vector(shift_right(unsigned(tmp_154_fu_824_p3),to_integer(unsigned('0' & tmp_157_fu_845_p1(31-1 downto 0)))));
        tmp_15_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_622_p3),27));

    tmp_15_fu_622_p3 <= (tmp_14_fu_617_p2 & ap_const_lv3_0);
    tmp_160_fu_859_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv176_lc_1),to_integer(unsigned('0' & tmp_158_fu_849_p1(31-1 downto 0)))));
    tmp_162_fu_871_p1 <= p_Result_8_fu_865_p2(16 - 1 downto 0);
    tmp_16_fu_640_p2 <= std_logic_vector(signed(tmp_cast1_reg_966) + signed(tmp_53_cast_fu_613_p1));
    tmp_17_fu_767_p3 <= (tmp_16_reg_1049 & ap_const_lv3_0);
    tmp_18_fu_909_p2 <= std_logic_vector(unsigned(sumBuf_q0) - unsigned(sumBuf_q1));
    tmp_19_fu_915_p2 <= std_logic_vector(unsigned(tmp_18_reg_1116) - unsigned(sumBuf_q0));
    tmp_1_fu_267_p2 <= std_logic_vector(signed(tmp_cast_fu_263_p1) + signed(ap_const_lv7_1));
    tmp_20_fu_940_p1 <= ap_const_lv16_321(11 - 1 downto 0);
    tmp_21_fu_893_p2 <= std_logic_vector(signed(tmp_20_fu_940_p2) + signed(tmp_113_reg_1011));
        tmp_22_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_267_p2),23));

    tmp_22_fu_897_p2 <= std_logic_vector(signed(tmp_20_fu_940_p2) + signed(tmp_142_reg_1038));
        tmp_27_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_2_fu_432_p3),23));

    tmp_2_fu_329_p2 <= "1" when (tmp_106_fu_325_p1 = ap_const_lv10_0) else "0";
    tmp_3_fu_293_p2 <= std_logic_vector(unsigned(tmp_s_reg_961) + unsigned(tmp_cast_41_fu_289_p1));
    tmp_4_fu_449_p3 <= (tmp_6_fu_444_p2 & ap_const_lv3_0);
        tmp_53_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_4_fu_605_p3),23));

    tmp_5_fu_412_p2 <= "1" when (tmp_115_fu_408_p1 = ap_const_lv10_0) else "0";
    tmp_6_fu_444_p2 <= std_logic_vector(signed(tmp_27_cast_fu_440_p1) + signed(tmp_22_cast_reg_972));
        tmp_73_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_293_p2),64));

    tmp_77_cast_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_875_p2),64));
    tmp_78_cast_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_884_p2),64));
    tmp_7_fu_656_p3 <= (tmp_9_reg_1022 & ap_const_lv3_0);
    tmp_82_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_1096),64));
    tmp_83_cast_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_1101),64));
        tmp_8_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_449_p3),27));

    tmp_8_fu_935_p1 <= ap_const_lv16_321(11 - 1 downto 0);
    tmp_9_fu_467_p2 <= std_logic_vector(signed(tmp_cast1_reg_966) + signed(tmp_27_cast_fu_440_p1));
    tmp_V_fu_920_p2 <= std_logic_vector(unsigned(tmp_19_fu_915_p2) + unsigned(sumBuf_q1));
    tmp_cast1_fu_259_p0 <= rOffset;
        tmp_cast1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_cast1_fu_259_p0),23));

    tmp_cast_41_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kn_reg_226),5));
    tmp_cast_fu_263_p0 <= rOffset;
        tmp_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_cast_fu_263_p0),7));

    tmp_fu_241_p3 <= (box_V_offset & ap_const_lv2_0);
    tmp_s_fu_253_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_249_p1) - unsigned(box_V_offset_cast_ca_fu_237_p1));
end behav;
