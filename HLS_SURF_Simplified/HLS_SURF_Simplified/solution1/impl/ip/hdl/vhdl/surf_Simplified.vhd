-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity surf_Simplified is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_THRESHOLD_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_THRESHOLD_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_KEYPOINTS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_KEYPOINTS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_KEYPOINTS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINTNUMBER_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_POINTNUMBER_ID_WIDTH : INTEGER := 1;
    C_M_AXI_POINTNUMBER_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINTNUMBER_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_POINTNUMBER_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINTNUMBER_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINTNUMBER_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_POINTNUMBER_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_KEYPOINTS_USER_VALUE : INTEGER := 0;
    C_M_AXI_KEYPOINTS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_KEYPOINTS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_POINTNUMBER_USER_VALUE : INTEGER := 0;
    C_M_AXI_POINTNUMBER_PROT_VALUE : INTEGER := 0;
    C_M_AXI_POINTNUMBER_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    s_axi_threshold_AWVALID : IN STD_LOGIC;
    s_axi_threshold_AWREADY : OUT STD_LOGIC;
    s_axi_threshold_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_THRESHOLD_ADDR_WIDTH-1 downto 0);
    s_axi_threshold_WVALID : IN STD_LOGIC;
    s_axi_threshold_WREADY : OUT STD_LOGIC;
    s_axi_threshold_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_THRESHOLD_DATA_WIDTH-1 downto 0);
    s_axi_threshold_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_THRESHOLD_DATA_WIDTH/8-1 downto 0);
    s_axi_threshold_ARVALID : IN STD_LOGIC;
    s_axi_threshold_ARREADY : OUT STD_LOGIC;
    s_axi_threshold_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_THRESHOLD_ADDR_WIDTH-1 downto 0);
    s_axi_threshold_RVALID : OUT STD_LOGIC;
    s_axi_threshold_RREADY : IN STD_LOGIC;
    s_axi_threshold_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_THRESHOLD_DATA_WIDTH-1 downto 0);
    s_axi_threshold_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_threshold_BVALID : OUT STD_LOGIC;
    s_axi_threshold_BREADY : IN STD_LOGIC;
    s_axi_threshold_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_AWVALID : OUT STD_LOGIC;
    m_axi_keyPoints_AWREADY : IN STD_LOGIC;
    m_axi_keyPoints_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_ADDR_WIDTH-1 downto 0);
    m_axi_keyPoints_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_keyPoints_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_AWUSER_WIDTH-1 downto 0);
    m_axi_keyPoints_WVALID : OUT STD_LOGIC;
    m_axi_keyPoints_WREADY : IN STD_LOGIC;
    m_axi_keyPoints_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_DATA_WIDTH-1 downto 0);
    m_axi_keyPoints_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_DATA_WIDTH/8-1 downto 0);
    m_axi_keyPoints_WLAST : OUT STD_LOGIC;
    m_axi_keyPoints_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_WUSER_WIDTH-1 downto 0);
    m_axi_keyPoints_ARVALID : OUT STD_LOGIC;
    m_axi_keyPoints_ARREADY : IN STD_LOGIC;
    m_axi_keyPoints_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_ADDR_WIDTH-1 downto 0);
    m_axi_keyPoints_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_keyPoints_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_keyPoints_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_keyPoints_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_ARUSER_WIDTH-1 downto 0);
    m_axi_keyPoints_RVALID : IN STD_LOGIC;
    m_axi_keyPoints_RREADY : OUT STD_LOGIC;
    m_axi_keyPoints_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_DATA_WIDTH-1 downto 0);
    m_axi_keyPoints_RLAST : IN STD_LOGIC;
    m_axi_keyPoints_RID : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_RUSER_WIDTH-1 downto 0);
    m_axi_keyPoints_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_BVALID : IN STD_LOGIC;
    m_axi_keyPoints_BREADY : OUT STD_LOGIC;
    m_axi_keyPoints_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_keyPoints_BID : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_ID_WIDTH-1 downto 0);
    m_axi_keyPoints_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_KEYPOINTS_BUSER_WIDTH-1 downto 0);
    m_axi_pointNumber_AWVALID : OUT STD_LOGIC;
    m_axi_pointNumber_AWREADY : IN STD_LOGIC;
    m_axi_pointNumber_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_ADDR_WIDTH-1 downto 0);
    m_axi_pointNumber_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_ID_WIDTH-1 downto 0);
    m_axi_pointNumber_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_pointNumber_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pointNumber_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pointNumber_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_AWUSER_WIDTH-1 downto 0);
    m_axi_pointNumber_WVALID : OUT STD_LOGIC;
    m_axi_pointNumber_WREADY : IN STD_LOGIC;
    m_axi_pointNumber_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_DATA_WIDTH-1 downto 0);
    m_axi_pointNumber_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_DATA_WIDTH/8-1 downto 0);
    m_axi_pointNumber_WLAST : OUT STD_LOGIC;
    m_axi_pointNumber_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_ID_WIDTH-1 downto 0);
    m_axi_pointNumber_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_WUSER_WIDTH-1 downto 0);
    m_axi_pointNumber_ARVALID : OUT STD_LOGIC;
    m_axi_pointNumber_ARREADY : IN STD_LOGIC;
    m_axi_pointNumber_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_ADDR_WIDTH-1 downto 0);
    m_axi_pointNumber_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_ID_WIDTH-1 downto 0);
    m_axi_pointNumber_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_pointNumber_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pointNumber_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_pointNumber_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_pointNumber_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_ARUSER_WIDTH-1 downto 0);
    m_axi_pointNumber_RVALID : IN STD_LOGIC;
    m_axi_pointNumber_RREADY : OUT STD_LOGIC;
    m_axi_pointNumber_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_DATA_WIDTH-1 downto 0);
    m_axi_pointNumber_RLAST : IN STD_LOGIC;
    m_axi_pointNumber_RID : IN STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_ID_WIDTH-1 downto 0);
    m_axi_pointNumber_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_RUSER_WIDTH-1 downto 0);
    m_axi_pointNumber_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_BVALID : IN STD_LOGIC;
    m_axi_pointNumber_BREADY : OUT STD_LOGIC;
    m_axi_pointNumber_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_pointNumber_BID : IN STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_ID_WIDTH-1 downto 0);
    m_axi_pointNumber_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_POINTNUMBER_BUSER_WIDTH-1 downto 0);
    video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    video_in_TVALID : IN STD_LOGIC;
    video_in_TREADY : OUT STD_LOGIC );
end;


architecture behav of surf_Simplified is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "surf_Simplified,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=76062569,HLS_SYN_TPT=76062562,HLS_SYN_MEM=88,HLS_SYN_DSP=12,HLS_SYN_FF=4943,HLS_SYN_LUT=15165,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal keyPoints_V : STD_LOGIC_VECTOR (31 downto 0);
    signal kpn : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal keyPoints_AWREADY : STD_LOGIC;
    signal keyPoints_WREADY : STD_LOGIC;
    signal keyPoints_ARREADY : STD_LOGIC;
    signal keyPoints_RVALID : STD_LOGIC;
    signal keyPoints_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal keyPoints_RLAST : STD_LOGIC;
    signal keyPoints_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal keyPoints_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal keyPoints_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal keyPoints_BVALID : STD_LOGIC;
    signal keyPoints_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal keyPoints_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal keyPoints_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pointNumber_AWREADY : STD_LOGIC;
    signal pointNumber_WREADY : STD_LOGIC;
    signal pointNumber_ARREADY : STD_LOGIC;
    signal pointNumber_RVALID : STD_LOGIC;
    signal pointNumber_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal pointNumber_RLAST : STD_LOGIC;
    signal pointNumber_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal pointNumber_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal pointNumber_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal pointNumber_BVALID : STD_LOGIC;
    signal pointNumber_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal pointNumber_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal pointNumber_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal surf_Simplified_entr_U0_ap_start : STD_LOGIC;
    signal surf_Simplified_entr_U0_ap_done : STD_LOGIC;
    signal surf_Simplified_entr_U0_ap_continue : STD_LOGIC;
    signal surf_Simplified_entr_U0_ap_idle : STD_LOGIC;
    signal surf_Simplified_entr_U0_ap_ready : STD_LOGIC;
    signal surf_Simplified_entr_U0_start_out : STD_LOGIC;
    signal surf_Simplified_entr_U0_start_write : STD_LOGIC;
    signal surf_Simplified_entr_U0_keyPoints_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal surf_Simplified_entr_U0_keyPoints_V_out_write : STD_LOGIC;
    signal surf_Simplified_entr_U0_kpn_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal surf_Simplified_entr_U0_kpn_out_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_out : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_video_in_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal integralImg_U0_ap_start : STD_LOGIC;
    signal integralImg_U0_ap_done : STD_LOGIC;
    signal integralImg_U0_ap_continue : STD_LOGIC;
    signal integralImg_U0_ap_idle : STD_LOGIC;
    signal integralImg_U0_ap_ready : STD_LOGIC;
    signal integralImg_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal integralImg_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal integralImg_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal integralImg_U0_sum_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal integralImg_U0_sum_V_write : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_ap_start : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_ap_done : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_ap_continue : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_ap_idle : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_this_assign_1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_codeRepl47_pro_U0_this_assign_1_out_out_write : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_AWVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_WVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_WLAST : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_keyPoints_V_RREADY : STD_LOGIC;
    signal HessianDetector_U0_m_axi_keyPoints_V_BREADY : STD_LOGIC;
    signal HessianDetector_U0_keyPoints_V_offset_read : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_AWVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_WVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_WLAST : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARVALID : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HessianDetector_U0_m_axi_pointNumber_RREADY : STD_LOGIC;
    signal HessianDetector_U0_m_axi_pointNumber_BREADY : STD_LOGIC;
    signal HessianDetector_U0_pointNumber_offset_read : STD_LOGIC;
    signal HessianDetector_U0_this_assign_1_loc_read : STD_LOGIC;
    signal HessianDetector_U0_sum_V_read : STD_LOGIC;
    signal HessianDetector_U0_ap_start : STD_LOGIC;
    signal HessianDetector_U0_ap_done : STD_LOGIC;
    signal HessianDetector_U0_ap_ready : STD_LOGIC;
    signal HessianDetector_U0_ap_idle : STD_LOGIC;
    signal HessianDetector_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal keyPoints_V_c_full_n : STD_LOGIC;
    signal keyPoints_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal keyPoints_V_c_empty_n : STD_LOGIC;
    signal kpn_c_full_n : STD_LOGIC;
    signal kpn_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal kpn_c_empty_n : STD_LOGIC;
    signal img_data_stream_0_V_full_n : STD_LOGIC;
    signal img_data_stream_0_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_data_stream_0_V_empty_n : STD_LOGIC;
    signal img_data_stream_1_V_full_n : STD_LOGIC;
    signal img_data_stream_1_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_data_stream_1_V_empty_n : STD_LOGIC;
    signal img_data_stream_2_V_full_n : STD_LOGIC;
    signal img_data_stream_2_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_data_stream_2_V_empty_n : STD_LOGIC;
    signal sum_V_full_n : STD_LOGIC;
    signal sum_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_empty_n : STD_LOGIC;
    signal this_assign_1_loc_c_full_n : STD_LOGIC;
    signal this_assign_1_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal this_assign_1_loc_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_surf_Simplified_entr_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_surf_Simplified_entr_U0_ap_ready : STD_LOGIC;
    signal surf_Simplified_entr_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_codeRepl47_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_codeRepl47_pro_U0_ap_ready : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_HessianDetector_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HessianDetector_U0_full_n : STD_LOGIC;
    signal start_for_HessianDetector_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_HessianDetector_U0_empty_n : STD_LOGIC;
    signal start_for_integralImg_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_integralImg_U0_full_n : STD_LOGIC;
    signal start_for_integralImg_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_integralImg_U0_empty_n : STD_LOGIC;
    signal integralImg_U0_start_full_n : STD_LOGIC;
    signal integralImg_U0_start_write : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_start_full_n : STD_LOGIC;
    signal Block_codeRepl47_pro_U0_start_write : STD_LOGIC;
    signal HessianDetector_U0_start_full_n : STD_LOGIC;
    signal HessianDetector_U0_start_write : STD_LOGIC;

    component surf_Simplified_entr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        keyPoints_V : IN STD_LOGIC_VECTOR (31 downto 0);
        kpn : IN STD_LOGIC_VECTOR (31 downto 0);
        keyPoints_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        keyPoints_V_out_full_n : IN STD_LOGIC;
        keyPoints_V_out_write : OUT STD_LOGIC;
        kpn_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        kpn_out_full_n : IN STD_LOGIC;
        kpn_out_write : OUT STD_LOGIC );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        video_in_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        video_in_TVALID : IN STD_LOGIC;
        video_in_TREADY : OUT STD_LOGIC;
        video_in_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        video_in_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        video_in_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        video_in_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component integralImg IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        sum_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_V_full_n : IN STD_LOGIC;
        sum_V_write : OUT STD_LOGIC );
    end component;


    component Block_codeRepl47_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        this_assign_1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        this_assign_1_out_out_full_n : IN STD_LOGIC;
        this_assign_1_out_out_write : OUT STD_LOGIC );
    end component;


    component HessianDetector IS
    port (
        m_axi_keyPoints_V_AWVALID : OUT STD_LOGIC;
        m_axi_keyPoints_V_AWREADY : IN STD_LOGIC;
        m_axi_keyPoints_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_keyPoints_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_keyPoints_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_WVALID : OUT STD_LOGIC;
        m_axi_keyPoints_V_WREADY : IN STD_LOGIC;
        m_axi_keyPoints_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_WLAST : OUT STD_LOGIC;
        m_axi_keyPoints_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_ARVALID : OUT STD_LOGIC;
        m_axi_keyPoints_V_ARREADY : IN STD_LOGIC;
        m_axi_keyPoints_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_keyPoints_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_keyPoints_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_keyPoints_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_RVALID : IN STD_LOGIC;
        m_axi_keyPoints_V_RREADY : OUT STD_LOGIC;
        m_axi_keyPoints_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_keyPoints_V_RLAST : IN STD_LOGIC;
        m_axi_keyPoints_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_BVALID : IN STD_LOGIC;
        m_axi_keyPoints_V_BREADY : OUT STD_LOGIC;
        m_axi_keyPoints_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_keyPoints_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_keyPoints_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        keyPoints_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        keyPoints_V_offset_empty_n : IN STD_LOGIC;
        keyPoints_V_offset_read : OUT STD_LOGIC;
        m_axi_pointNumber_AWVALID : OUT STD_LOGIC;
        m_axi_pointNumber_AWREADY : IN STD_LOGIC;
        m_axi_pointNumber_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pointNumber_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pointNumber_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_WVALID : OUT STD_LOGIC;
        m_axi_pointNumber_WREADY : IN STD_LOGIC;
        m_axi_pointNumber_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_WLAST : OUT STD_LOGIC;
        m_axi_pointNumber_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_ARVALID : OUT STD_LOGIC;
        m_axi_pointNumber_ARREADY : IN STD_LOGIC;
        m_axi_pointNumber_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pointNumber_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_pointNumber_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_pointNumber_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_RVALID : IN STD_LOGIC;
        m_axi_pointNumber_RREADY : OUT STD_LOGIC;
        m_axi_pointNumber_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_pointNumber_RLAST : IN STD_LOGIC;
        m_axi_pointNumber_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_BVALID : IN STD_LOGIC;
        m_axi_pointNumber_BREADY : OUT STD_LOGIC;
        m_axi_pointNumber_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_pointNumber_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_pointNumber_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        pointNumber_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        pointNumber_offset_empty_n : IN STD_LOGIC;
        pointNumber_offset_read : OUT STD_LOGIC;
        this_assign_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        this_assign_1_loc_empty_n : IN STD_LOGIC;
        this_assign_1_loc_read : OUT STD_LOGIC;
        sum_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_V_empty_n : IN STD_LOGIC;
        sum_V_read : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_HessianxdS IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_integrayd2 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component surf_Simplified_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        keyPoints_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        kpn : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component surf_Simplified_threshold_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        threshold : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component surf_Simplified_keyPoints_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component surf_Simplified_pointNumber_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    surf_Simplified_AXILiteS_s_axi_U : component surf_Simplified_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        keyPoints_V => keyPoints_V,
        kpn => kpn);

    surf_Simplified_threshold_s_axi_U : component surf_Simplified_threshold_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_THRESHOLD_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_THRESHOLD_DATA_WIDTH)
    port map (
        AWVALID => s_axi_threshold_AWVALID,
        AWREADY => s_axi_threshold_AWREADY,
        AWADDR => s_axi_threshold_AWADDR,
        WVALID => s_axi_threshold_WVALID,
        WREADY => s_axi_threshold_WREADY,
        WDATA => s_axi_threshold_WDATA,
        WSTRB => s_axi_threshold_WSTRB,
        ARVALID => s_axi_threshold_ARVALID,
        ARREADY => s_axi_threshold_ARREADY,
        ARADDR => s_axi_threshold_ARADDR,
        RVALID => s_axi_threshold_RVALID,
        RREADY => s_axi_threshold_RREADY,
        RDATA => s_axi_threshold_RDATA,
        RRESP => s_axi_threshold_RRESP,
        BVALID => s_axi_threshold_BVALID,
        BREADY => s_axi_threshold_BREADY,
        BRESP => s_axi_threshold_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        threshold => threshold);

    surf_Simplified_keyPoints_m_axi_U : component surf_Simplified_keyPoints_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_KEYPOINTS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_KEYPOINTS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_KEYPOINTS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_KEYPOINTS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_KEYPOINTS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_KEYPOINTS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_KEYPOINTS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_KEYPOINTS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_KEYPOINTS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_KEYPOINTS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_KEYPOINTS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_keyPoints_AWVALID,
        AWREADY => m_axi_keyPoints_AWREADY,
        AWADDR => m_axi_keyPoints_AWADDR,
        AWID => m_axi_keyPoints_AWID,
        AWLEN => m_axi_keyPoints_AWLEN,
        AWSIZE => m_axi_keyPoints_AWSIZE,
        AWBURST => m_axi_keyPoints_AWBURST,
        AWLOCK => m_axi_keyPoints_AWLOCK,
        AWCACHE => m_axi_keyPoints_AWCACHE,
        AWPROT => m_axi_keyPoints_AWPROT,
        AWQOS => m_axi_keyPoints_AWQOS,
        AWREGION => m_axi_keyPoints_AWREGION,
        AWUSER => m_axi_keyPoints_AWUSER,
        WVALID => m_axi_keyPoints_WVALID,
        WREADY => m_axi_keyPoints_WREADY,
        WDATA => m_axi_keyPoints_WDATA,
        WSTRB => m_axi_keyPoints_WSTRB,
        WLAST => m_axi_keyPoints_WLAST,
        WID => m_axi_keyPoints_WID,
        WUSER => m_axi_keyPoints_WUSER,
        ARVALID => m_axi_keyPoints_ARVALID,
        ARREADY => m_axi_keyPoints_ARREADY,
        ARADDR => m_axi_keyPoints_ARADDR,
        ARID => m_axi_keyPoints_ARID,
        ARLEN => m_axi_keyPoints_ARLEN,
        ARSIZE => m_axi_keyPoints_ARSIZE,
        ARBURST => m_axi_keyPoints_ARBURST,
        ARLOCK => m_axi_keyPoints_ARLOCK,
        ARCACHE => m_axi_keyPoints_ARCACHE,
        ARPROT => m_axi_keyPoints_ARPROT,
        ARQOS => m_axi_keyPoints_ARQOS,
        ARREGION => m_axi_keyPoints_ARREGION,
        ARUSER => m_axi_keyPoints_ARUSER,
        RVALID => m_axi_keyPoints_RVALID,
        RREADY => m_axi_keyPoints_RREADY,
        RDATA => m_axi_keyPoints_RDATA,
        RLAST => m_axi_keyPoints_RLAST,
        RID => m_axi_keyPoints_RID,
        RUSER => m_axi_keyPoints_RUSER,
        RRESP => m_axi_keyPoints_RRESP,
        BVALID => m_axi_keyPoints_BVALID,
        BREADY => m_axi_keyPoints_BREADY,
        BRESP => m_axi_keyPoints_BRESP,
        BID => m_axi_keyPoints_BID,
        BUSER => m_axi_keyPoints_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => keyPoints_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => keyPoints_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => keyPoints_RDATA,
        I_RID => keyPoints_RID,
        I_RUSER => keyPoints_RUSER,
        I_RRESP => keyPoints_RRESP,
        I_RLAST => keyPoints_RLAST,
        I_AWVALID => HessianDetector_U0_m_axi_keyPoints_V_AWVALID,
        I_AWREADY => keyPoints_AWREADY,
        I_AWADDR => HessianDetector_U0_m_axi_keyPoints_V_AWADDR,
        I_AWID => HessianDetector_U0_m_axi_keyPoints_V_AWID,
        I_AWLEN => HessianDetector_U0_m_axi_keyPoints_V_AWLEN,
        I_AWSIZE => HessianDetector_U0_m_axi_keyPoints_V_AWSIZE,
        I_AWLOCK => HessianDetector_U0_m_axi_keyPoints_V_AWLOCK,
        I_AWCACHE => HessianDetector_U0_m_axi_keyPoints_V_AWCACHE,
        I_AWQOS => HessianDetector_U0_m_axi_keyPoints_V_AWQOS,
        I_AWPROT => HessianDetector_U0_m_axi_keyPoints_V_AWPROT,
        I_AWUSER => HessianDetector_U0_m_axi_keyPoints_V_AWUSER,
        I_AWBURST => HessianDetector_U0_m_axi_keyPoints_V_AWBURST,
        I_AWREGION => HessianDetector_U0_m_axi_keyPoints_V_AWREGION,
        I_WVALID => HessianDetector_U0_m_axi_keyPoints_V_WVALID,
        I_WREADY => keyPoints_WREADY,
        I_WDATA => HessianDetector_U0_m_axi_keyPoints_V_WDATA,
        I_WID => HessianDetector_U0_m_axi_keyPoints_V_WID,
        I_WUSER => HessianDetector_U0_m_axi_keyPoints_V_WUSER,
        I_WLAST => HessianDetector_U0_m_axi_keyPoints_V_WLAST,
        I_WSTRB => HessianDetector_U0_m_axi_keyPoints_V_WSTRB,
        I_BVALID => keyPoints_BVALID,
        I_BREADY => HessianDetector_U0_m_axi_keyPoints_V_BREADY,
        I_BRESP => keyPoints_BRESP,
        I_BID => keyPoints_BID,
        I_BUSER => keyPoints_BUSER);

    surf_Simplified_pointNumber_m_axi_U : component surf_Simplified_pointNumber_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_POINTNUMBER_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_POINTNUMBER_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_POINTNUMBER_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_POINTNUMBER_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_POINTNUMBER_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_POINTNUMBER_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_POINTNUMBER_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_POINTNUMBER_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_POINTNUMBER_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_POINTNUMBER_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_POINTNUMBER_CACHE_VALUE)
    port map (
        AWVALID => m_axi_pointNumber_AWVALID,
        AWREADY => m_axi_pointNumber_AWREADY,
        AWADDR => m_axi_pointNumber_AWADDR,
        AWID => m_axi_pointNumber_AWID,
        AWLEN => m_axi_pointNumber_AWLEN,
        AWSIZE => m_axi_pointNumber_AWSIZE,
        AWBURST => m_axi_pointNumber_AWBURST,
        AWLOCK => m_axi_pointNumber_AWLOCK,
        AWCACHE => m_axi_pointNumber_AWCACHE,
        AWPROT => m_axi_pointNumber_AWPROT,
        AWQOS => m_axi_pointNumber_AWQOS,
        AWREGION => m_axi_pointNumber_AWREGION,
        AWUSER => m_axi_pointNumber_AWUSER,
        WVALID => m_axi_pointNumber_WVALID,
        WREADY => m_axi_pointNumber_WREADY,
        WDATA => m_axi_pointNumber_WDATA,
        WSTRB => m_axi_pointNumber_WSTRB,
        WLAST => m_axi_pointNumber_WLAST,
        WID => m_axi_pointNumber_WID,
        WUSER => m_axi_pointNumber_WUSER,
        ARVALID => m_axi_pointNumber_ARVALID,
        ARREADY => m_axi_pointNumber_ARREADY,
        ARADDR => m_axi_pointNumber_ARADDR,
        ARID => m_axi_pointNumber_ARID,
        ARLEN => m_axi_pointNumber_ARLEN,
        ARSIZE => m_axi_pointNumber_ARSIZE,
        ARBURST => m_axi_pointNumber_ARBURST,
        ARLOCK => m_axi_pointNumber_ARLOCK,
        ARCACHE => m_axi_pointNumber_ARCACHE,
        ARPROT => m_axi_pointNumber_ARPROT,
        ARQOS => m_axi_pointNumber_ARQOS,
        ARREGION => m_axi_pointNumber_ARREGION,
        ARUSER => m_axi_pointNumber_ARUSER,
        RVALID => m_axi_pointNumber_RVALID,
        RREADY => m_axi_pointNumber_RREADY,
        RDATA => m_axi_pointNumber_RDATA,
        RLAST => m_axi_pointNumber_RLAST,
        RID => m_axi_pointNumber_RID,
        RUSER => m_axi_pointNumber_RUSER,
        RRESP => m_axi_pointNumber_RRESP,
        BVALID => m_axi_pointNumber_BVALID,
        BREADY => m_axi_pointNumber_BREADY,
        BRESP => m_axi_pointNumber_BRESP,
        BID => m_axi_pointNumber_BID,
        BUSER => m_axi_pointNumber_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => pointNumber_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => pointNumber_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => pointNumber_RDATA,
        I_RID => pointNumber_RID,
        I_RUSER => pointNumber_RUSER,
        I_RRESP => pointNumber_RRESP,
        I_RLAST => pointNumber_RLAST,
        I_AWVALID => HessianDetector_U0_m_axi_pointNumber_AWVALID,
        I_AWREADY => pointNumber_AWREADY,
        I_AWADDR => HessianDetector_U0_m_axi_pointNumber_AWADDR,
        I_AWID => HessianDetector_U0_m_axi_pointNumber_AWID,
        I_AWLEN => HessianDetector_U0_m_axi_pointNumber_AWLEN,
        I_AWSIZE => HessianDetector_U0_m_axi_pointNumber_AWSIZE,
        I_AWLOCK => HessianDetector_U0_m_axi_pointNumber_AWLOCK,
        I_AWCACHE => HessianDetector_U0_m_axi_pointNumber_AWCACHE,
        I_AWQOS => HessianDetector_U0_m_axi_pointNumber_AWQOS,
        I_AWPROT => HessianDetector_U0_m_axi_pointNumber_AWPROT,
        I_AWUSER => HessianDetector_U0_m_axi_pointNumber_AWUSER,
        I_AWBURST => HessianDetector_U0_m_axi_pointNumber_AWBURST,
        I_AWREGION => HessianDetector_U0_m_axi_pointNumber_AWREGION,
        I_WVALID => HessianDetector_U0_m_axi_pointNumber_WVALID,
        I_WREADY => pointNumber_WREADY,
        I_WDATA => HessianDetector_U0_m_axi_pointNumber_WDATA,
        I_WID => HessianDetector_U0_m_axi_pointNumber_WID,
        I_WUSER => HessianDetector_U0_m_axi_pointNumber_WUSER,
        I_WLAST => HessianDetector_U0_m_axi_pointNumber_WLAST,
        I_WSTRB => HessianDetector_U0_m_axi_pointNumber_WSTRB,
        I_BVALID => pointNumber_BVALID,
        I_BREADY => HessianDetector_U0_m_axi_pointNumber_BREADY,
        I_BRESP => pointNumber_BRESP,
        I_BID => pointNumber_BID,
        I_BUSER => pointNumber_BUSER);

    surf_Simplified_entr_U0 : component surf_Simplified_entr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => surf_Simplified_entr_U0_ap_start,
        start_full_n => start_for_HessianDetector_U0_full_n,
        ap_done => surf_Simplified_entr_U0_ap_done,
        ap_continue => surf_Simplified_entr_U0_ap_continue,
        ap_idle => surf_Simplified_entr_U0_ap_idle,
        ap_ready => surf_Simplified_entr_U0_ap_ready,
        start_out => surf_Simplified_entr_U0_start_out,
        start_write => surf_Simplified_entr_U0_start_write,
        keyPoints_V => keyPoints_V,
        kpn => kpn,
        keyPoints_V_out_din => surf_Simplified_entr_U0_keyPoints_V_out_din,
        keyPoints_V_out_full_n => keyPoints_V_c_full_n,
        keyPoints_V_out_write => surf_Simplified_entr_U0_keyPoints_V_out_write,
        kpn_out_din => surf_Simplified_entr_U0_kpn_out_din,
        kpn_out_full_n => kpn_c_full_n,
        kpn_out_write => surf_Simplified_entr_U0_kpn_out_write);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        start_full_n => start_for_integralImg_U0_full_n,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        start_out => AXIvideo2Mat_U0_start_out,
        start_write => AXIvideo2Mat_U0_start_write,
        video_in_TDATA => video_in_TDATA,
        video_in_TVALID => video_in_TVALID,
        video_in_TREADY => AXIvideo2Mat_U0_video_in_TREADY,
        video_in_TKEEP => video_in_TKEEP,
        video_in_TSTRB => video_in_TSTRB,
        video_in_TUSER => video_in_TUSER,
        video_in_TLAST => video_in_TLAST,
        video_in_TID => video_in_TID,
        video_in_TDEST => video_in_TDEST,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_data_stream_0_V_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_data_stream_1_V_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_data_stream_2_V_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write);

    integralImg_U0 : component integralImg
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => integralImg_U0_ap_start,
        ap_done => integralImg_U0_ap_done,
        ap_continue => integralImg_U0_ap_continue,
        ap_idle => integralImg_U0_ap_idle,
        ap_ready => integralImg_U0_ap_ready,
        img_data_stream_0_V_dout => img_data_stream_0_V_dout,
        img_data_stream_0_V_empty_n => img_data_stream_0_V_empty_n,
        img_data_stream_0_V_read => integralImg_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_data_stream_1_V_dout,
        img_data_stream_1_V_empty_n => img_data_stream_1_V_empty_n,
        img_data_stream_1_V_read => integralImg_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_data_stream_2_V_dout,
        img_data_stream_2_V_empty_n => img_data_stream_2_V_empty_n,
        img_data_stream_2_V_read => integralImg_U0_img_data_stream_2_V_read,
        sum_V_din => integralImg_U0_sum_V_din,
        sum_V_full_n => sum_V_full_n,
        sum_V_write => integralImg_U0_sum_V_write);

    Block_codeRepl47_pro_U0 : component Block_codeRepl47_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_codeRepl47_pro_U0_ap_start,
        ap_done => Block_codeRepl47_pro_U0_ap_done,
        ap_continue => Block_codeRepl47_pro_U0_ap_continue,
        ap_idle => Block_codeRepl47_pro_U0_ap_idle,
        ap_ready => Block_codeRepl47_pro_U0_ap_ready,
        threshold => threshold,
        this_assign_1_out_out_din => Block_codeRepl47_pro_U0_this_assign_1_out_out_din,
        this_assign_1_out_out_full_n => this_assign_1_loc_c_full_n,
        this_assign_1_out_out_write => Block_codeRepl47_pro_U0_this_assign_1_out_out_write);

    HessianDetector_U0 : component HessianDetector
    port map (
        m_axi_keyPoints_V_AWVALID => HessianDetector_U0_m_axi_keyPoints_V_AWVALID,
        m_axi_keyPoints_V_AWREADY => keyPoints_AWREADY,
        m_axi_keyPoints_V_AWADDR => HessianDetector_U0_m_axi_keyPoints_V_AWADDR,
        m_axi_keyPoints_V_AWID => HessianDetector_U0_m_axi_keyPoints_V_AWID,
        m_axi_keyPoints_V_AWLEN => HessianDetector_U0_m_axi_keyPoints_V_AWLEN,
        m_axi_keyPoints_V_AWSIZE => HessianDetector_U0_m_axi_keyPoints_V_AWSIZE,
        m_axi_keyPoints_V_AWBURST => HessianDetector_U0_m_axi_keyPoints_V_AWBURST,
        m_axi_keyPoints_V_AWLOCK => HessianDetector_U0_m_axi_keyPoints_V_AWLOCK,
        m_axi_keyPoints_V_AWCACHE => HessianDetector_U0_m_axi_keyPoints_V_AWCACHE,
        m_axi_keyPoints_V_AWPROT => HessianDetector_U0_m_axi_keyPoints_V_AWPROT,
        m_axi_keyPoints_V_AWQOS => HessianDetector_U0_m_axi_keyPoints_V_AWQOS,
        m_axi_keyPoints_V_AWREGION => HessianDetector_U0_m_axi_keyPoints_V_AWREGION,
        m_axi_keyPoints_V_AWUSER => HessianDetector_U0_m_axi_keyPoints_V_AWUSER,
        m_axi_keyPoints_V_WVALID => HessianDetector_U0_m_axi_keyPoints_V_WVALID,
        m_axi_keyPoints_V_WREADY => keyPoints_WREADY,
        m_axi_keyPoints_V_WDATA => HessianDetector_U0_m_axi_keyPoints_V_WDATA,
        m_axi_keyPoints_V_WSTRB => HessianDetector_U0_m_axi_keyPoints_V_WSTRB,
        m_axi_keyPoints_V_WLAST => HessianDetector_U0_m_axi_keyPoints_V_WLAST,
        m_axi_keyPoints_V_WID => HessianDetector_U0_m_axi_keyPoints_V_WID,
        m_axi_keyPoints_V_WUSER => HessianDetector_U0_m_axi_keyPoints_V_WUSER,
        m_axi_keyPoints_V_ARVALID => HessianDetector_U0_m_axi_keyPoints_V_ARVALID,
        m_axi_keyPoints_V_ARREADY => ap_const_logic_0,
        m_axi_keyPoints_V_ARADDR => HessianDetector_U0_m_axi_keyPoints_V_ARADDR,
        m_axi_keyPoints_V_ARID => HessianDetector_U0_m_axi_keyPoints_V_ARID,
        m_axi_keyPoints_V_ARLEN => HessianDetector_U0_m_axi_keyPoints_V_ARLEN,
        m_axi_keyPoints_V_ARSIZE => HessianDetector_U0_m_axi_keyPoints_V_ARSIZE,
        m_axi_keyPoints_V_ARBURST => HessianDetector_U0_m_axi_keyPoints_V_ARBURST,
        m_axi_keyPoints_V_ARLOCK => HessianDetector_U0_m_axi_keyPoints_V_ARLOCK,
        m_axi_keyPoints_V_ARCACHE => HessianDetector_U0_m_axi_keyPoints_V_ARCACHE,
        m_axi_keyPoints_V_ARPROT => HessianDetector_U0_m_axi_keyPoints_V_ARPROT,
        m_axi_keyPoints_V_ARQOS => HessianDetector_U0_m_axi_keyPoints_V_ARQOS,
        m_axi_keyPoints_V_ARREGION => HessianDetector_U0_m_axi_keyPoints_V_ARREGION,
        m_axi_keyPoints_V_ARUSER => HessianDetector_U0_m_axi_keyPoints_V_ARUSER,
        m_axi_keyPoints_V_RVALID => ap_const_logic_0,
        m_axi_keyPoints_V_RREADY => HessianDetector_U0_m_axi_keyPoints_V_RREADY,
        m_axi_keyPoints_V_RDATA => ap_const_lv32_0,
        m_axi_keyPoints_V_RLAST => ap_const_logic_0,
        m_axi_keyPoints_V_RID => ap_const_lv1_0,
        m_axi_keyPoints_V_RUSER => ap_const_lv1_0,
        m_axi_keyPoints_V_RRESP => ap_const_lv2_0,
        m_axi_keyPoints_V_BVALID => keyPoints_BVALID,
        m_axi_keyPoints_V_BREADY => HessianDetector_U0_m_axi_keyPoints_V_BREADY,
        m_axi_keyPoints_V_BRESP => keyPoints_BRESP,
        m_axi_keyPoints_V_BID => keyPoints_BID,
        m_axi_keyPoints_V_BUSER => keyPoints_BUSER,
        keyPoints_V_offset_dout => keyPoints_V_c_dout,
        keyPoints_V_offset_empty_n => keyPoints_V_c_empty_n,
        keyPoints_V_offset_read => HessianDetector_U0_keyPoints_V_offset_read,
        m_axi_pointNumber_AWVALID => HessianDetector_U0_m_axi_pointNumber_AWVALID,
        m_axi_pointNumber_AWREADY => pointNumber_AWREADY,
        m_axi_pointNumber_AWADDR => HessianDetector_U0_m_axi_pointNumber_AWADDR,
        m_axi_pointNumber_AWID => HessianDetector_U0_m_axi_pointNumber_AWID,
        m_axi_pointNumber_AWLEN => HessianDetector_U0_m_axi_pointNumber_AWLEN,
        m_axi_pointNumber_AWSIZE => HessianDetector_U0_m_axi_pointNumber_AWSIZE,
        m_axi_pointNumber_AWBURST => HessianDetector_U0_m_axi_pointNumber_AWBURST,
        m_axi_pointNumber_AWLOCK => HessianDetector_U0_m_axi_pointNumber_AWLOCK,
        m_axi_pointNumber_AWCACHE => HessianDetector_U0_m_axi_pointNumber_AWCACHE,
        m_axi_pointNumber_AWPROT => HessianDetector_U0_m_axi_pointNumber_AWPROT,
        m_axi_pointNumber_AWQOS => HessianDetector_U0_m_axi_pointNumber_AWQOS,
        m_axi_pointNumber_AWREGION => HessianDetector_U0_m_axi_pointNumber_AWREGION,
        m_axi_pointNumber_AWUSER => HessianDetector_U0_m_axi_pointNumber_AWUSER,
        m_axi_pointNumber_WVALID => HessianDetector_U0_m_axi_pointNumber_WVALID,
        m_axi_pointNumber_WREADY => pointNumber_WREADY,
        m_axi_pointNumber_WDATA => HessianDetector_U0_m_axi_pointNumber_WDATA,
        m_axi_pointNumber_WSTRB => HessianDetector_U0_m_axi_pointNumber_WSTRB,
        m_axi_pointNumber_WLAST => HessianDetector_U0_m_axi_pointNumber_WLAST,
        m_axi_pointNumber_WID => HessianDetector_U0_m_axi_pointNumber_WID,
        m_axi_pointNumber_WUSER => HessianDetector_U0_m_axi_pointNumber_WUSER,
        m_axi_pointNumber_ARVALID => HessianDetector_U0_m_axi_pointNumber_ARVALID,
        m_axi_pointNumber_ARREADY => ap_const_logic_0,
        m_axi_pointNumber_ARADDR => HessianDetector_U0_m_axi_pointNumber_ARADDR,
        m_axi_pointNumber_ARID => HessianDetector_U0_m_axi_pointNumber_ARID,
        m_axi_pointNumber_ARLEN => HessianDetector_U0_m_axi_pointNumber_ARLEN,
        m_axi_pointNumber_ARSIZE => HessianDetector_U0_m_axi_pointNumber_ARSIZE,
        m_axi_pointNumber_ARBURST => HessianDetector_U0_m_axi_pointNumber_ARBURST,
        m_axi_pointNumber_ARLOCK => HessianDetector_U0_m_axi_pointNumber_ARLOCK,
        m_axi_pointNumber_ARCACHE => HessianDetector_U0_m_axi_pointNumber_ARCACHE,
        m_axi_pointNumber_ARPROT => HessianDetector_U0_m_axi_pointNumber_ARPROT,
        m_axi_pointNumber_ARQOS => HessianDetector_U0_m_axi_pointNumber_ARQOS,
        m_axi_pointNumber_ARREGION => HessianDetector_U0_m_axi_pointNumber_ARREGION,
        m_axi_pointNumber_ARUSER => HessianDetector_U0_m_axi_pointNumber_ARUSER,
        m_axi_pointNumber_RVALID => ap_const_logic_0,
        m_axi_pointNumber_RREADY => HessianDetector_U0_m_axi_pointNumber_RREADY,
        m_axi_pointNumber_RDATA => ap_const_lv32_0,
        m_axi_pointNumber_RLAST => ap_const_logic_0,
        m_axi_pointNumber_RID => ap_const_lv1_0,
        m_axi_pointNumber_RUSER => ap_const_lv1_0,
        m_axi_pointNumber_RRESP => ap_const_lv2_0,
        m_axi_pointNumber_BVALID => pointNumber_BVALID,
        m_axi_pointNumber_BREADY => HessianDetector_U0_m_axi_pointNumber_BREADY,
        m_axi_pointNumber_BRESP => pointNumber_BRESP,
        m_axi_pointNumber_BID => pointNumber_BID,
        m_axi_pointNumber_BUSER => pointNumber_BUSER,
        pointNumber_offset_dout => kpn_c_dout,
        pointNumber_offset_empty_n => kpn_c_empty_n,
        pointNumber_offset_read => HessianDetector_U0_pointNumber_offset_read,
        this_assign_1_loc_dout => this_assign_1_loc_c_dout,
        this_assign_1_loc_empty_n => this_assign_1_loc_c_empty_n,
        this_assign_1_loc_read => HessianDetector_U0_this_assign_1_loc_read,
        sum_V_dout => sum_V_dout,
        sum_V_empty_n => sum_V_empty_n,
        sum_V_read => HessianDetector_U0_sum_V_read,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => HessianDetector_U0_ap_start,
        ap_done => HessianDetector_U0_ap_done,
        ap_ready => HessianDetector_U0_ap_ready,
        ap_idle => HessianDetector_U0_ap_idle,
        ap_continue => HessianDetector_U0_ap_continue);

    keyPoints_V_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => surf_Simplified_entr_U0_keyPoints_V_out_din,
        if_full_n => keyPoints_V_c_full_n,
        if_write => surf_Simplified_entr_U0_keyPoints_V_out_write,
        if_dout => keyPoints_V_c_dout,
        if_empty_n => keyPoints_V_c_empty_n,
        if_read => HessianDetector_U0_keyPoints_V_offset_read);

    kpn_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => surf_Simplified_entr_U0_kpn_out_din,
        if_full_n => kpn_c_full_n,
        if_write => surf_Simplified_entr_U0_kpn_out_write,
        if_dout => kpn_c_dout,
        if_empty_n => kpn_c_empty_n,
        if_read => HessianDetector_U0_pointNumber_offset_read);

    img_data_stream_0_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_data_stream_0_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_data_stream_0_V_dout,
        if_empty_n => img_data_stream_0_V_empty_n,
        if_read => integralImg_U0_img_data_stream_0_V_read);

    img_data_stream_1_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_data_stream_1_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_data_stream_1_V_dout,
        if_empty_n => img_data_stream_1_V_empty_n,
        if_read => integralImg_U0_img_data_stream_1_V_read);

    img_data_stream_2_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img_data_stream_2_V_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img_data_stream_2_V_dout,
        if_empty_n => img_data_stream_2_V_empty_n,
        if_read => integralImg_U0_img_data_stream_2_V_read);

    sum_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => integralImg_U0_sum_V_din,
        if_full_n => sum_V_full_n,
        if_write => integralImg_U0_sum_V_write,
        if_dout => sum_V_dout,
        if_empty_n => sum_V_empty_n,
        if_read => HessianDetector_U0_sum_V_read);

    this_assign_1_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_codeRepl47_pro_U0_this_assign_1_out_out_din,
        if_full_n => this_assign_1_loc_c_full_n,
        if_write => Block_codeRepl47_pro_U0_this_assign_1_out_out_write,
        if_dout => this_assign_1_loc_c_dout,
        if_empty_n => this_assign_1_loc_c_empty_n,
        if_read => HessianDetector_U0_this_assign_1_loc_read);

    start_for_HessianxdS_U : component start_for_HessianxdS
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_HessianDetector_U0_din,
        if_full_n => start_for_HessianDetector_U0_full_n,
        if_write => surf_Simplified_entr_U0_start_write,
        if_dout => start_for_HessianDetector_U0_dout,
        if_empty_n => start_for_HessianDetector_U0_empty_n,
        if_read => HessianDetector_U0_ap_ready);

    start_for_integrayd2_U : component start_for_integrayd2
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_integralImg_U0_din,
        if_full_n => start_for_integralImg_U0_full_n,
        if_write => AXIvideo2Mat_U0_start_write,
        if_dout => start_for_integralImg_U0_dout,
        if_empty_n => start_for_integralImg_U0_empty_n,
        if_read => integralImg_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_codeRepl47_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_codeRepl47_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_codeRepl47_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_codeRepl47_pro_U0_ap_ready <= ap_sync_Block_codeRepl47_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_surf_Simplified_entr_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_surf_Simplified_entr_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_surf_Simplified_entr_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_surf_Simplified_entr_U0_ap_ready <= ap_sync_surf_Simplified_entr_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_codeRepl47_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_codeRepl47_pro_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_codeRepl47_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_codeRepl47_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_codeRepl47_pro_U0_ap_ready))) then 
                Block_codeRepl47_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_codeRepl47_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    surf_Simplified_entr_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (surf_Simplified_entr_U0_ap_ready = ap_const_logic_0))) then 
                surf_Simplified_entr_U0_ap_ready_count <= std_logic_vector(unsigned(surf_Simplified_entr_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (surf_Simplified_entr_U0_ap_ready = ap_const_logic_1))) then 
                surf_Simplified_entr_U0_ap_ready_count <= std_logic_vector(unsigned(surf_Simplified_entr_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= ((ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_codeRepl47_pro_U0_ap_continue <= ap_const_logic_1;
    Block_codeRepl47_pro_U0_ap_start <= ((ap_sync_reg_Block_codeRepl47_pro_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_codeRepl47_pro_U0_start_full_n <= ap_const_logic_1;
    Block_codeRepl47_pro_U0_start_write <= ap_const_logic_0;
    HessianDetector_U0_ap_continue <= ap_const_logic_1;
    HessianDetector_U0_ap_start <= start_for_HessianDetector_U0_empty_n;
    HessianDetector_U0_start_full_n <= ap_const_logic_1;
    HessianDetector_U0_start_write <= ap_const_logic_0;
    ap_done <= HessianDetector_U0_ap_done;
    ap_idle <= (surf_Simplified_entr_U0_ap_idle and integralImg_U0_ap_idle and HessianDetector_U0_ap_idle and Block_codeRepl47_pro_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2Mat_U0_ap_ready <= (ap_sync_reg_AXIvideo2Mat_U0_ap_ready or AXIvideo2Mat_U0_ap_ready);
    ap_sync_Block_codeRepl47_pro_U0_ap_ready <= (ap_sync_reg_Block_codeRepl47_pro_U0_ap_ready or Block_codeRepl47_pro_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= HessianDetector_U0_ap_done;
    ap_sync_ready <= (ap_sync_surf_Simplified_entr_U0_ap_ready and ap_sync_Block_codeRepl47_pro_U0_ap_ready and ap_sync_AXIvideo2Mat_U0_ap_ready);
    ap_sync_surf_Simplified_entr_U0_ap_ready <= (surf_Simplified_entr_U0_ap_ready or ap_sync_reg_surf_Simplified_entr_U0_ap_ready);
    integralImg_U0_ap_continue <= ap_const_logic_1;
    integralImg_U0_ap_start <= start_for_integralImg_U0_empty_n;
    integralImg_U0_start_full_n <= ap_const_logic_1;
    integralImg_U0_start_write <= ap_const_logic_0;
    start_for_HessianDetector_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_integralImg_U0_din <= (0=>ap_const_logic_1, others=>'-');
    surf_Simplified_entr_U0_ap_continue <= ap_const_logic_1;
    surf_Simplified_entr_U0_ap_start <= ((ap_sync_reg_surf_Simplified_entr_U0_ap_ready xor ap_const_logic_1) and ap_start);
    video_in_TREADY <= AXIvideo2Mat_U0_video_in_TREADY;
end behav;
