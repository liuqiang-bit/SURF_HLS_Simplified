// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calcHaarPattern_x_y (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sumBuf_address0,
        sumBuf_ce0,
        sumBuf_q0,
        sumBuf_address1,
        sumBuf_ce1,
        sumBuf_q1,
        box_0_V_address0,
        box_0_V_ce0,
        box_0_V_q0,
        box_1_V_address0,
        box_1_V_ce0,
        box_1_V_q0,
        box_2_V_address0,
        box_2_V_ce0,
        box_2_V_q0,
        box_3_V_address0,
        box_3_V_ce0,
        box_3_V_q0,
        box_4_V_address0,
        box_4_V_ce0,
        box_4_V_q0,
        box_V_offset,
        sumBufIndex_V,
        rOffset,
        cOffset,
        ap_return
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] sumBuf_address0;
output   sumBuf_ce0;
input  [31:0] sumBuf_q0;
output  [14:0] sumBuf_address1;
output   sumBuf_ce1;
input  [31:0] sumBuf_q1;
output  [3:0] box_0_V_address0;
output   box_0_V_ce0;
input  [31:0] box_0_V_q0;
output  [3:0] box_1_V_address0;
output   box_1_V_ce0;
input  [31:0] box_1_V_q0;
output  [3:0] box_2_V_address0;
output   box_2_V_ce0;
input  [31:0] box_2_V_q0;
output  [3:0] box_3_V_address0;
output   box_3_V_ce0;
input  [31:0] box_3_V_q0;
output  [3:0] box_4_V_address0;
output   box_4_V_ce0;
input  [31:0] box_4_V_q0;
input  [1:0] box_V_offset;
input  [175:0] sumBufIndex_V;
input  [5:0] rOffset;
input  [10:0] cOffset;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] sumBuf_address0;
reg sumBuf_ce0;
reg[14:0] sumBuf_address1;
reg sumBuf_ce1;
reg box_0_V_ce0;
reg box_1_V_ce0;
reg box_2_V_ce0;
reg box_3_V_ce0;
reg box_4_V_ce0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] tmp_s_fu_253_p2;
reg   [4:0] tmp_s_reg_961;
wire  signed [22:0] tmp_cast1_fu_259_p1;
reg  signed [22:0] tmp_cast1_reg_966;
wire  signed [22:0] tmp_22_cast_fu_273_p1;
reg  signed [22:0] tmp_22_cast_reg_972;
wire   [1:0] kn_1_fu_283_p2;
reg   [1:0] kn_1_reg_981;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_277_p2;
wire   [15:0] tmp_113_fu_384_p2;
reg   [15:0] tmp_113_reg_1011;
wire    ap_CS_fsm_state3;
wire  signed [26:0] Hi_assign_fu_461_p2;
reg  signed [26:0] Hi_assign_reg_1017;
wire   [22:0] tmp_9_fu_467_p2;
reg   [22:0] tmp_9_reg_1022;
wire   [4:0] tmp_116_fu_472_p1;
reg   [4:0] tmp_116_reg_1027;
wire   [7:0] tmp_119_fu_476_p1;
reg   [7:0] tmp_119_reg_1032;
wire   [15:0] tmp_142_fu_557_p2;
reg   [15:0] tmp_142_reg_1038;
wire  signed [26:0] Hi_assign_3_fu_634_p2;
reg  signed [26:0] Hi_assign_3_reg_1044;
wire   [22:0] tmp_16_fu_640_p2;
reg   [22:0] tmp_16_reg_1049;
wire   [4:0] tmp_145_fu_645_p1;
reg   [4:0] tmp_145_reg_1054;
wire   [7:0] tmp_148_fu_649_p1;
reg   [7:0] tmp_148_reg_1059;
reg  signed [31:0] box_4_V_load_reg_1065;
wire  signed [15:0] tmp_133_fu_760_p1;
reg  signed [15:0] tmp_133_reg_1070;
wire    ap_CS_fsm_state4;
wire  signed [15:0] tmp_162_fu_871_p1;
reg  signed [15:0] tmp_162_reg_1075;
wire  signed [15:0] tmp_8_fu_935_p2;
reg  signed [15:0] tmp_8_reg_1080;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
(* use_dsp48 = "no" *) wire   [15:0] tmp_21_fu_893_p2;
reg   [15:0] tmp_21_reg_1096;
(* use_dsp48 = "no" *) wire   [15:0] tmp_22_fu_897_p2;
reg   [15:0] tmp_22_reg_1101;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_18_fu_909_p2;
reg   [31:0] tmp_18_reg_1116;
wire  signed [31:0] tmp_V_fu_920_p2;
reg  signed [31:0] tmp_V_reg_1121;
wire    ap_CS_fsm_state8;
wire   [31:0] r_V_s_fu_926_p2;
reg   [31:0] r_V_s_reg_1126;
wire    ap_CS_fsm_state9;
wire   [31:0] d_V_fu_930_p2;
wire    ap_CS_fsm_state10;
reg   [31:0] p_Val2_16_reg_214;
reg   [1:0] kn_reg_226;
wire  signed [63:0] tmp_73_cast_fu_298_p1;
wire   [63:0] tmp_77_cast_fu_879_p1;
wire   [63:0] tmp_78_cast_fu_888_p1;
wire   [63:0] tmp_82_cast_fu_901_p1;
wire   [63:0] tmp_83_cast_fu_905_p1;
wire   [3:0] tmp_fu_241_p3;
wire   [4:0] p_shl_cast_fu_249_p1;
wire   [4:0] box_V_offset_cast_ca_fu_237_p1;
wire  signed [5:0] tmp_cast1_fu_259_p0;
wire  signed [5:0] tmp_cast_fu_263_p0;
wire  signed [6:0] tmp_cast_fu_263_p1;
wire   [6:0] tmp_1_fu_267_p2;
wire   [4:0] tmp_cast_41_fu_289_p1;
wire   [4:0] tmp_3_fu_293_p2;
wire   [9:0] tmp_106_fu_325_p1;
wire   [21:0] ret_V_fu_307_p4;
wire   [21:0] ret_V_2_fu_335_p2;
wire   [0:0] tmp_2_fu_329_p2;
wire   [15:0] tmp_108_fu_344_p4;
wire   [15:0] tmp_109_fu_354_p1;
wire   [0:0] p_Result_s_fu_317_p3;
wire   [15:0] tmp_110_fu_358_p3;
wire   [15:0] tmp_111_fu_366_p4;
wire   [15:0] tmp_107_fu_341_p1;
wire   [15:0] tmp_112_fu_376_p3;
wire   [9:0] tmp_115_fu_408_p1;
wire   [21:0] ret_V_3_fu_390_p4;
wire   [0:0] tmp_5_fu_412_p2;
wire   [21:0] ret_V_4_fu_418_p2;
wire   [0:0] p_Result_4_fu_400_p3;
wire   [21:0] p_1_fu_424_p3;
wire   [21:0] p_2_fu_432_p3;
wire  signed [22:0] tmp_27_cast_fu_440_p1;
wire   [22:0] tmp_6_fu_444_p2;
wire   [25:0] tmp_4_fu_449_p3;
wire  signed [26:0] tmp_8_cast_fu_457_p1;
wire   [9:0] tmp_135_fu_498_p1;
wire   [21:0] ret_V_5_fu_480_p4;
wire   [21:0] ret_V_6_fu_508_p2;
wire   [0:0] tmp_10_fu_502_p2;
wire   [15:0] tmp_137_fu_517_p4;
wire   [15:0] tmp_138_fu_527_p1;
wire   [0:0] p_Result_6_fu_490_p3;
wire   [15:0] tmp_139_fu_531_p3;
wire   [15:0] tmp_140_fu_539_p4;
wire   [15:0] tmp_136_fu_514_p1;
wire   [15:0] tmp_141_fu_549_p3;
wire   [9:0] tmp_144_fu_581_p1;
wire   [21:0] ret_V_7_fu_563_p4;
wire   [0:0] tmp_13_fu_585_p2;
wire   [21:0] ret_V_8_fu_591_p2;
wire   [0:0] p_Result_7_fu_573_p3;
wire   [21:0] p_3_fu_597_p3;
wire   [21:0] p_4_fu_605_p3;
wire  signed [22:0] tmp_53_cast_fu_613_p1;
wire   [22:0] tmp_14_fu_617_p2;
wire   [25:0] tmp_15_fu_622_p3;
wire  signed [26:0] tmp_15_cast_fu_630_p1;
wire   [25:0] tmp_7_fu_656_p3;
wire  signed [31:0] Lo_assign_fu_663_p1;
wire  signed [31:0] Hi_assign_cast_fu_653_p1;
wire   [7:0] tmp_118_fu_673_p3;
wire   [0:0] tmp_117_fu_667_p2;
wire   [7:0] tmp_121_fu_689_p2;
wire   [7:0] tmp_123_fu_700_p2;
reg   [175:0] tmp_120_fu_680_p4;
wire   [7:0] tmp_122_fu_694_p2;
wire   [7:0] tmp_124_fu_705_p3;
wire   [7:0] tmp_126_fu_720_p3;
wire   [7:0] tmp_127_fu_728_p2;
wire   [175:0] tmp_125_fu_713_p3;
wire   [175:0] tmp_128_fu_734_p1;
wire   [175:0] tmp_129_fu_738_p1;
wire   [175:0] tmp_130_fu_742_p2;
wire   [175:0] tmp_131_fu_748_p2;
wire   [175:0] p_Result_5_fu_754_p2;
wire   [25:0] tmp_17_fu_767_p3;
wire  signed [31:0] Lo_assign_3_fu_774_p1;
wire  signed [31:0] Hi_assign_3_cast_fu_764_p1;
wire   [7:0] tmp_147_fu_784_p3;
wire   [0:0] tmp_146_fu_778_p2;
wire   [7:0] tmp_150_fu_800_p2;
wire   [7:0] tmp_152_fu_811_p2;
reg   [175:0] tmp_149_fu_791_p4;
wire   [7:0] tmp_151_fu_805_p2;
wire   [7:0] tmp_153_fu_816_p3;
wire   [7:0] tmp_155_fu_831_p3;
wire   [7:0] tmp_156_fu_839_p2;
wire   [175:0] tmp_154_fu_824_p3;
wire   [175:0] tmp_157_fu_845_p1;
wire   [175:0] tmp_158_fu_849_p1;
wire   [175:0] tmp_159_fu_853_p2;
wire   [175:0] tmp_160_fu_859_p2;
wire   [175:0] p_Result_8_fu_865_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp_11_fu_875_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp_12_fu_884_p2;
wire  signed [15:0] tmp_20_fu_940_p2;
wire   [31:0] tmp_19_fu_915_p2;
wire   [10:0] tmp_8_fu_935_p1;
wire   [10:0] tmp_20_fu_940_p1;
reg   [31:0] ap_return_preg;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_return_preg = 32'd0;
end

surf_Simplified_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 16 ))
surf_Simplified_mbkb_U22(
    .din0(tmp_133_reg_1070),
    .din1(tmp_8_fu_935_p1),
    .dout(tmp_8_fu_935_p2)
);

surf_Simplified_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 16 ))
surf_Simplified_mbkb_U23(
    .din0(tmp_162_reg_1075),
    .din1(tmp_20_fu_940_p1),
    .dout(tmp_20_fu_940_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((exitcond_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_preg <= p_Val2_16_reg_214;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        kn_reg_226 <= kn_1_reg_981;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        kn_reg_226 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_Val2_16_reg_214 <= d_V_fu_930_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_16_reg_214 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Hi_assign_3_reg_1044[26 : 3] <= Hi_assign_3_fu_634_p2[26 : 3];
        Hi_assign_reg_1017[26 : 3] <= Hi_assign_fu_461_p2[26 : 3];
        box_4_V_load_reg_1065 <= box_4_V_q0;
        tmp_113_reg_1011 <= tmp_113_fu_384_p2;
        tmp_116_reg_1027 <= tmp_116_fu_472_p1;
        tmp_119_reg_1032[7 : 3] <= tmp_119_fu_476_p1[7 : 3];
        tmp_142_reg_1038 <= tmp_142_fu_557_p2;
        tmp_145_reg_1054 <= tmp_145_fu_645_p1;
        tmp_148_reg_1059[7 : 3] <= tmp_148_fu_649_p1[7 : 3];
        tmp_16_reg_1049 <= tmp_16_fu_640_p2;
        tmp_9_reg_1022 <= tmp_9_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kn_1_reg_981 <= kn_1_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_V_s_reg_1126 <= r_V_s_fu_926_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_133_reg_1070 <= tmp_133_fu_760_p1;
        tmp_162_reg_1075 <= tmp_162_fu_871_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_18_reg_1116 <= tmp_18_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_21_reg_1096 <= tmp_21_fu_893_p2;
        tmp_22_reg_1101 <= tmp_22_fu_897_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_22_cast_reg_972 <= tmp_22_cast_fu_273_p1;
        tmp_cast1_reg_966 <= tmp_cast1_fu_259_p1;
        tmp_s_reg_961 <= tmp_s_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_8_reg_1080 <= tmp_8_fu_935_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_V_reg_1121 <= tmp_V_fu_920_p2;
    end
end

always @ (*) begin
    if ((((exitcond_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return = p_Val2_16_reg_214;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        box_0_V_ce0 = 1'b1;
    end else begin
        box_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        box_1_V_ce0 = 1'b1;
    end else begin
        box_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        box_2_V_ce0 = 1'b1;
    end else begin
        box_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        box_3_V_ce0 = 1'b1;
    end else begin
        box_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        box_4_V_ce0 = 1'b1;
    end else begin
        box_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sumBuf_address0 = tmp_82_cast_fu_901_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sumBuf_address0 = tmp_77_cast_fu_879_p1;
    end else begin
        sumBuf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sumBuf_address1 = tmp_83_cast_fu_905_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sumBuf_address1 = tmp_78_cast_fu_888_p1;
    end else begin
        sumBuf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        sumBuf_ce0 = 1'b1;
    end else begin
        sumBuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        sumBuf_ce1 = 1'b1;
    end else begin
        sumBuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_277_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_3_cast_fu_764_p1 = Hi_assign_3_reg_1044;

assign Hi_assign_3_fu_634_p2 = ($signed(tmp_15_cast_fu_630_p1) + $signed(27'd134217727));

assign Hi_assign_cast_fu_653_p1 = Hi_assign_reg_1017;

assign Hi_assign_fu_461_p2 = ($signed(tmp_8_cast_fu_457_p1) + $signed(27'd134217727));

assign Lo_assign_3_fu_774_p1 = $signed(tmp_17_fu_767_p3);

assign Lo_assign_fu_663_p1 = $signed(tmp_7_fu_656_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign box_0_V_address0 = tmp_73_cast_fu_298_p1;

assign box_1_V_address0 = tmp_73_cast_fu_298_p1;

assign box_2_V_address0 = tmp_73_cast_fu_298_p1;

assign box_3_V_address0 = tmp_73_cast_fu_298_p1;

assign box_4_V_address0 = tmp_73_cast_fu_298_p1;

assign box_V_offset_cast_ca_fu_237_p1 = box_V_offset;

assign d_V_fu_930_p2 = (p_Val2_16_reg_214 + r_V_s_reg_1126);

assign exitcond_fu_277_p2 = ((kn_reg_226 == 2'd3) ? 1'b1 : 1'b0);

assign kn_1_fu_283_p2 = (kn_reg_226 + 2'd1);

assign p_1_fu_424_p3 = ((tmp_5_fu_412_p2[0:0] === 1'b1) ? ret_V_3_fu_390_p4 : ret_V_4_fu_418_p2);

assign p_2_fu_432_p3 = ((p_Result_4_fu_400_p3[0:0] === 1'b1) ? p_1_fu_424_p3 : ret_V_3_fu_390_p4);

assign p_3_fu_597_p3 = ((tmp_13_fu_585_p2[0:0] === 1'b1) ? ret_V_7_fu_563_p4 : ret_V_8_fu_591_p2);

assign p_4_fu_605_p3 = ((p_Result_7_fu_573_p3[0:0] === 1'b1) ? p_3_fu_597_p3 : ret_V_7_fu_563_p4);

assign p_Result_4_fu_400_p3 = box_3_V_q0[32'd31];

assign p_Result_5_fu_754_p2 = (tmp_131_fu_748_p2 & tmp_130_fu_742_p2);

assign p_Result_6_fu_490_p3 = box_0_V_q0[32'd31];

assign p_Result_7_fu_573_p3 = box_1_V_q0[32'd31];

assign p_Result_8_fu_865_p2 = (tmp_160_fu_859_p2 & tmp_159_fu_853_p2);

assign p_Result_s_fu_317_p3 = box_2_V_q0[32'd31];

assign p_shl_cast_fu_249_p1 = tmp_fu_241_p3;

assign r_V_s_fu_926_p2 = ($signed(tmp_V_reg_1121) * $signed(box_4_V_load_reg_1065));

assign ret_V_2_fu_335_p2 = (ret_V_fu_307_p4 + 22'd1);

assign ret_V_3_fu_390_p4 = {{box_3_V_q0[31:10]}};

assign ret_V_4_fu_418_p2 = (ret_V_3_fu_390_p4 + 22'd1);

assign ret_V_5_fu_480_p4 = {{box_0_V_q0[31:10]}};

assign ret_V_6_fu_508_p2 = (ret_V_5_fu_480_p4 + 22'd1);

assign ret_V_7_fu_563_p4 = {{box_1_V_q0[31:10]}};

assign ret_V_8_fu_591_p2 = (ret_V_7_fu_563_p4 + 22'd1);

assign ret_V_fu_307_p4 = {{box_2_V_q0[31:10]}};

assign tmp_106_fu_325_p1 = box_2_V_q0[9:0];

assign tmp_107_fu_341_p1 = cOffset;

assign tmp_108_fu_344_p4 = {{box_2_V_q0[25:10]}};

assign tmp_109_fu_354_p1 = ret_V_2_fu_335_p2[15:0];

assign tmp_10_fu_502_p2 = ((tmp_135_fu_498_p1 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_110_fu_358_p3 = ((tmp_2_fu_329_p2[0:0] === 1'b1) ? tmp_108_fu_344_p4 : tmp_109_fu_354_p1);

assign tmp_111_fu_366_p4 = {{box_2_V_q0[25:10]}};

assign tmp_112_fu_376_p3 = ((p_Result_s_fu_317_p3[0:0] === 1'b1) ? tmp_110_fu_358_p3 : tmp_111_fu_366_p4);

assign tmp_113_fu_384_p2 = (tmp_107_fu_341_p1 + tmp_112_fu_376_p3);

assign tmp_115_fu_408_p1 = box_3_V_q0[9:0];

assign tmp_116_fu_472_p1 = tmp_9_fu_467_p2[4:0];

assign tmp_117_fu_667_p2 = ((Lo_assign_fu_663_p1 > Hi_assign_cast_fu_653_p1) ? 1'b1 : 1'b0);

assign tmp_118_fu_673_p3 = {{tmp_116_reg_1027}, {3'd0}};

assign tmp_119_fu_476_p1 = Hi_assign_fu_461_p2[7:0];

assign tmp_11_fu_875_p2 = ($signed(tmp_8_reg_1080) + $signed(tmp_113_reg_1011));

integer ap_tvar_int_0;

always @ (sumBufIndex_V) begin
    for (ap_tvar_int_0 = 176 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 175 - 0) begin
            tmp_120_fu_680_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_120_fu_680_p4[ap_tvar_int_0] = sumBufIndex_V[175 - ap_tvar_int_0];
        end
    end
end

assign tmp_121_fu_689_p2 = (tmp_118_fu_673_p3 - tmp_119_reg_1032);

assign tmp_122_fu_694_p2 = ($signed(8'd175) - $signed(tmp_118_fu_673_p3));

assign tmp_123_fu_700_p2 = (tmp_119_reg_1032 - tmp_118_fu_673_p3);

assign tmp_124_fu_705_p3 = ((tmp_117_fu_667_p2[0:0] === 1'b1) ? tmp_121_fu_689_p2 : tmp_123_fu_700_p2);

assign tmp_125_fu_713_p3 = ((tmp_117_fu_667_p2[0:0] === 1'b1) ? tmp_120_fu_680_p4 : sumBufIndex_V);

assign tmp_126_fu_720_p3 = ((tmp_117_fu_667_p2[0:0] === 1'b1) ? tmp_122_fu_694_p2 : tmp_118_fu_673_p3);

assign tmp_127_fu_728_p2 = ($signed(8'd175) - $signed(tmp_124_fu_705_p3));

assign tmp_128_fu_734_p1 = tmp_126_fu_720_p3;

assign tmp_129_fu_738_p1 = tmp_127_fu_728_p2;

assign tmp_12_fu_884_p2 = ($signed(tmp_8_reg_1080) + $signed(tmp_142_reg_1038));

assign tmp_130_fu_742_p2 = tmp_125_fu_713_p3 >> tmp_128_fu_734_p1;

assign tmp_131_fu_748_p2 = 176'd95780971304118053647396689196894323976171195136475135 >> tmp_129_fu_738_p1;

assign tmp_133_fu_760_p1 = p_Result_5_fu_754_p2[15:0];

assign tmp_135_fu_498_p1 = box_0_V_q0[9:0];

assign tmp_136_fu_514_p1 = cOffset;

assign tmp_137_fu_517_p4 = {{box_0_V_q0[25:10]}};

assign tmp_138_fu_527_p1 = ret_V_6_fu_508_p2[15:0];

assign tmp_139_fu_531_p3 = ((tmp_10_fu_502_p2[0:0] === 1'b1) ? tmp_137_fu_517_p4 : tmp_138_fu_527_p1);

assign tmp_13_fu_585_p2 = ((tmp_144_fu_581_p1 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_140_fu_539_p4 = {{box_0_V_q0[25:10]}};

assign tmp_141_fu_549_p3 = ((p_Result_6_fu_490_p3[0:0] === 1'b1) ? tmp_139_fu_531_p3 : tmp_140_fu_539_p4);

assign tmp_142_fu_557_p2 = (tmp_136_fu_514_p1 + tmp_141_fu_549_p3);

assign tmp_144_fu_581_p1 = box_1_V_q0[9:0];

assign tmp_145_fu_645_p1 = tmp_16_fu_640_p2[4:0];

assign tmp_146_fu_778_p2 = ((Lo_assign_3_fu_774_p1 > Hi_assign_3_cast_fu_764_p1) ? 1'b1 : 1'b0);

assign tmp_147_fu_784_p3 = {{tmp_145_reg_1054}, {3'd0}};

assign tmp_148_fu_649_p1 = Hi_assign_3_fu_634_p2[7:0];

integer ap_tvar_int_1;

always @ (sumBufIndex_V) begin
    for (ap_tvar_int_1 = 176 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 175 - 0) begin
            tmp_149_fu_791_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_149_fu_791_p4[ap_tvar_int_1] = sumBufIndex_V[175 - ap_tvar_int_1];
        end
    end
end

assign tmp_14_fu_617_p2 = ($signed(tmp_53_cast_fu_613_p1) + $signed(tmp_22_cast_reg_972));

assign tmp_150_fu_800_p2 = (tmp_147_fu_784_p3 - tmp_148_reg_1059);

assign tmp_151_fu_805_p2 = ($signed(8'd175) - $signed(tmp_147_fu_784_p3));

assign tmp_152_fu_811_p2 = (tmp_148_reg_1059 - tmp_147_fu_784_p3);

assign tmp_153_fu_816_p3 = ((tmp_146_fu_778_p2[0:0] === 1'b1) ? tmp_150_fu_800_p2 : tmp_152_fu_811_p2);

assign tmp_154_fu_824_p3 = ((tmp_146_fu_778_p2[0:0] === 1'b1) ? tmp_149_fu_791_p4 : sumBufIndex_V);

assign tmp_155_fu_831_p3 = ((tmp_146_fu_778_p2[0:0] === 1'b1) ? tmp_151_fu_805_p2 : tmp_147_fu_784_p3);

assign tmp_156_fu_839_p2 = ($signed(8'd175) - $signed(tmp_153_fu_816_p3));

assign tmp_157_fu_845_p1 = tmp_155_fu_831_p3;

assign tmp_158_fu_849_p1 = tmp_156_fu_839_p2;

assign tmp_159_fu_853_p2 = tmp_154_fu_824_p3 >> tmp_157_fu_845_p1;

assign tmp_15_cast_fu_630_p1 = $signed(tmp_15_fu_622_p3);

assign tmp_15_fu_622_p3 = {{tmp_14_fu_617_p2}, {3'd0}};

assign tmp_160_fu_859_p2 = 176'd95780971304118053647396689196894323976171195136475135 >> tmp_158_fu_849_p1;

assign tmp_162_fu_871_p1 = p_Result_8_fu_865_p2[15:0];

assign tmp_16_fu_640_p2 = ($signed(tmp_cast1_reg_966) + $signed(tmp_53_cast_fu_613_p1));

assign tmp_17_fu_767_p3 = {{tmp_16_reg_1049}, {3'd0}};

assign tmp_18_fu_909_p2 = (sumBuf_q0 - sumBuf_q1);

assign tmp_19_fu_915_p2 = (tmp_18_reg_1116 - sumBuf_q0);

assign tmp_1_fu_267_p2 = ($signed(tmp_cast_fu_263_p1) + $signed(7'd1));

assign tmp_20_fu_940_p1 = 16'd801;

assign tmp_21_fu_893_p2 = ($signed(tmp_20_fu_940_p2) + $signed(tmp_113_reg_1011));

assign tmp_22_cast_fu_273_p1 = $signed(tmp_1_fu_267_p2);

assign tmp_22_fu_897_p2 = ($signed(tmp_20_fu_940_p2) + $signed(tmp_142_reg_1038));

assign tmp_27_cast_fu_440_p1 = $signed(p_2_fu_432_p3);

assign tmp_2_fu_329_p2 = ((tmp_106_fu_325_p1 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_293_p2 = (tmp_s_reg_961 + tmp_cast_41_fu_289_p1);

assign tmp_4_fu_449_p3 = {{tmp_6_fu_444_p2}, {3'd0}};

assign tmp_53_cast_fu_613_p1 = $signed(p_4_fu_605_p3);

assign tmp_5_fu_412_p2 = ((tmp_115_fu_408_p1 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_444_p2 = ($signed(tmp_27_cast_fu_440_p1) + $signed(tmp_22_cast_reg_972));

assign tmp_73_cast_fu_298_p1 = $signed(tmp_3_fu_293_p2);

assign tmp_77_cast_fu_879_p1 = tmp_11_fu_875_p2;

assign tmp_78_cast_fu_888_p1 = tmp_12_fu_884_p2;

assign tmp_7_fu_656_p3 = {{tmp_9_reg_1022}, {3'd0}};

assign tmp_82_cast_fu_901_p1 = tmp_21_reg_1096;

assign tmp_83_cast_fu_905_p1 = tmp_22_reg_1101;

assign tmp_8_cast_fu_457_p1 = $signed(tmp_4_fu_449_p3);

assign tmp_8_fu_935_p1 = 16'd801;

assign tmp_9_fu_467_p2 = ($signed(tmp_cast1_reg_966) + $signed(tmp_27_cast_fu_440_p1));

assign tmp_V_fu_920_p2 = (tmp_19_fu_915_p2 + sumBuf_q1);

assign tmp_cast1_fu_259_p0 = rOffset;

assign tmp_cast1_fu_259_p1 = tmp_cast1_fu_259_p0;

assign tmp_cast_41_fu_289_p1 = kn_reg_226;

assign tmp_cast_fu_263_p0 = rOffset;

assign tmp_cast_fu_263_p1 = tmp_cast_fu_263_p0;

assign tmp_fu_241_p3 = {{box_V_offset}, {2'd0}};

assign tmp_s_fu_253_p2 = (p_shl_cast_fu_249_p1 - box_V_offset_cast_ca_fu_237_p1);

always @ (posedge ap_clk) begin
    Hi_assign_reg_1017[2:0] <= 3'b111;
    tmp_119_reg_1032[2:0] <= 3'b111;
    Hi_assign_3_reg_1044[2:0] <= 3'b111;
    tmp_148_reg_1059[2:0] <= 3'b111;
end

endmodule //calcHaarPattern_x_y
