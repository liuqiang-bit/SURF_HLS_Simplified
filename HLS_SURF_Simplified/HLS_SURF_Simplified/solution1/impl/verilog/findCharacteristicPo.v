// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module findCharacteristicPo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        det0_V_V_dout,
        det0_V_V_empty_n,
        det0_V_V_read,
        det1_V_V3_dout,
        det1_V_V3_empty_n,
        det1_V_V3_read,
        det2_V_V6_dout,
        det2_V_V6_empty_n,
        det2_V_V6_read,
        hessianThreshold_V_dout,
        hessianThreshold_V_empty_n,
        hessianThreshold_V_read,
        m_axi_keyPoints_V_AWVALID,
        m_axi_keyPoints_V_AWREADY,
        m_axi_keyPoints_V_AWADDR,
        m_axi_keyPoints_V_AWID,
        m_axi_keyPoints_V_AWLEN,
        m_axi_keyPoints_V_AWSIZE,
        m_axi_keyPoints_V_AWBURST,
        m_axi_keyPoints_V_AWLOCK,
        m_axi_keyPoints_V_AWCACHE,
        m_axi_keyPoints_V_AWPROT,
        m_axi_keyPoints_V_AWQOS,
        m_axi_keyPoints_V_AWREGION,
        m_axi_keyPoints_V_AWUSER,
        m_axi_keyPoints_V_WVALID,
        m_axi_keyPoints_V_WREADY,
        m_axi_keyPoints_V_WDATA,
        m_axi_keyPoints_V_WSTRB,
        m_axi_keyPoints_V_WLAST,
        m_axi_keyPoints_V_WID,
        m_axi_keyPoints_V_WUSER,
        m_axi_keyPoints_V_ARVALID,
        m_axi_keyPoints_V_ARREADY,
        m_axi_keyPoints_V_ARADDR,
        m_axi_keyPoints_V_ARID,
        m_axi_keyPoints_V_ARLEN,
        m_axi_keyPoints_V_ARSIZE,
        m_axi_keyPoints_V_ARBURST,
        m_axi_keyPoints_V_ARLOCK,
        m_axi_keyPoints_V_ARCACHE,
        m_axi_keyPoints_V_ARPROT,
        m_axi_keyPoints_V_ARQOS,
        m_axi_keyPoints_V_ARREGION,
        m_axi_keyPoints_V_ARUSER,
        m_axi_keyPoints_V_RVALID,
        m_axi_keyPoints_V_RREADY,
        m_axi_keyPoints_V_RDATA,
        m_axi_keyPoints_V_RLAST,
        m_axi_keyPoints_V_RID,
        m_axi_keyPoints_V_RUSER,
        m_axi_keyPoints_V_RRESP,
        m_axi_keyPoints_V_BVALID,
        m_axi_keyPoints_V_BREADY,
        m_axi_keyPoints_V_BRESP,
        m_axi_keyPoints_V_BID,
        m_axi_keyPoints_V_BUSER,
        keyPoints_V_offset_dout,
        keyPoints_V_offset_empty_n,
        keyPoints_V_offset_read,
        m_axi_pointNumber_AWVALID,
        m_axi_pointNumber_AWREADY,
        m_axi_pointNumber_AWADDR,
        m_axi_pointNumber_AWID,
        m_axi_pointNumber_AWLEN,
        m_axi_pointNumber_AWSIZE,
        m_axi_pointNumber_AWBURST,
        m_axi_pointNumber_AWLOCK,
        m_axi_pointNumber_AWCACHE,
        m_axi_pointNumber_AWPROT,
        m_axi_pointNumber_AWQOS,
        m_axi_pointNumber_AWREGION,
        m_axi_pointNumber_AWUSER,
        m_axi_pointNumber_WVALID,
        m_axi_pointNumber_WREADY,
        m_axi_pointNumber_WDATA,
        m_axi_pointNumber_WSTRB,
        m_axi_pointNumber_WLAST,
        m_axi_pointNumber_WID,
        m_axi_pointNumber_WUSER,
        m_axi_pointNumber_ARVALID,
        m_axi_pointNumber_ARREADY,
        m_axi_pointNumber_ARADDR,
        m_axi_pointNumber_ARID,
        m_axi_pointNumber_ARLEN,
        m_axi_pointNumber_ARSIZE,
        m_axi_pointNumber_ARBURST,
        m_axi_pointNumber_ARLOCK,
        m_axi_pointNumber_ARCACHE,
        m_axi_pointNumber_ARPROT,
        m_axi_pointNumber_ARQOS,
        m_axi_pointNumber_ARREGION,
        m_axi_pointNumber_ARUSER,
        m_axi_pointNumber_RVALID,
        m_axi_pointNumber_RREADY,
        m_axi_pointNumber_RDATA,
        m_axi_pointNumber_RLAST,
        m_axi_pointNumber_RID,
        m_axi_pointNumber_RUSER,
        m_axi_pointNumber_RRESP,
        m_axi_pointNumber_BVALID,
        m_axi_pointNumber_BREADY,
        m_axi_pointNumber_BRESP,
        m_axi_pointNumber_BID,
        m_axi_pointNumber_BUSER,
        pointNumber_offset_dout,
        pointNumber_offset_empty_n,
        pointNumber_offset_read
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_state12 = 50'd2048;
parameter    ap_ST_fsm_state13 = 50'd4096;
parameter    ap_ST_fsm_state14 = 50'd8192;
parameter    ap_ST_fsm_state15 = 50'd16384;
parameter    ap_ST_fsm_state16 = 50'd32768;
parameter    ap_ST_fsm_state17 = 50'd65536;
parameter    ap_ST_fsm_state18 = 50'd131072;
parameter    ap_ST_fsm_state19 = 50'd262144;
parameter    ap_ST_fsm_state20 = 50'd524288;
parameter    ap_ST_fsm_state21 = 50'd1048576;
parameter    ap_ST_fsm_state22 = 50'd2097152;
parameter    ap_ST_fsm_state23 = 50'd4194304;
parameter    ap_ST_fsm_state24 = 50'd8388608;
parameter    ap_ST_fsm_state25 = 50'd16777216;
parameter    ap_ST_fsm_state26 = 50'd33554432;
parameter    ap_ST_fsm_state27 = 50'd67108864;
parameter    ap_ST_fsm_state28 = 50'd134217728;
parameter    ap_ST_fsm_state29 = 50'd268435456;
parameter    ap_ST_fsm_state30 = 50'd536870912;
parameter    ap_ST_fsm_state31 = 50'd1073741824;
parameter    ap_ST_fsm_state32 = 50'd2147483648;
parameter    ap_ST_fsm_state33 = 50'd4294967296;
parameter    ap_ST_fsm_state34 = 50'd8589934592;
parameter    ap_ST_fsm_state35 = 50'd17179869184;
parameter    ap_ST_fsm_state36 = 50'd34359738368;
parameter    ap_ST_fsm_state37 = 50'd68719476736;
parameter    ap_ST_fsm_state38 = 50'd137438953472;
parameter    ap_ST_fsm_state39 = 50'd274877906944;
parameter    ap_ST_fsm_state40 = 50'd549755813888;
parameter    ap_ST_fsm_state41 = 50'd1099511627776;
parameter    ap_ST_fsm_state42 = 50'd2199023255552;
parameter    ap_ST_fsm_state43 = 50'd4398046511104;
parameter    ap_ST_fsm_state44 = 50'd8796093022208;
parameter    ap_ST_fsm_state45 = 50'd17592186044416;
parameter    ap_ST_fsm_state46 = 50'd35184372088832;
parameter    ap_ST_fsm_state47 = 50'd70368744177664;
parameter    ap_ST_fsm_state48 = 50'd140737488355328;
parameter    ap_ST_fsm_state49 = 50'd281474976710656;
parameter    ap_ST_fsm_state50 = 50'd562949953421312;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] det0_V_V_dout;
input   det0_V_V_empty_n;
output   det0_V_V_read;
input  [31:0] det1_V_V3_dout;
input   det1_V_V3_empty_n;
output   det1_V_V3_read;
input  [31:0] det2_V_V6_dout;
input   det2_V_V6_empty_n;
output   det2_V_V6_read;
input  [31:0] hessianThreshold_V_dout;
input   hessianThreshold_V_empty_n;
output   hessianThreshold_V_read;
output   m_axi_keyPoints_V_AWVALID;
input   m_axi_keyPoints_V_AWREADY;
output  [31:0] m_axi_keyPoints_V_AWADDR;
output  [0:0] m_axi_keyPoints_V_AWID;
output  [31:0] m_axi_keyPoints_V_AWLEN;
output  [2:0] m_axi_keyPoints_V_AWSIZE;
output  [1:0] m_axi_keyPoints_V_AWBURST;
output  [1:0] m_axi_keyPoints_V_AWLOCK;
output  [3:0] m_axi_keyPoints_V_AWCACHE;
output  [2:0] m_axi_keyPoints_V_AWPROT;
output  [3:0] m_axi_keyPoints_V_AWQOS;
output  [3:0] m_axi_keyPoints_V_AWREGION;
output  [0:0] m_axi_keyPoints_V_AWUSER;
output   m_axi_keyPoints_V_WVALID;
input   m_axi_keyPoints_V_WREADY;
output  [31:0] m_axi_keyPoints_V_WDATA;
output  [3:0] m_axi_keyPoints_V_WSTRB;
output   m_axi_keyPoints_V_WLAST;
output  [0:0] m_axi_keyPoints_V_WID;
output  [0:0] m_axi_keyPoints_V_WUSER;
output   m_axi_keyPoints_V_ARVALID;
input   m_axi_keyPoints_V_ARREADY;
output  [31:0] m_axi_keyPoints_V_ARADDR;
output  [0:0] m_axi_keyPoints_V_ARID;
output  [31:0] m_axi_keyPoints_V_ARLEN;
output  [2:0] m_axi_keyPoints_V_ARSIZE;
output  [1:0] m_axi_keyPoints_V_ARBURST;
output  [1:0] m_axi_keyPoints_V_ARLOCK;
output  [3:0] m_axi_keyPoints_V_ARCACHE;
output  [2:0] m_axi_keyPoints_V_ARPROT;
output  [3:0] m_axi_keyPoints_V_ARQOS;
output  [3:0] m_axi_keyPoints_V_ARREGION;
output  [0:0] m_axi_keyPoints_V_ARUSER;
input   m_axi_keyPoints_V_RVALID;
output   m_axi_keyPoints_V_RREADY;
input  [31:0] m_axi_keyPoints_V_RDATA;
input   m_axi_keyPoints_V_RLAST;
input  [0:0] m_axi_keyPoints_V_RID;
input  [0:0] m_axi_keyPoints_V_RUSER;
input  [1:0] m_axi_keyPoints_V_RRESP;
input   m_axi_keyPoints_V_BVALID;
output   m_axi_keyPoints_V_BREADY;
input  [1:0] m_axi_keyPoints_V_BRESP;
input  [0:0] m_axi_keyPoints_V_BID;
input  [0:0] m_axi_keyPoints_V_BUSER;
input  [31:0] keyPoints_V_offset_dout;
input   keyPoints_V_offset_empty_n;
output   keyPoints_V_offset_read;
output   m_axi_pointNumber_AWVALID;
input   m_axi_pointNumber_AWREADY;
output  [31:0] m_axi_pointNumber_AWADDR;
output  [0:0] m_axi_pointNumber_AWID;
output  [31:0] m_axi_pointNumber_AWLEN;
output  [2:0] m_axi_pointNumber_AWSIZE;
output  [1:0] m_axi_pointNumber_AWBURST;
output  [1:0] m_axi_pointNumber_AWLOCK;
output  [3:0] m_axi_pointNumber_AWCACHE;
output  [2:0] m_axi_pointNumber_AWPROT;
output  [3:0] m_axi_pointNumber_AWQOS;
output  [3:0] m_axi_pointNumber_AWREGION;
output  [0:0] m_axi_pointNumber_AWUSER;
output   m_axi_pointNumber_WVALID;
input   m_axi_pointNumber_WREADY;
output  [31:0] m_axi_pointNumber_WDATA;
output  [3:0] m_axi_pointNumber_WSTRB;
output   m_axi_pointNumber_WLAST;
output  [0:0] m_axi_pointNumber_WID;
output  [0:0] m_axi_pointNumber_WUSER;
output   m_axi_pointNumber_ARVALID;
input   m_axi_pointNumber_ARREADY;
output  [31:0] m_axi_pointNumber_ARADDR;
output  [0:0] m_axi_pointNumber_ARID;
output  [31:0] m_axi_pointNumber_ARLEN;
output  [2:0] m_axi_pointNumber_ARSIZE;
output  [1:0] m_axi_pointNumber_ARBURST;
output  [1:0] m_axi_pointNumber_ARLOCK;
output  [3:0] m_axi_pointNumber_ARCACHE;
output  [2:0] m_axi_pointNumber_ARPROT;
output  [3:0] m_axi_pointNumber_ARQOS;
output  [3:0] m_axi_pointNumber_ARREGION;
output  [0:0] m_axi_pointNumber_ARUSER;
input   m_axi_pointNumber_RVALID;
output   m_axi_pointNumber_RREADY;
input  [31:0] m_axi_pointNumber_RDATA;
input   m_axi_pointNumber_RLAST;
input  [0:0] m_axi_pointNumber_RID;
input  [0:0] m_axi_pointNumber_RUSER;
input  [1:0] m_axi_pointNumber_RRESP;
input   m_axi_pointNumber_BVALID;
output   m_axi_pointNumber_BREADY;
input  [1:0] m_axi_pointNumber_BRESP;
input  [0:0] m_axi_pointNumber_BID;
input  [0:0] m_axi_pointNumber_BUSER;
input  [31:0] pointNumber_offset_dout;
input   pointNumber_offset_empty_n;
output   pointNumber_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg det0_V_V_read;
reg det1_V_V3_read;
reg det2_V_V6_read;
reg hessianThreshold_V_read;
reg m_axi_keyPoints_V_AWVALID;
reg m_axi_keyPoints_V_WVALID;
reg m_axi_keyPoints_V_BREADY;
reg keyPoints_V_offset_read;
reg m_axi_pointNumber_AWVALID;
reg m_axi_pointNumber_WVALID;
reg m_axi_pointNumber_BREADY;
reg pointNumber_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] bRow_V_0;
reg   [1:0] bRow_V_1;
reg   [1:0] bRow_V_2;
reg   [5:0] MSB_V_1;
reg   [12:0] N1_V_address0;
reg    N1_V_ce0;
reg    N1_V_we0;
reg   [31:0] N1_V_d0;
wire   [31:0] N1_V_q0;
reg   [31:0] tmpPointNum;
reg    det0_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_i_fu_917_p2;
reg    det1_V_V3_blk_n;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_29_i_i_reg_1522;
reg   [0:0] or_cond_i_reg_1605;
reg    det2_V_V6_blk_n;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_34_i_i_reg_1546;
reg   [0:0] or_cond2_i_reg_1609;
reg    hessianThreshold_V_blk_n;
reg    keyPoints_V_blk_n_AW;
wire    ap_CS_fsm_state37;
reg    keyPoints_V_blk_n_W;
wire    ap_CS_fsm_state38;
reg    keyPoints_V_blk_n_B;
wire    ap_CS_fsm_state43;
reg    keyPoints_V_offset_blk_n;
reg    pointNumber_blk_n_AW;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_i_fu_567_p2;
reg    pointNumber_blk_n_W;
wire    ap_CS_fsm_state45;
reg    pointNumber_blk_n_B;
wire    ap_CS_fsm_state50;
reg    pointNumber_offset_blk_n;
reg   [31:0] pointNumber_addr_reg_1493;
reg    ap_block_state1;
reg   [31:0] hessianThreshold_V_r_reg_1499;
wire   [32:0] sext_cast_i_fu_558_p1;
reg   [32:0] sext_cast_i_reg_1504;
wire   [9:0] r_i_i_fu_573_p2;
reg   [9:0] r_i_i_reg_1512;
reg    ap_sig_ioackin_m_axi_pointNumber_AWREADY;
reg    ap_block_state2_io;
wire   [31:0] rIndex_1_i_i_fu_601_p3;
reg   [31:0] rIndex_1_i_i_reg_1517;
wire   [0:0] tmp_29_i_i_fu_609_p2;
wire  signed [13:0] tmp_30_fu_821_p1;
reg  signed [13:0] tmp_30_reg_1526;
wire  signed [13:0] tmp_11_i_fu_1478_p2;
reg  signed [13:0] tmp_11_i_reg_1531;
wire    ap_CS_fsm_state3;
(* use_dsp48 = "no" *) wire   [13:0] tmp_12_i_fu_867_p2;
reg   [13:0] tmp_12_i_reg_1536;
(* use_dsp48 = "no" *) wire   [13:0] tmp_13_i_fu_872_p2;
reg   [13:0] tmp_13_i_reg_1541;
wire   [0:0] tmp_34_i_i_fu_877_p2;
wire   [0:0] icmp_fu_893_p2;
reg   [0:0] icmp_reg_1550;
wire   [9:0] val_assign_1_trunc_i_fu_899_p2;
reg   [9:0] val_assign_1_trunc_i_reg_1554;
wire   [0:0] notlhs3_i_fu_905_p2;
reg   [0:0] notlhs3_i_reg_1559;
wire   [0:0] notlhs_i_fu_911_p2;
reg   [0:0] notlhs_i_reg_1565;
wire   [9:0] c_1_i_i_fu_923_p2;
reg   [9:0] c_1_i_i_reg_1573;
reg    ap_block_state4;
wire   [12:0] tmp_39_i_cast190_i_fu_929_p1;
reg   [12:0] tmp_39_i_cast190_i_reg_1578;
wire   [11:0] tmp_39_i_cast189_i_fu_933_p1;
reg   [11:0] tmp_39_i_cast189_i_reg_1588;
reg   [12:0] N1_V_addr_1_reg_1595;
reg   [12:0] N1_V_addr_2_reg_1600;
wire   [0:0] or_cond_i_fu_988_p2;
wire   [0:0] or_cond2_i_fu_1005_p2;
reg    ap_predicate_op178_read_state5;
reg    ap_block_state5;
wire   [12:0] tmp_17_i_fu_1046_p2;
reg   [12:0] tmp_17_i_reg_1616;
reg    ap_predicate_op187_read_state6;
reg    ap_block_state6;
wire   [0:0] or_cond3_i_fu_1032_p2;
wire   [11:0] tmp_33_fu_1052_p1;
reg   [11:0] tmp_33_reg_1622;
wire   [9:0] tmp_60_i_i_fu_1056_p2;
reg   [9:0] tmp_60_i_i_reg_1629;
wire    ap_CS_fsm_state7;
wire   [12:0] tmp_61_i_cast_i_fu_1062_p1;
reg   [12:0] tmp_61_i_cast_i_reg_1634;
wire   [12:0] tmp_18_i_fu_1066_p2;
reg   [12:0] tmp_18_i_reg_1643;
wire   [11:0] tmp_61_i_cast188_i_fu_1082_p1;
reg   [11:0] tmp_61_i_cast188_i_reg_1654;
wire    ap_CS_fsm_state8;
reg   [12:0] N1_V_addr_4_reg_1660;
reg   [12:0] N1_V_addr_5_reg_1665;
reg   [12:0] N1_V_addr_6_reg_1670;
wire   [12:0] tmp_23_i_fu_1113_p2;
reg   [12:0] tmp_23_i_reg_1675;
reg   [12:0] N1_V_addr_7_reg_1680;
reg   [12:0] N1_V_addr_8_reg_1685;
reg   [31:0] N1_V_load_reg_1690;
wire   [12:0] tmp_29_i_fu_1151_p2;
reg   [12:0] tmp_29_i_reg_1698;
wire   [0:0] tmp_63_i_i_fu_1138_p2;
wire   [11:0] tmp_34_fu_1157_p1;
reg   [11:0] tmp_34_reg_1704;
wire   [9:0] tmp_64_i_i_fu_1161_p2;
reg   [9:0] tmp_64_i_i_reg_1711;
wire    ap_CS_fsm_state9;
wire   [11:0] tmp_65_i_cast_i_fu_1167_p1;
reg   [11:0] tmp_65_i_cast_i_reg_1716;
wire   [12:0] tmp_65_i_cast187_i_fu_1181_p1;
reg   [12:0] tmp_65_i_cast187_i_reg_1727;
wire    ap_CS_fsm_state10;
reg   [12:0] N1_V_addr_9_reg_1733;
reg   [12:0] N1_V_addr_10_reg_1738;
reg   [12:0] N1_V_addr_11_reg_1743;
reg   [12:0] N1_V_addr_14_reg_1753;
reg   [12:0] N1_V_addr_15_reg_1758;
reg   [12:0] N1_V_addr_16_reg_1763;
reg   [12:0] N1_V_addr_17_reg_1768;
reg   [12:0] N1_V_addr_18_reg_1773;
reg   [12:0] N1_V_addr_19_reg_1778;
reg   [12:0] N1_V_addr_20_reg_1783;
wire   [12:0] tmp_41_i_fu_1311_p2;
reg   [12:0] tmp_41_i_reg_1806;
wire    ap_CS_fsm_state15;
wire   [0:0] grp_fu_518_p2;
wire   [11:0] tmp_42_i_fu_1321_p2;
reg   [11:0] tmp_42_i_reg_1812;
wire   [11:0] tmp_43_i_fu_1326_p2;
reg   [11:0] tmp_43_i_reg_1817;
wire   [11:0] tmp_44_i_fu_1331_p2;
reg   [11:0] tmp_44_i_reg_1822;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg   [12:0] N1_V_addr_23_reg_1837;
reg   [12:0] N1_V_addr_24_reg_1842;
reg   [12:0] N1_V_addr_25_reg_1847;
reg   [12:0] N1_V_addr_26_reg_1852;
reg   [12:0] N1_V_addr_27_reg_1857;
reg   [12:0] N1_V_addr_28_reg_1862;
reg   [12:0] N1_V_addr_29_reg_1867;
reg   [31:0] keyPoints_V_addr_reg_1932;
wire    ap_CS_fsm_state36;
wire   [9:0] val_assign_2_trunc_i_fu_1449_p2;
reg   [9:0] val_assign_2_trunc_i_reg_1938;
reg    ap_sig_ioackin_m_axi_keyPoints_V_AWREADY;
reg   [31:0] rIndex_i_i_reg_474;
reg   [9:0] val_assign_i_i_reg_485;
reg   [9:0] c_i_i_reg_497;
wire    ap_CS_fsm_state44;
wire  signed [63:0] tmp_14_cast_i_fu_946_p1;
wire  signed [63:0] tmp_15_cast_i_fu_956_p1;
wire  signed [63:0] tmp_16_cast_i_fu_966_p1;
wire   [63:0] tmp_19_cast_i_fu_1077_p1;
wire   [63:0] tmp_20_cast_i_fu_1090_p1;
wire   [63:0] tmp_21_cast_i_fu_1099_p1;
wire   [63:0] tmp_22_cast_i_fu_1108_p1;
wire   [63:0] tmp_24_cast_i_fu_1123_p1;
wire   [63:0] tmp_25_cast_i_fu_1133_p1;
wire   [63:0] tmp_30_cast_i_fu_1176_p1;
wire   [63:0] tmp_26_cast_i_fu_1188_p1;
wire   [63:0] tmp_27_cast_i_fu_1198_p1;
wire   [63:0] tmp_28_cast_i_fu_1208_p1;
wire   [63:0] tmp_31_cast_i_fu_1217_p1;
wire   [63:0] tmp_32_cast_i_fu_1226_p1;
wire   [63:0] tmp_34_cast_i_fu_1242_p1;
wire   [63:0] tmp_35_cast_i_fu_1252_p1;
wire   [63:0] tmp_36_cast_i_fu_1262_p1;
wire   [63:0] tmp_38_cast_i_fu_1278_p1;
wire   [63:0] tmp_39_cast_i_fu_1288_p1;
wire   [63:0] tmp_40_cast_i_fu_1298_p1;
wire   [63:0] tmp_42_cast_i_fu_1336_p1;
wire   [63:0] tmp_43_cast_i_fu_1340_p1;
wire   [63:0] tmp_44_cast_i_fu_1344_p1;
wire   [63:0] tmp_46_cast_i_fu_1358_p1;
wire   [63:0] tmp_47_cast_i_fu_1368_p1;
wire   [63:0] tmp_48_cast_i_fu_1378_p1;
wire   [63:0] tmp_50_cast_i_fu_1393_p1;
wire   [63:0] tmp_51_cast_i_fu_1403_p1;
wire   [63:0] tmp_52_cast_i_fu_1413_p1;
wire   [63:0] tmp_6_i_fu_538_p1;
wire  signed [63:0] sum_cast_i_fu_1427_p1;
reg    ap_reg_ioackin_m_axi_pointNumber_AWREADY;
reg    ap_reg_ioackin_m_axi_keyPoints_V_AWREADY;
reg    ap_reg_ioackin_m_axi_keyPoints_V_WREADY;
reg    ap_sig_ioackin_m_axi_keyPoints_V_WREADY;
reg    ap_reg_ioackin_m_axi_pointNumber_WREADY;
reg    ap_sig_ioackin_m_axi_pointNumber_WREADY;
wire   [1:0] tmp_29_fu_825_p1;
wire   [5:0] p_Result_2_i_i_fu_623_p5;
wire   [31:0] tmp_95_i_i_fu_1437_p2;
reg   [5:0] p_Val2_i_i_fu_178;
wire   [5:0] ret_V_3_i_i_fu_661_p3;
wire   [5:0] tmp_26_fu_810_p2;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire   [29:0] pointNumber_offset3_s_fu_528_p4;
wire   [29:0] tmp_fu_548_p4;
wire   [30:0] tmp_6_fu_579_p4;
wire   [0:0] icmp3_fu_589_p2;
wire   [31:0] rIndex_2_i_i_fu_595_p2;
wire   [1:0] tmp_27_fu_615_p1;
wire   [3:0] tmp_28_fu_651_p1;
wire   [3:0] r_V_i_i_fu_641_p4;
wire   [3:0] tmp_9_i_fu_655_p2;
wire   [1:0] tmp_7_fu_674_p1;
wire   [2:0] Lo_assign_i_i_fu_678_p3;
wire   [2:0] Hi_assign_i_i_fu_686_p2;
wire   [0:0] tmp_9_fu_696_p2;
wire   [2:0] tmp_10_fu_702_p2;
wire   [2:0] tmp_11_fu_708_p3;
wire   [2:0] tmp_13_fu_724_p3;
wire   [2:0] tmp_12_fu_716_p3;
wire   [2:0] tmp_14_fu_732_p2;
wire   [5:0] tmp_8_fu_692_p1;
wire   [5:0] tmp_15_fu_738_p1;
wire   [5:0] tmp_18_fu_750_p2;
reg   [5:0] tmp_19_fu_756_p4;
wire   [5:0] tmp_16_fu_742_p1;
wire   [5:0] tmp_17_fu_746_p1;
wire   [5:0] tmp_21_fu_774_p2;
wire   [5:0] tmp_22_fu_780_p2;
wire   [5:0] p_demorgan_fu_786_p2;
wire   [5:0] tmp_23_fu_792_p2;
wire   [5:0] tmp_20_fu_766_p3;
wire   [5:0] tmp_24_fu_798_p2;
wire   [5:0] tmp_25_fu_804_p2;
wire   [6:0] tmp_31_fu_883_p4;
wire   [13:0] tmp_39_i_cast_i_fu_937_p1;
(* use_dsp48 = "no" *) wire   [13:0] tmp_14_i_fu_941_p2;
wire   [13:0] tmp_15_i_fu_951_p2;
wire   [13:0] tmp_16_i_fu_961_p2;
wire   [0:0] tmp_45_i_i_fu_977_p2;
wire   [0:0] tmp_i_fu_983_p2;
wire   [0:0] notrhs_i_fu_971_p2;
wire   [0:0] grp_fu_512_p2;
wire   [0:0] tmp5_i_fu_1000_p2;
wire   [0:0] notrhs2_i_fu_994_p2;
wire   [6:0] tmp_32_fu_1011_p4;
wire   [0:0] tmp6_i_fu_1027_p2;
wire   [0:0] icmp6_fu_1021_p2;
wire   [1:0] tmp_17_i_fu_1046_p1;
wire   [12:0] tmp_19_i_fu_1071_p2;
wire   [11:0] tmp_20_i_fu_1085_p2;
wire   [11:0] tmp_21_i_fu_1095_p2;
wire   [12:0] tmp_22_i_fu_1104_p2;
wire   [12:0] tmp_24_i_fu_1118_p2;
wire   [12:0] tmp_25_i_fu_1128_p2;
wire   [1:0] tmp_29_i_fu_1151_p1;
wire   [11:0] tmp_30_i_fu_1171_p2;
wire   [11:0] tmp_26_i_fu_1184_p2;
wire   [12:0] tmp_27_i_fu_1193_p2;
wire   [12:0] tmp_28_i_fu_1203_p2;
wire   [11:0] tmp_31_i_fu_1213_p2;
wire   [11:0] tmp_32_i_fu_1222_p2;
wire   [12:0] tmp_33_i_fu_1231_p2;
wire   [12:0] tmp_34_i_fu_1236_p2;
wire   [12:0] tmp_35_i_fu_1247_p2;
wire   [12:0] tmp_36_i_fu_1257_p2;
wire   [12:0] tmp_37_i_fu_1267_p2;
wire   [12:0] tmp_38_i_fu_1272_p2;
wire   [12:0] tmp_39_i_fu_1283_p2;
wire   [12:0] tmp_40_i_fu_1293_p2;
wire   [1:0] tmp_41_i_fu_1311_p1;
wire   [11:0] tmp_35_fu_1317_p1;
wire   [12:0] tmp_45_i_fu_1348_p2;
wire   [12:0] tmp_46_i_fu_1353_p2;
wire   [12:0] tmp_47_i_fu_1363_p2;
wire   [12:0] tmp_48_i_fu_1373_p2;
wire   [12:0] tmp_49_i_fu_1383_p2;
wire   [12:0] tmp_50_i_fu_1388_p2;
wire   [12:0] tmp_51_i_fu_1398_p2;
wire   [12:0] tmp_52_i_fu_1408_p2;
wire  signed [31:0] tmp_94_i_cast_i_fu_1418_p0;
wire  signed [32:0] tmp_94_i_cast_i_fu_1418_p1;
wire   [32:0] sum_i_fu_1422_p2;
wire  signed [31:0] tmp_95_i_i_fu_1437_p0;
wire   [14:0] val_assign_2_trunc_c_fu_1455_p1;
wire   [26:0] tmp_3_i_fu_1458_p4;
wire   [10:0] tmp_11_i_fu_1478_p0;
reg   [49:0] ap_NS_fsm;
wire   [12:0] tmp_17_i_fu_1046_p10;
wire   [12:0] tmp_29_i_fu_1151_p10;
wire   [12:0] tmp_41_i_fu_1311_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 50'd1;
#0 bRow_V_0 = 2'd0;
#0 bRow_V_1 = 2'd0;
#0 bRow_V_2 = 2'd0;
#0 MSB_V_1 = 6'd0;
#0 tmpPointNum = 32'd0;
#0 ap_reg_ioackin_m_axi_pointNumber_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_keyPoints_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_keyPoints_V_WREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_pointNumber_WREADY = 1'b0;
end

findCharacteristiudo #(
    .DataWidth( 32 ),
    .AddressRange( 7119 ),
    .AddressWidth( 13 ))
N1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(N1_V_address0),
    .ce0(N1_V_ce0),
    .we0(N1_V_we0),
    .d0(N1_V_d0),
    .q0(N1_V_q0)
);

surf_Simplified_mvdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 14 ))
surf_Simplified_mvdy_U61(
    .din0(tmp_11_i_fu_1478_p0),
    .din1(tmp_30_reg_1526),
    .dout(tmp_11_i_fu_1478_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state50) & (m_axi_pointNumber_BVALID == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_keyPoints_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            if ((ap_sig_ioackin_m_axi_keyPoints_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_keyPoints_V_AWREADY <= 1'b0;
            end else if ((m_axi_keyPoints_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_keyPoints_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_keyPoints_V_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            if ((ap_sig_ioackin_m_axi_keyPoints_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_keyPoints_V_WREADY <= 1'b0;
            end else if ((m_axi_keyPoints_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_keyPoints_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_pointNumber_AWREADY <= 1'b0;
    end else begin
        if (((exitcond1_i_fu_567_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            if ((1'b0 == ap_block_state2_io)) begin
                ap_reg_ioackin_m_axi_pointNumber_AWREADY <= 1'b0;
            end else if ((m_axi_pointNumber_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_pointNumber_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_pointNumber_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state45)) begin
            if ((ap_sig_ioackin_m_axi_pointNumber_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_pointNumber_WREADY <= 1'b0;
            end else if ((m_axi_pointNumber_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_pointNumber_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        c_i_i_reg_497 <= c_1_i_i_reg_1573;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        c_i_i_reg_497 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (tmp_29_i_i_fu_609_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_567_p2 == 1'd0))) begin
        p_Val2_i_i_fu_178 <= tmp_26_fu_810_p2;
    end else if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (tmp_29_i_i_fu_609_p2 == 1'd0) & (exitcond1_i_fu_567_p2 == 1'd0))) begin
        p_Val2_i_i_fu_178 <= ret_V_3_i_i_fu_661_p3;
    end else if ((~((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_i_i_fu_178 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (exitcond_i_fu_917_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        rIndex_i_i_reg_474 <= rIndex_1_i_i_reg_1517;
    end else if ((~((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rIndex_i_i_reg_474 <= 32'd4294967295;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_pointNumber_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        tmpPointNum <= 32'd0;
    end else if (((grp_fu_518_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        tmpPointNum <= tmp_95_i_i_fu_1437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (exitcond_i_fu_917_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        val_assign_i_i_reg_485 <= r_i_i_reg_1512;
    end else if ((~((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_i_i_reg_485 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (tmp_29_i_i_fu_609_p2 == 1'd0) & (exitcond1_i_fu_567_p2 == 1'd0))) begin
        MSB_V_1 <= p_Result_2_i_i_fu_623_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        N1_V_addr_10_reg_1738 <= tmp_27_cast_i_fu_1198_p1;
        N1_V_addr_11_reg_1743 <= tmp_28_cast_i_fu_1208_p1;
        N1_V_addr_14_reg_1753[11 : 0] <= tmp_32_cast_i_fu_1226_p1[11 : 0];
        N1_V_addr_15_reg_1758 <= tmp_34_cast_i_fu_1242_p1;
        N1_V_addr_16_reg_1763 <= tmp_35_cast_i_fu_1252_p1;
        N1_V_addr_17_reg_1768 <= tmp_36_cast_i_fu_1262_p1;
        N1_V_addr_18_reg_1773 <= tmp_38_cast_i_fu_1278_p1;
        N1_V_addr_19_reg_1778 <= tmp_39_cast_i_fu_1288_p1;
        N1_V_addr_20_reg_1783 <= tmp_40_cast_i_fu_1298_p1;
        N1_V_addr_9_reg_1733[11 : 0] <= tmp_26_cast_i_fu_1188_p1[11 : 0];
        tmp_65_i_cast187_i_reg_1727[9 : 0] <= tmp_65_i_cast187_i_fu_1181_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_917_p2 == 1'd0))) begin
        N1_V_addr_1_reg_1595 <= tmp_15_cast_i_fu_956_p1;
        N1_V_addr_2_reg_1600 <= tmp_16_cast_i_fu_966_p1;
        tmp_39_i_cast189_i_reg_1588[9 : 0] <= tmp_39_i_cast189_i_fu_933_p1[9 : 0];
        tmp_39_i_cast190_i_reg_1578[9 : 0] <= tmp_39_i_cast190_i_fu_929_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        N1_V_addr_23_reg_1837[11 : 0] <= tmp_44_cast_i_fu_1344_p1[11 : 0];
        N1_V_addr_24_reg_1842 <= tmp_46_cast_i_fu_1358_p1;
        N1_V_addr_25_reg_1847 <= tmp_47_cast_i_fu_1368_p1;
        N1_V_addr_26_reg_1852 <= tmp_48_cast_i_fu_1378_p1;
        N1_V_addr_27_reg_1857 <= tmp_50_cast_i_fu_1393_p1;
        N1_V_addr_28_reg_1862 <= tmp_51_cast_i_fu_1403_p1;
        N1_V_addr_29_reg_1867 <= tmp_52_cast_i_fu_1413_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        N1_V_addr_4_reg_1660[11 : 0] <= tmp_20_cast_i_fu_1090_p1[11 : 0];
        N1_V_addr_5_reg_1665[11 : 0] <= tmp_21_cast_i_fu_1099_p1[11 : 0];
        N1_V_addr_6_reg_1670 <= tmp_22_cast_i_fu_1108_p1;
        N1_V_addr_7_reg_1680 <= tmp_24_cast_i_fu_1123_p1;
        N1_V_addr_8_reg_1685 <= tmp_25_cast_i_fu_1133_p1;
        N1_V_load_reg_1690 <= N1_V_q0;
        tmp_23_i_reg_1675 <= tmp_23_i_fu_1113_p2;
        tmp_61_i_cast188_i_reg_1654[9 : 0] <= tmp_61_i_cast188_i_fu_1082_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bRow_V_0 <= tmp_29_fu_825_p1;
        bRow_V_1 <= {{p_Val2_i_i_fu_178[3:2]}};
        bRow_V_2 <= {{p_Val2_i_i_fu_178[5:4]}};
        icmp_reg_1550 <= icmp_fu_893_p2;
        notlhs3_i_reg_1559 <= notlhs3_i_fu_905_p2;
        notlhs_i_reg_1565 <= notlhs_i_fu_911_p2;
        tmp_11_i_reg_1531 <= tmp_11_i_fu_1478_p2;
        tmp_12_i_reg_1536 <= tmp_12_i_fu_867_p2;
        tmp_13_i_reg_1541 <= tmp_13_i_fu_872_p2;
        tmp_34_i_i_reg_1546 <= tmp_34_i_i_fu_877_p2;
        val_assign_1_trunc_i_reg_1554 <= val_assign_1_trunc_i_fu_899_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4))) begin
        c_1_i_i_reg_1573 <= c_1_i_i_fu_923_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hessianThreshold_V_r_reg_1499 <= hessianThreshold_V_dout;
        pointNumber_addr_reg_1493[29 : 0] <= tmp_6_i_fu_538_p1[29 : 0];
        sext_cast_i_reg_1504[29 : 0] <= sext_cast_i_fu_558_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_518_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        keyPoints_V_addr_reg_1932 <= sum_cast_i_fu_1427_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op178_read_state5 == 1'b1) & (det1_V_V3_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & (tmp_34_i_i_reg_1546 == 1'd0))) begin
        or_cond2_i_reg_1609 <= or_cond2_i_fu_1005_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (tmp_29_i_i_reg_1522 == 1'd0) & (exitcond_i_fu_917_p2 == 1'd0))) begin
        or_cond_i_reg_1605 <= or_cond_i_fu_988_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_567_p2 == 1'd0))) begin
        rIndex_1_i_i_reg_1517 <= rIndex_1_i_i_fu_601_p3;
        tmp_29_i_i_reg_1522 <= tmp_29_i_i_fu_609_p2;
        tmp_30_reg_1526 <= tmp_30_fu_821_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        r_i_i_reg_1512 <= r_i_i_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op187_read_state6 == 1'b1) & (det2_V_V6_empty_n == 1'b0)) & (or_cond3_i_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_reg_1550 == 1'd0))) begin
        tmp_17_i_reg_1616 <= tmp_17_i_fu_1046_p2;
        tmp_33_reg_1622 <= tmp_33_fu_1052_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_18_i_reg_1643 <= tmp_18_i_fu_1066_p2;
        tmp_60_i_i_reg_1629 <= tmp_60_i_i_fu_1056_p2;
        tmp_61_i_cast_i_reg_1634[9 : 0] <= tmp_61_i_cast_i_fu_1062_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_63_i_i_fu_1138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_29_i_reg_1698 <= tmp_29_i_fu_1151_p2;
        tmp_34_reg_1704 <= tmp_34_fu_1157_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_fu_518_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        tmp_41_i_reg_1806 <= tmp_41_i_fu_1311_p2;
        tmp_42_i_reg_1812 <= tmp_42_i_fu_1321_p2;
        tmp_43_i_reg_1817 <= tmp_43_i_fu_1326_p2;
        tmp_44_i_reg_1822 <= tmp_44_i_fu_1331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_64_i_i_reg_1711 <= tmp_64_i_i_fu_1161_p2;
        tmp_65_i_cast_i_reg_1716[9 : 0] <= tmp_65_i_cast_i_fu_1167_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_keyPoints_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        val_assign_2_trunc_i_reg_1938 <= val_assign_2_trunc_i_fu_1449_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        N1_V_address0 = N1_V_addr_29_reg_1867;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        N1_V_address0 = N1_V_addr_28_reg_1862;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        N1_V_address0 = N1_V_addr_27_reg_1857;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        N1_V_address0 = N1_V_addr_8_reg_1685;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        N1_V_address0 = N1_V_addr_7_reg_1680;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        N1_V_address0 = N1_V_addr_11_reg_1743;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        N1_V_address0 = N1_V_addr_20_reg_1783;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        N1_V_address0 = N1_V_addr_19_reg_1778;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        N1_V_address0 = N1_V_addr_18_reg_1773;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        N1_V_address0 = N1_V_addr_26_reg_1852;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        N1_V_address0 = N1_V_addr_25_reg_1847;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        N1_V_address0 = N1_V_addr_24_reg_1842;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        N1_V_address0 = N1_V_addr_6_reg_1670;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        N1_V_address0 = N1_V_addr_10_reg_1738;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        N1_V_address0 = N1_V_addr_17_reg_1768;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        N1_V_address0 = N1_V_addr_16_reg_1763;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        N1_V_address0 = N1_V_addr_15_reg_1758;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        N1_V_address0 = N1_V_addr_23_reg_1837;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        N1_V_address0 = tmp_43_cast_i_fu_1340_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        N1_V_address0 = tmp_42_cast_i_fu_1336_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        N1_V_address0 = N1_V_addr_5_reg_1665;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        N1_V_address0 = N1_V_addr_4_reg_1660;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        N1_V_address0 = N1_V_addr_9_reg_1733;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        N1_V_address0 = N1_V_addr_14_reg_1753;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        N1_V_address0 = tmp_31_cast_i_fu_1217_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        N1_V_address0 = tmp_30_cast_i_fu_1176_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        N1_V_address0 = tmp_19_cast_i_fu_1077_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        N1_V_address0 = N1_V_addr_2_reg_1600;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        N1_V_address0 = N1_V_addr_1_reg_1595;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        N1_V_address0 = tmp_14_cast_i_fu_946_p1;
    end else begin
        N1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (~((ap_predicate_op187_read_state6 == 1'b1) & (det2_V_V6_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((ap_predicate_op178_read_state5 == 1'b1) & (det1_V_V3_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | (~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        N1_V_ce0 = 1'b1;
    end else begin
        N1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        N1_V_d0 = det2_V_V6_dout;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        N1_V_d0 = det1_V_V3_dout;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        N1_V_d0 = det0_V_V_dout;
    end else begin
        N1_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op187_read_state6 == 1'b1) & (det2_V_V6_empty_n == 1'b0)) & (or_cond2_i_reg_1609 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (tmp_34_i_i_reg_1546 == 1'd0)) | (~((ap_predicate_op178_read_state5 == 1'b1) & (det1_V_V3_empty_n == 1'b0)) & (or_cond_i_reg_1605 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_29_i_i_reg_1522 == 1'd0)) | (~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_917_p2 == 1'd0)))) begin
        N1_V_we0 = 1'b1;
    end else begin
        N1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (m_axi_pointNumber_BVALID == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (m_axi_pointNumber_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_keyPoints_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_keyPoints_V_AWREADY = m_axi_keyPoints_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_keyPoints_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_keyPoints_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_keyPoints_V_WREADY = m_axi_keyPoints_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_keyPoints_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_pointNumber_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_pointNumber_AWREADY = m_axi_pointNumber_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_pointNumber_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_pointNumber_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_pointNumber_WREADY = m_axi_pointNumber_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_pointNumber_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_917_p2 == 1'd0))) begin
        det0_V_V_blk_n = det0_V_V_empty_n;
    end else begin
        det0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_917_p2 == 1'd0))) begin
        det0_V_V_read = 1'b1;
    end else begin
        det0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_reg_1605 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (tmp_29_i_i_reg_1522 == 1'd0))) begin
        det1_V_V3_blk_n = det1_V_V3_empty_n;
    end else begin
        det1_V_V3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op178_read_state5 == 1'b1) & (det1_V_V3_empty_n == 1'b0)) & (ap_predicate_op178_read_state5 == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        det1_V_V3_read = 1'b1;
    end else begin
        det1_V_V3_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond2_i_reg_1609 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (tmp_34_i_i_reg_1546 == 1'd0))) begin
        det2_V_V6_blk_n = det2_V_V6_empty_n;
    end else begin
        det2_V_V6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op187_read_state6 == 1'b1) & (det2_V_V6_empty_n == 1'b0)) & (ap_predicate_op187_read_state6 == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        det2_V_V6_read = 1'b1;
    end else begin
        det2_V_V6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hessianThreshold_V_blk_n = hessianThreshold_V_empty_n;
    end else begin
        hessianThreshold_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hessianThreshold_V_read = 1'b1;
    end else begin
        hessianThreshold_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        keyPoints_V_blk_n_AW = m_axi_keyPoints_V_AWREADY;
    end else begin
        keyPoints_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        keyPoints_V_blk_n_B = m_axi_keyPoints_V_BVALID;
    end else begin
        keyPoints_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        keyPoints_V_blk_n_W = m_axi_keyPoints_V_WREADY;
    end else begin
        keyPoints_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        keyPoints_V_offset_blk_n = keyPoints_V_offset_empty_n;
    end else begin
        keyPoints_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        keyPoints_V_offset_read = 1'b1;
    end else begin
        keyPoints_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_keyPoints_V_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
        m_axi_keyPoints_V_AWVALID = 1'b1;
    end else begin
        m_axi_keyPoints_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (m_axi_keyPoints_V_BVALID == 1'b1))) begin
        m_axi_keyPoints_V_BREADY = 1'b1;
    end else begin
        m_axi_keyPoints_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_keyPoints_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state38))) begin
        m_axi_keyPoints_V_WVALID = 1'b1;
    end else begin
        m_axi_keyPoints_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_pointNumber_AWREADY == 1'b0) & (exitcond1_i_fu_567_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_pointNumber_AWVALID = 1'b1;
    end else begin
        m_axi_pointNumber_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (m_axi_pointNumber_BVALID == 1'b1))) begin
        m_axi_pointNumber_BREADY = 1'b1;
    end else begin
        m_axi_pointNumber_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_pointNumber_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state45))) begin
        m_axi_pointNumber_WVALID = 1'b1;
    end else begin
        m_axi_pointNumber_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_fu_567_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        pointNumber_blk_n_AW = m_axi_pointNumber_AWREADY;
    end else begin
        pointNumber_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        pointNumber_blk_n_B = m_axi_pointNumber_BVALID;
    end else begin
        pointNumber_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        pointNumber_blk_n_W = m_axi_pointNumber_WREADY;
    end else begin
        pointNumber_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pointNumber_offset_blk_n = pointNumber_offset_empty_n;
    end else begin
        pointNumber_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        pointNumber_offset_read = 1'b1;
    end else begin
        pointNumber_offset_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2) & (exitcond1_i_fu_567_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'b0 == ap_block_state2_io) & (exitcond1_i_fu_567_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if ((~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (exitcond_i_fu_917_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_917_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((ap_predicate_op178_read_state5 == 1'b1) & (det1_V_V3_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((ap_predicate_op187_read_state6 == 1'b1) & (det2_V_V6_empty_n == 1'b0)) & (or_cond3_i_fu_1032_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_reg_1550 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else if ((~((ap_predicate_op187_read_state6 == 1'b1) & (det2_V_V6_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & ((icmp_reg_1550 == 1'd1) | (or_cond3_i_fu_1032_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_63_i_i_fu_1138_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (grp_fu_518_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((ap_sig_ioackin_m_axi_keyPoints_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((ap_sig_ioackin_m_axi_keyPoints_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (m_axi_keyPoints_V_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state45 : begin
            if (((ap_sig_ioackin_m_axi_pointNumber_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (m_axi_pointNumber_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_i_i_fu_686_p2 = (3'd1 | Lo_assign_i_i_fu_678_p3);

assign Lo_assign_i_i_fu_678_p3 = {{tmp_7_fu_674_p1}, {1'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (hessianThreshold_V_empty_n == 1'b0) | (ap_start == 1'b0) | (pointNumber_offset_empty_n == 1'b0) | (keyPoints_V_offset_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((ap_sig_ioackin_m_axi_pointNumber_AWREADY == 1'b0) & (exitcond1_i_fu_567_p2 == 1'd1));
end

always @ (*) begin
    ap_block_state4 = ((det0_V_V_empty_n == 1'b0) & (exitcond_i_fu_917_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state5 = ((ap_predicate_op178_read_state5 == 1'b1) & (det1_V_V3_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((ap_predicate_op187_read_state6 == 1'b1) & (det2_V_V6_empty_n == 1'b0));
end

always @ (*) begin
    ap_predicate_op178_read_state5 = ((or_cond_i_reg_1605 == 1'd1) & (tmp_29_i_i_reg_1522 == 1'd0));
end

always @ (*) begin
    ap_predicate_op187_read_state6 = ((or_cond2_i_reg_1609 == 1'd1) & (tmp_34_i_i_reg_1546 == 1'd0));
end

assign c_1_i_i_fu_923_p2 = (c_i_i_reg_497 + 10'd1);

assign exitcond1_i_fu_567_p2 = ((val_assign_i_i_reg_485 == 10'd591) ? 1'b1 : 1'b0);

assign exitcond_i_fu_917_p2 = ((c_i_i_reg_497 == 10'd791) ? 1'b1 : 1'b0);

assign grp_fu_512_p2 = ((c_i_i_reg_497 < 10'd785) ? 1'b1 : 1'b0);

assign grp_fu_518_p2 = (($signed(N1_V_load_reg_1690) > $signed(N1_V_q0)) ? 1'b1 : 1'b0);

assign icmp3_fu_589_p2 = (($signed(tmp_6_fu_579_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);

assign icmp6_fu_1021_p2 = ((tmp_32_fu_1011_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_fu_893_p2 = ((tmp_31_fu_883_p4 == 7'd0) ? 1'b1 : 1'b0);

assign m_axi_keyPoints_V_ARADDR = 32'd0;

assign m_axi_keyPoints_V_ARBURST = 2'd0;

assign m_axi_keyPoints_V_ARCACHE = 4'd0;

assign m_axi_keyPoints_V_ARID = 1'd0;

assign m_axi_keyPoints_V_ARLEN = 32'd0;

assign m_axi_keyPoints_V_ARLOCK = 2'd0;

assign m_axi_keyPoints_V_ARPROT = 3'd0;

assign m_axi_keyPoints_V_ARQOS = 4'd0;

assign m_axi_keyPoints_V_ARREGION = 4'd0;

assign m_axi_keyPoints_V_ARSIZE = 3'd0;

assign m_axi_keyPoints_V_ARUSER = 1'd0;

assign m_axi_keyPoints_V_ARVALID = 1'b0;

assign m_axi_keyPoints_V_AWADDR = keyPoints_V_addr_reg_1932;

assign m_axi_keyPoints_V_AWBURST = 2'd0;

assign m_axi_keyPoints_V_AWCACHE = 4'd0;

assign m_axi_keyPoints_V_AWID = 1'd0;

assign m_axi_keyPoints_V_AWLEN = 32'd1;

assign m_axi_keyPoints_V_AWLOCK = 2'd0;

assign m_axi_keyPoints_V_AWPROT = 3'd0;

assign m_axi_keyPoints_V_AWQOS = 4'd0;

assign m_axi_keyPoints_V_AWREGION = 4'd0;

assign m_axi_keyPoints_V_AWSIZE = 3'd0;

assign m_axi_keyPoints_V_AWUSER = 1'd0;

assign m_axi_keyPoints_V_RREADY = 1'b0;

assign m_axi_keyPoints_V_WDATA = tmp_3_i_fu_1458_p4;

assign m_axi_keyPoints_V_WID = 1'd0;

assign m_axi_keyPoints_V_WLAST = 1'b0;

assign m_axi_keyPoints_V_WSTRB = 4'd15;

assign m_axi_keyPoints_V_WUSER = 1'd0;

assign m_axi_pointNumber_ARADDR = 32'd0;

assign m_axi_pointNumber_ARBURST = 2'd0;

assign m_axi_pointNumber_ARCACHE = 4'd0;

assign m_axi_pointNumber_ARID = 1'd0;

assign m_axi_pointNumber_ARLEN = 32'd0;

assign m_axi_pointNumber_ARLOCK = 2'd0;

assign m_axi_pointNumber_ARPROT = 3'd0;

assign m_axi_pointNumber_ARQOS = 4'd0;

assign m_axi_pointNumber_ARREGION = 4'd0;

assign m_axi_pointNumber_ARSIZE = 3'd0;

assign m_axi_pointNumber_ARUSER = 1'd0;

assign m_axi_pointNumber_ARVALID = 1'b0;

assign m_axi_pointNumber_AWADDR = pointNumber_addr_reg_1493;

assign m_axi_pointNumber_AWBURST = 2'd0;

assign m_axi_pointNumber_AWCACHE = 4'd0;

assign m_axi_pointNumber_AWID = 1'd0;

assign m_axi_pointNumber_AWLEN = 32'd1;

assign m_axi_pointNumber_AWLOCK = 2'd0;

assign m_axi_pointNumber_AWPROT = 3'd0;

assign m_axi_pointNumber_AWQOS = 4'd0;

assign m_axi_pointNumber_AWREGION = 4'd0;

assign m_axi_pointNumber_AWSIZE = 3'd0;

assign m_axi_pointNumber_AWUSER = 1'd0;

assign m_axi_pointNumber_RREADY = 1'b0;

assign m_axi_pointNumber_WDATA = tmpPointNum;

assign m_axi_pointNumber_WID = 1'd0;

assign m_axi_pointNumber_WLAST = 1'b0;

assign m_axi_pointNumber_WSTRB = 4'd15;

assign m_axi_pointNumber_WUSER = 1'd0;

assign notlhs3_i_fu_905_p2 = ((val_assign_i_i_reg_485 < 10'd585) ? 1'b1 : 1'b0);

assign notlhs_i_fu_911_p2 = ((val_assign_i_i_reg_485 < 10'd588) ? 1'b1 : 1'b0);

assign notrhs2_i_fu_994_p2 = ((c_i_i_reg_497 > 10'd5) ? 1'b1 : 1'b0);

assign notrhs_i_fu_971_p2 = ((c_i_i_reg_497 > 10'd2) ? 1'b1 : 1'b0);

assign or_cond2_i_fu_1005_p2 = (tmp5_i_fu_1000_p2 & notrhs2_i_fu_994_p2);

assign or_cond3_i_fu_1032_p2 = (tmp6_i_fu_1027_p2 & icmp6_fu_1021_p2);

assign or_cond_i_fu_988_p2 = (tmp_i_fu_983_p2 & notrhs_i_fu_971_p2);

assign p_Result_2_i_i_fu_623_p5 = {{tmp_27_fu_615_p1}, {MSB_V_1[3:0]}};

assign p_demorgan_fu_786_p2 = (tmp_22_fu_780_p2 & tmp_21_fu_774_p2);

assign pointNumber_offset3_s_fu_528_p4 = {{pointNumber_offset_dout[31:2]}};

assign rIndex_1_i_i_fu_601_p3 = ((icmp3_fu_589_p2[0:0] === 1'b1) ? rIndex_2_i_i_fu_595_p2 : 32'd0);

assign rIndex_2_i_i_fu_595_p2 = (rIndex_i_i_reg_474 + 32'd1);

assign r_V_i_i_fu_641_p4 = {{p_Val2_i_i_fu_178[5:2]}};

assign r_i_i_fu_573_p2 = (val_assign_i_i_reg_485 + 10'd1);

assign ret_V_3_i_i_fu_661_p3 = {{tmp_27_fu_615_p1}, {tmp_9_i_fu_655_p2}};

assign sext_cast_i_fu_558_p1 = tmp_fu_548_p4;

assign sum_cast_i_fu_1427_p1 = $signed(sum_i_fu_1422_p2);

assign sum_i_fu_1422_p2 = ($signed(sext_cast_i_reg_1504) + $signed(tmp_94_i_cast_i_fu_1418_p1));

assign tmp5_i_fu_1000_p2 = (notlhs3_i_reg_1559 & grp_fu_512_p2);

assign tmp6_i_fu_1027_p2 = (notlhs3_i_reg_1559 & grp_fu_512_p2);

assign tmp_10_fu_702_p2 = ($signed(3'd5) - $signed(Lo_assign_i_i_fu_678_p3));

assign tmp_11_fu_708_p3 = ((tmp_9_fu_696_p2[0:0] === 1'b1) ? Lo_assign_i_i_fu_678_p3 : Hi_assign_i_i_fu_686_p2);

assign tmp_11_i_fu_1478_p0 = 14'd791;

assign tmp_12_fu_716_p3 = ((tmp_9_fu_696_p2[0:0] === 1'b1) ? Hi_assign_i_i_fu_686_p2 : Lo_assign_i_i_fu_678_p3);

assign tmp_12_i_fu_867_p2 = ($signed(14'd2373) + $signed(tmp_11_i_fu_1478_p2));

assign tmp_13_fu_724_p3 = ((tmp_9_fu_696_p2[0:0] === 1'b1) ? tmp_10_fu_702_p2 : Lo_assign_i_i_fu_678_p3);

assign tmp_13_i_fu_872_p2 = ($signed(14'd4746) + $signed(tmp_11_i_fu_1478_p2));

assign tmp_14_cast_i_fu_946_p1 = $signed(tmp_14_i_fu_941_p2);

assign tmp_14_fu_732_p2 = ($signed(3'd5) - $signed(tmp_11_fu_708_p3));

assign tmp_14_i_fu_941_p2 = ($signed(tmp_11_i_reg_1531) + $signed(tmp_39_i_cast_i_fu_937_p1));

assign tmp_15_cast_i_fu_956_p1 = $signed(tmp_15_i_fu_951_p2);

assign tmp_15_fu_738_p1 = tmp_13_fu_724_p3;

assign tmp_15_i_fu_951_p2 = (tmp_12_i_reg_1536 + tmp_39_i_cast_i_fu_937_p1);

assign tmp_16_cast_i_fu_966_p1 = $signed(tmp_16_i_fu_961_p2);

assign tmp_16_fu_742_p1 = tmp_12_fu_716_p3;

assign tmp_16_i_fu_961_p2 = (tmp_13_i_reg_1541 + tmp_39_i_cast_i_fu_937_p1);

assign tmp_17_fu_746_p1 = tmp_14_fu_732_p2;

assign tmp_17_i_fu_1046_p1 = tmp_17_i_fu_1046_p10;

assign tmp_17_i_fu_1046_p10 = bRow_V_1;

assign tmp_17_i_fu_1046_p2 = (13'd791 * tmp_17_i_fu_1046_p1);

assign tmp_18_fu_750_p2 = tmp_8_fu_692_p1 << tmp_15_fu_738_p1;

assign tmp_18_i_fu_1066_p2 = (13'd2373 + tmp_17_i_reg_1616);

assign tmp_19_cast_i_fu_1077_p1 = tmp_19_i_fu_1071_p2;

integer ap_tvar_int_0;

always @ (tmp_18_fu_750_p2) begin
    for (ap_tvar_int_0 = 6 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 5 - 0) begin
            tmp_19_fu_756_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_19_fu_756_p4[ap_tvar_int_0] = tmp_18_fu_750_p2[5 - ap_tvar_int_0];
        end
    end
end

assign tmp_19_i_fu_1071_p2 = (tmp_61_i_cast_i_fu_1062_p1 + tmp_18_i_fu_1066_p2);

assign tmp_20_cast_i_fu_1090_p1 = tmp_20_i_fu_1085_p2;

assign tmp_20_fu_766_p3 = ((tmp_9_fu_696_p2[0:0] === 1'b1) ? tmp_19_fu_756_p4 : tmp_18_fu_750_p2);

assign tmp_20_i_fu_1085_p2 = (tmp_61_i_cast188_i_fu_1082_p1 + tmp_33_reg_1622);

assign tmp_21_cast_i_fu_1099_p1 = tmp_21_i_fu_1095_p2;

assign tmp_21_fu_774_p2 = 6'd63 << tmp_16_fu_742_p1;

assign tmp_21_i_fu_1095_p2 = (tmp_39_i_cast189_i_reg_1588 + tmp_33_reg_1622);

assign tmp_22_cast_i_fu_1108_p1 = tmp_22_i_fu_1104_p2;

assign tmp_22_fu_780_p2 = 6'd63 >> tmp_17_fu_746_p1;

assign tmp_22_i_fu_1104_p2 = (tmp_39_i_cast190_i_reg_1578 + tmp_18_i_reg_1643);

assign tmp_23_fu_792_p2 = (p_demorgan_fu_786_p2 ^ 6'd63);

assign tmp_23_i_fu_1113_p2 = ($signed(13'd4746) + $signed(tmp_17_i_reg_1616));

assign tmp_24_cast_i_fu_1123_p1 = tmp_24_i_fu_1118_p2;

assign tmp_24_fu_798_p2 = (tmp_23_fu_792_p2 & p_Val2_i_i_fu_178);

assign tmp_24_i_fu_1118_p2 = (tmp_61_i_cast_i_reg_1634 + tmp_23_i_fu_1113_p2);

assign tmp_25_cast_i_fu_1133_p1 = tmp_25_i_fu_1128_p2;

assign tmp_25_fu_804_p2 = (tmp_20_fu_766_p3 & p_demorgan_fu_786_p2);

assign tmp_25_i_fu_1128_p2 = (tmp_39_i_cast190_i_reg_1578 + tmp_23_i_fu_1113_p2);

assign tmp_26_cast_i_fu_1188_p1 = tmp_26_i_fu_1184_p2;

assign tmp_26_fu_810_p2 = (tmp_25_fu_804_p2 | tmp_24_fu_798_p2);

assign tmp_26_i_fu_1184_p2 = (tmp_65_i_cast_i_reg_1716 + tmp_33_reg_1622);

assign tmp_27_cast_i_fu_1198_p1 = tmp_27_i_fu_1193_p2;

assign tmp_27_fu_615_p1 = p_Val2_i_i_fu_178[1:0];

assign tmp_27_i_fu_1193_p2 = (tmp_65_i_cast187_i_fu_1181_p1 + tmp_18_i_reg_1643);

assign tmp_28_cast_i_fu_1208_p1 = tmp_28_i_fu_1203_p2;

assign tmp_28_fu_651_p1 = MSB_V_1[3:0];

assign tmp_28_i_fu_1203_p2 = (tmp_65_i_cast187_i_fu_1181_p1 + tmp_23_i_reg_1675);

assign tmp_29_fu_825_p1 = p_Val2_i_i_fu_178[1:0];

assign tmp_29_i_fu_1151_p1 = tmp_29_i_fu_1151_p10;

assign tmp_29_i_fu_1151_p10 = bRow_V_0;

assign tmp_29_i_fu_1151_p2 = (13'd791 * tmp_29_i_fu_1151_p1);

assign tmp_29_i_i_fu_609_p2 = ((val_assign_i_i_reg_485 < 10'd3) ? 1'b1 : 1'b0);

assign tmp_30_cast_i_fu_1176_p1 = tmp_30_i_fu_1171_p2;

assign tmp_30_fu_821_p1 = rIndex_1_i_i_fu_601_p3[13:0];

assign tmp_30_i_fu_1171_p2 = (tmp_65_i_cast_i_fu_1167_p1 + tmp_34_reg_1704);

assign tmp_31_cast_i_fu_1217_p1 = tmp_31_i_fu_1213_p2;

assign tmp_31_fu_883_p4 = {{val_assign_i_i_reg_485[9:3]}};

assign tmp_31_i_fu_1213_p2 = (tmp_61_i_cast188_i_reg_1654 + tmp_34_reg_1704);

assign tmp_32_cast_i_fu_1226_p1 = tmp_32_i_fu_1222_p2;

assign tmp_32_fu_1011_p4 = {{c_i_i_reg_497[9:3]}};

assign tmp_32_i_fu_1222_p2 = (tmp_39_i_cast189_i_reg_1588 + tmp_34_reg_1704);

assign tmp_33_fu_1052_p1 = tmp_17_i_fu_1046_p2[11:0];

assign tmp_33_i_fu_1231_p2 = (13'd2373 + tmp_29_i_reg_1698);

assign tmp_34_cast_i_fu_1242_p1 = tmp_34_i_fu_1236_p2;

assign tmp_34_fu_1157_p1 = tmp_29_i_fu_1151_p2[11:0];

assign tmp_34_i_fu_1236_p2 = (tmp_65_i_cast187_i_fu_1181_p1 + tmp_33_i_fu_1231_p2);

assign tmp_34_i_i_fu_877_p2 = ((val_assign_i_i_reg_485 < 10'd6) ? 1'b1 : 1'b0);

assign tmp_35_cast_i_fu_1252_p1 = tmp_35_i_fu_1247_p2;

assign tmp_35_fu_1317_p1 = tmp_41_i_fu_1311_p2[11:0];

assign tmp_35_i_fu_1247_p2 = (tmp_61_i_cast_i_reg_1634 + tmp_33_i_fu_1231_p2);

assign tmp_36_cast_i_fu_1262_p1 = tmp_36_i_fu_1257_p2;

assign tmp_36_i_fu_1257_p2 = (tmp_39_i_cast190_i_reg_1578 + tmp_33_i_fu_1231_p2);

assign tmp_37_i_fu_1267_p2 = ($signed(13'd4746) + $signed(tmp_29_i_reg_1698));

assign tmp_38_cast_i_fu_1278_p1 = tmp_38_i_fu_1272_p2;

assign tmp_38_i_fu_1272_p2 = (tmp_65_i_cast187_i_fu_1181_p1 + tmp_37_i_fu_1267_p2);

assign tmp_39_cast_i_fu_1288_p1 = tmp_39_i_fu_1283_p2;

assign tmp_39_i_cast189_i_fu_933_p1 = c_i_i_reg_497;

assign tmp_39_i_cast190_i_fu_929_p1 = c_i_i_reg_497;

assign tmp_39_i_cast_i_fu_937_p1 = c_i_i_reg_497;

assign tmp_39_i_fu_1283_p2 = (tmp_61_i_cast_i_reg_1634 + tmp_37_i_fu_1267_p2);

assign tmp_3_i_fu_1458_p4 = {{{val_assign_1_trunc_i_reg_1554}, {val_assign_2_trunc_c_fu_1455_p1}}, {2'd0}};

assign tmp_40_cast_i_fu_1298_p1 = tmp_40_i_fu_1293_p2;

assign tmp_40_i_fu_1293_p2 = (tmp_39_i_cast190_i_reg_1578 + tmp_37_i_fu_1267_p2);

assign tmp_41_i_fu_1311_p1 = tmp_41_i_fu_1311_p10;

assign tmp_41_i_fu_1311_p10 = bRow_V_2;

assign tmp_41_i_fu_1311_p2 = (13'd791 * tmp_41_i_fu_1311_p1);

assign tmp_42_cast_i_fu_1336_p1 = tmp_42_i_reg_1812;

assign tmp_42_i_fu_1321_p2 = (tmp_65_i_cast_i_reg_1716 + tmp_35_fu_1317_p1);

assign tmp_43_cast_i_fu_1340_p1 = tmp_43_i_reg_1817;

assign tmp_43_i_fu_1326_p2 = (tmp_61_i_cast188_i_reg_1654 + tmp_35_fu_1317_p1);

assign tmp_44_cast_i_fu_1344_p1 = tmp_44_i_reg_1822;

assign tmp_44_i_fu_1331_p2 = (tmp_39_i_cast189_i_reg_1588 + tmp_35_fu_1317_p1);

assign tmp_45_i_fu_1348_p2 = (13'd2373 + tmp_41_i_reg_1806);

assign tmp_45_i_i_fu_977_p2 = ((c_i_i_reg_497 < 10'd788) ? 1'b1 : 1'b0);

assign tmp_46_cast_i_fu_1358_p1 = tmp_46_i_fu_1353_p2;

assign tmp_46_i_fu_1353_p2 = (tmp_65_i_cast187_i_reg_1727 + tmp_45_i_fu_1348_p2);

assign tmp_47_cast_i_fu_1368_p1 = tmp_47_i_fu_1363_p2;

assign tmp_47_i_fu_1363_p2 = (tmp_61_i_cast_i_reg_1634 + tmp_45_i_fu_1348_p2);

assign tmp_48_cast_i_fu_1378_p1 = tmp_48_i_fu_1373_p2;

assign tmp_48_i_fu_1373_p2 = (tmp_39_i_cast190_i_reg_1578 + tmp_45_i_fu_1348_p2);

assign tmp_49_i_fu_1383_p2 = ($signed(13'd4746) + $signed(tmp_41_i_reg_1806));

assign tmp_50_cast_i_fu_1393_p1 = tmp_50_i_fu_1388_p2;

assign tmp_50_i_fu_1388_p2 = (tmp_65_i_cast187_i_reg_1727 + tmp_49_i_fu_1383_p2);

assign tmp_51_cast_i_fu_1403_p1 = tmp_51_i_fu_1398_p2;

assign tmp_51_i_fu_1398_p2 = (tmp_61_i_cast_i_reg_1634 + tmp_49_i_fu_1383_p2);

assign tmp_52_cast_i_fu_1413_p1 = tmp_52_i_fu_1408_p2;

assign tmp_52_i_fu_1408_p2 = (tmp_39_i_cast190_i_reg_1578 + tmp_49_i_fu_1383_p2);

assign tmp_60_i_i_fu_1056_p2 = ($signed(10'd1023) + $signed(c_i_i_reg_497));

assign tmp_61_i_cast188_i_fu_1082_p1 = tmp_60_i_i_reg_1629;

assign tmp_61_i_cast_i_fu_1062_p1 = tmp_60_i_i_fu_1056_p2;

assign tmp_63_i_i_fu_1138_p2 = (($signed(N1_V_q0) > $signed(hessianThreshold_V_r_reg_1499)) ? 1'b1 : 1'b0);

assign tmp_64_i_i_fu_1161_p2 = ($signed(10'd1022) + $signed(c_i_i_reg_497));

assign tmp_65_i_cast187_i_fu_1181_p1 = tmp_64_i_i_reg_1711;

assign tmp_65_i_cast_i_fu_1167_p1 = tmp_64_i_i_fu_1161_p2;

assign tmp_6_fu_579_p4 = {{rIndex_i_i_reg_474[31:1]}};

assign tmp_6_i_fu_538_p1 = pointNumber_offset3_s_fu_528_p4;

assign tmp_7_fu_674_p1 = val_assign_i_i_reg_485[1:0];

assign tmp_8_fu_692_p1 = val_assign_i_i_reg_485[5:0];

assign tmp_94_i_cast_i_fu_1418_p0 = tmpPointNum;

assign tmp_94_i_cast_i_fu_1418_p1 = tmp_94_i_cast_i_fu_1418_p0;

assign tmp_95_i_i_fu_1437_p0 = tmpPointNum;

assign tmp_95_i_i_fu_1437_p2 = ($signed(tmp_95_i_i_fu_1437_p0) + $signed(32'd1));

assign tmp_9_fu_696_p2 = ((Lo_assign_i_i_fu_678_p3 > Hi_assign_i_i_fu_686_p2) ? 1'b1 : 1'b0);

assign tmp_9_i_fu_655_p2 = (tmp_28_fu_651_p1 | r_V_i_i_fu_641_p4);

assign tmp_fu_548_p4 = {{keyPoints_V_offset_dout[31:2]}};

assign tmp_i_fu_983_p2 = (tmp_45_i_i_fu_977_p2 & notlhs_i_reg_1565);

assign val_assign_1_trunc_i_fu_899_p2 = (10'd4 + val_assign_i_i_reg_485);

assign val_assign_2_trunc_c_fu_1455_p1 = val_assign_2_trunc_i_reg_1938;

assign val_assign_2_trunc_i_fu_1449_p2 = (c_i_i_reg_497 + 10'd4);

always @ (posedge ap_clk) begin
    pointNumber_addr_reg_1493[31:30] <= 2'b00;
    sext_cast_i_reg_1504[32:30] <= 3'b000;
    tmp_39_i_cast190_i_reg_1578[12:10] <= 3'b000;
    tmp_39_i_cast189_i_reg_1588[11:10] <= 2'b00;
    tmp_61_i_cast_i_reg_1634[12:10] <= 3'b000;
    tmp_61_i_cast188_i_reg_1654[11:10] <= 2'b00;
    N1_V_addr_4_reg_1660[12] <= 1'b0;
    N1_V_addr_5_reg_1665[12] <= 1'b0;
    tmp_65_i_cast_i_reg_1716[11:10] <= 2'b00;
    tmp_65_i_cast187_i_reg_1727[12:10] <= 3'b000;
    N1_V_addr_9_reg_1733[12] <= 1'b0;
    N1_V_addr_14_reg_1753[12] <= 1'b0;
    N1_V_addr_23_reg_1837[12] <= 1'b0;
end

endmodule //findCharacteristicPo
