// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _surf_Simplified_HH_
#define _surf_Simplified_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "surf_Simplified_entr.h"
#include "AXIvideo2Mat.h"
#include "integralImg.h"
#include "Block_codeRepl47_pro.h"
#include "HessianDetector.h"
#include "fifo_w32_d3_A.h"
#include "fifo_w8_d2_A.h"
#include "fifo_w32_d2_A_x.h"
#include "start_for_HessianxdS.h"
#include "start_for_integrayd2.h"
#include "surf_Simplified_AXILiteS_s_axi.h"
#include "surf_Simplified_threshold_s_axi.h"
#include "surf_Simplified_keyPoints_m_axi.h"
#include "surf_Simplified_pointNumber_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32,
         unsigned int C_S_AXI_THRESHOLD_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_THRESHOLD_DATA_WIDTH = 32,
         unsigned int C_M_AXI_KEYPOINTS_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_KEYPOINTS_ID_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_DATA_WIDTH = 32,
         unsigned int C_M_AXI_KEYPOINTS_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_KEYPOINTS_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINTNUMBER_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_POINTNUMBER_ID_WIDTH = 1,
         unsigned int C_M_AXI_POINTNUMBER_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINTNUMBER_DATA_WIDTH = 32,
         unsigned int C_M_AXI_POINTNUMBER_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINTNUMBER_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINTNUMBER_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_POINTNUMBER_BUSER_WIDTH = 1>
struct surf_Simplified : public sc_module {
    // Port declarations 136
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_logic > s_axi_threshold_AWVALID;
    sc_out< sc_logic > s_axi_threshold_AWREADY;
    sc_in< sc_uint<C_S_AXI_THRESHOLD_ADDR_WIDTH> > s_axi_threshold_AWADDR;
    sc_in< sc_logic > s_axi_threshold_WVALID;
    sc_out< sc_logic > s_axi_threshold_WREADY;
    sc_in< sc_uint<C_S_AXI_THRESHOLD_DATA_WIDTH> > s_axi_threshold_WDATA;
    sc_in< sc_uint<C_S_AXI_THRESHOLD_DATA_WIDTH/8> > s_axi_threshold_WSTRB;
    sc_in< sc_logic > s_axi_threshold_ARVALID;
    sc_out< sc_logic > s_axi_threshold_ARREADY;
    sc_in< sc_uint<C_S_AXI_THRESHOLD_ADDR_WIDTH> > s_axi_threshold_ARADDR;
    sc_out< sc_logic > s_axi_threshold_RVALID;
    sc_in< sc_logic > s_axi_threshold_RREADY;
    sc_out< sc_uint<C_S_AXI_THRESHOLD_DATA_WIDTH> > s_axi_threshold_RDATA;
    sc_out< sc_lv<2> > s_axi_threshold_RRESP;
    sc_out< sc_logic > s_axi_threshold_BVALID;
    sc_in< sc_logic > s_axi_threshold_BREADY;
    sc_out< sc_lv<2> > s_axi_threshold_BRESP;
    sc_out< sc_logic > m_axi_keyPoints_AWVALID;
    sc_in< sc_logic > m_axi_keyPoints_AWREADY;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_ADDR_WIDTH> > m_axi_keyPoints_AWADDR;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_ID_WIDTH> > m_axi_keyPoints_AWID;
    sc_out< sc_lv<8> > m_axi_keyPoints_AWLEN;
    sc_out< sc_lv<3> > m_axi_keyPoints_AWSIZE;
    sc_out< sc_lv<2> > m_axi_keyPoints_AWBURST;
    sc_out< sc_lv<2> > m_axi_keyPoints_AWLOCK;
    sc_out< sc_lv<4> > m_axi_keyPoints_AWCACHE;
    sc_out< sc_lv<3> > m_axi_keyPoints_AWPROT;
    sc_out< sc_lv<4> > m_axi_keyPoints_AWQOS;
    sc_out< sc_lv<4> > m_axi_keyPoints_AWREGION;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_AWUSER_WIDTH> > m_axi_keyPoints_AWUSER;
    sc_out< sc_logic > m_axi_keyPoints_WVALID;
    sc_in< sc_logic > m_axi_keyPoints_WREADY;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_DATA_WIDTH> > m_axi_keyPoints_WDATA;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_DATA_WIDTH/8> > m_axi_keyPoints_WSTRB;
    sc_out< sc_logic > m_axi_keyPoints_WLAST;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_ID_WIDTH> > m_axi_keyPoints_WID;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_WUSER_WIDTH> > m_axi_keyPoints_WUSER;
    sc_out< sc_logic > m_axi_keyPoints_ARVALID;
    sc_in< sc_logic > m_axi_keyPoints_ARREADY;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_ADDR_WIDTH> > m_axi_keyPoints_ARADDR;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_ID_WIDTH> > m_axi_keyPoints_ARID;
    sc_out< sc_lv<8> > m_axi_keyPoints_ARLEN;
    sc_out< sc_lv<3> > m_axi_keyPoints_ARSIZE;
    sc_out< sc_lv<2> > m_axi_keyPoints_ARBURST;
    sc_out< sc_lv<2> > m_axi_keyPoints_ARLOCK;
    sc_out< sc_lv<4> > m_axi_keyPoints_ARCACHE;
    sc_out< sc_lv<3> > m_axi_keyPoints_ARPROT;
    sc_out< sc_lv<4> > m_axi_keyPoints_ARQOS;
    sc_out< sc_lv<4> > m_axi_keyPoints_ARREGION;
    sc_out< sc_uint<C_M_AXI_KEYPOINTS_ARUSER_WIDTH> > m_axi_keyPoints_ARUSER;
    sc_in< sc_logic > m_axi_keyPoints_RVALID;
    sc_out< sc_logic > m_axi_keyPoints_RREADY;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_DATA_WIDTH> > m_axi_keyPoints_RDATA;
    sc_in< sc_logic > m_axi_keyPoints_RLAST;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_ID_WIDTH> > m_axi_keyPoints_RID;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_RUSER_WIDTH> > m_axi_keyPoints_RUSER;
    sc_in< sc_lv<2> > m_axi_keyPoints_RRESP;
    sc_in< sc_logic > m_axi_keyPoints_BVALID;
    sc_out< sc_logic > m_axi_keyPoints_BREADY;
    sc_in< sc_lv<2> > m_axi_keyPoints_BRESP;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_ID_WIDTH> > m_axi_keyPoints_BID;
    sc_in< sc_uint<C_M_AXI_KEYPOINTS_BUSER_WIDTH> > m_axi_keyPoints_BUSER;
    sc_out< sc_logic > m_axi_pointNumber_AWVALID;
    sc_in< sc_logic > m_axi_pointNumber_AWREADY;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_ADDR_WIDTH> > m_axi_pointNumber_AWADDR;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_ID_WIDTH> > m_axi_pointNumber_AWID;
    sc_out< sc_lv<8> > m_axi_pointNumber_AWLEN;
    sc_out< sc_lv<3> > m_axi_pointNumber_AWSIZE;
    sc_out< sc_lv<2> > m_axi_pointNumber_AWBURST;
    sc_out< sc_lv<2> > m_axi_pointNumber_AWLOCK;
    sc_out< sc_lv<4> > m_axi_pointNumber_AWCACHE;
    sc_out< sc_lv<3> > m_axi_pointNumber_AWPROT;
    sc_out< sc_lv<4> > m_axi_pointNumber_AWQOS;
    sc_out< sc_lv<4> > m_axi_pointNumber_AWREGION;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_AWUSER_WIDTH> > m_axi_pointNumber_AWUSER;
    sc_out< sc_logic > m_axi_pointNumber_WVALID;
    sc_in< sc_logic > m_axi_pointNumber_WREADY;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_DATA_WIDTH> > m_axi_pointNumber_WDATA;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_DATA_WIDTH/8> > m_axi_pointNumber_WSTRB;
    sc_out< sc_logic > m_axi_pointNumber_WLAST;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_ID_WIDTH> > m_axi_pointNumber_WID;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_WUSER_WIDTH> > m_axi_pointNumber_WUSER;
    sc_out< sc_logic > m_axi_pointNumber_ARVALID;
    sc_in< sc_logic > m_axi_pointNumber_ARREADY;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_ADDR_WIDTH> > m_axi_pointNumber_ARADDR;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_ID_WIDTH> > m_axi_pointNumber_ARID;
    sc_out< sc_lv<8> > m_axi_pointNumber_ARLEN;
    sc_out< sc_lv<3> > m_axi_pointNumber_ARSIZE;
    sc_out< sc_lv<2> > m_axi_pointNumber_ARBURST;
    sc_out< sc_lv<2> > m_axi_pointNumber_ARLOCK;
    sc_out< sc_lv<4> > m_axi_pointNumber_ARCACHE;
    sc_out< sc_lv<3> > m_axi_pointNumber_ARPROT;
    sc_out< sc_lv<4> > m_axi_pointNumber_ARQOS;
    sc_out< sc_lv<4> > m_axi_pointNumber_ARREGION;
    sc_out< sc_uint<C_M_AXI_POINTNUMBER_ARUSER_WIDTH> > m_axi_pointNumber_ARUSER;
    sc_in< sc_logic > m_axi_pointNumber_RVALID;
    sc_out< sc_logic > m_axi_pointNumber_RREADY;
    sc_in< sc_uint<C_M_AXI_POINTNUMBER_DATA_WIDTH> > m_axi_pointNumber_RDATA;
    sc_in< sc_logic > m_axi_pointNumber_RLAST;
    sc_in< sc_uint<C_M_AXI_POINTNUMBER_ID_WIDTH> > m_axi_pointNumber_RID;
    sc_in< sc_uint<C_M_AXI_POINTNUMBER_RUSER_WIDTH> > m_axi_pointNumber_RUSER;
    sc_in< sc_lv<2> > m_axi_pointNumber_RRESP;
    sc_in< sc_logic > m_axi_pointNumber_BVALID;
    sc_out< sc_logic > m_axi_pointNumber_BREADY;
    sc_in< sc_lv<2> > m_axi_pointNumber_BRESP;
    sc_in< sc_uint<C_M_AXI_POINTNUMBER_ID_WIDTH> > m_axi_pointNumber_BID;
    sc_in< sc_uint<C_M_AXI_POINTNUMBER_BUSER_WIDTH> > m_axi_pointNumber_BUSER;
    sc_in< sc_lv<24> > video_in_TDATA;
    sc_in< sc_lv<3> > video_in_TKEEP;
    sc_in< sc_lv<3> > video_in_TSTRB;
    sc_in< sc_lv<1> > video_in_TUSER;
    sc_in< sc_lv<1> > video_in_TLAST;
    sc_in< sc_lv<1> > video_in_TID;
    sc_in< sc_lv<1> > video_in_TDEST;
    sc_in< sc_logic > video_in_TVALID;
    sc_out< sc_logic > video_in_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const6;


    // Module declarations
    surf_Simplified(sc_module_name name);
    SC_HAS_PROCESS(surf_Simplified);

    ~surf_Simplified();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    surf_Simplified_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* surf_Simplified_AXILiteS_s_axi_U;
    surf_Simplified_threshold_s_axi<C_S_AXI_THRESHOLD_ADDR_WIDTH,C_S_AXI_THRESHOLD_DATA_WIDTH>* surf_Simplified_threshold_s_axi_U;
    surf_Simplified_keyPoints_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_KEYPOINTS_ID_WIDTH,C_M_AXI_KEYPOINTS_ADDR_WIDTH,C_M_AXI_KEYPOINTS_DATA_WIDTH,C_M_AXI_KEYPOINTS_AWUSER_WIDTH,C_M_AXI_KEYPOINTS_ARUSER_WIDTH,C_M_AXI_KEYPOINTS_WUSER_WIDTH,C_M_AXI_KEYPOINTS_RUSER_WIDTH,C_M_AXI_KEYPOINTS_BUSER_WIDTH,C_M_AXI_KEYPOINTS_USER_VALUE,C_M_AXI_KEYPOINTS_PROT_VALUE,C_M_AXI_KEYPOINTS_CACHE_VALUE>* surf_Simplified_keyPoints_m_axi_U;
    surf_Simplified_pointNumber_m_axi<0,32,32,5,16,16,16,16,C_M_AXI_POINTNUMBER_ID_WIDTH,C_M_AXI_POINTNUMBER_ADDR_WIDTH,C_M_AXI_POINTNUMBER_DATA_WIDTH,C_M_AXI_POINTNUMBER_AWUSER_WIDTH,C_M_AXI_POINTNUMBER_ARUSER_WIDTH,C_M_AXI_POINTNUMBER_WUSER_WIDTH,C_M_AXI_POINTNUMBER_RUSER_WIDTH,C_M_AXI_POINTNUMBER_BUSER_WIDTH,C_M_AXI_POINTNUMBER_USER_VALUE,C_M_AXI_POINTNUMBER_PROT_VALUE,C_M_AXI_POINTNUMBER_CACHE_VALUE>* surf_Simplified_pointNumber_m_axi_U;
    surf_Simplified_entr* surf_Simplified_entr_U0;
    AXIvideo2Mat* AXIvideo2Mat_U0;
    integralImg* integralImg_U0;
    Block_codeRepl47_pro* Block_codeRepl47_pro_U0;
    HessianDetector* HessianDetector_U0;
    fifo_w32_d3_A* keyPoints_V_c_U;
    fifo_w32_d3_A* kpn_c_U;
    fifo_w8_d2_A* img_data_stream_0_V_U;
    fifo_w8_d2_A* img_data_stream_1_V_U;
    fifo_w8_d2_A* img_data_stream_2_V_U;
    fifo_w32_d2_A_x* sum_V_U;
    fifo_w32_d3_A* this_assign_1_loc_c_U;
    start_for_HessianxdS* start_for_HessianxdS_U;
    start_for_integrayd2* start_for_integrayd2_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > keyPoints_V;
    sc_signal< sc_lv<32> > kpn;
    sc_signal< sc_lv<32> > threshold;
    sc_signal< sc_logic > keyPoints_AWREADY;
    sc_signal< sc_logic > keyPoints_WREADY;
    sc_signal< sc_logic > keyPoints_ARREADY;
    sc_signal< sc_logic > keyPoints_RVALID;
    sc_signal< sc_lv<32> > keyPoints_RDATA;
    sc_signal< sc_logic > keyPoints_RLAST;
    sc_signal< sc_lv<1> > keyPoints_RID;
    sc_signal< sc_lv<1> > keyPoints_RUSER;
    sc_signal< sc_lv<2> > keyPoints_RRESP;
    sc_signal< sc_logic > keyPoints_BVALID;
    sc_signal< sc_lv<2> > keyPoints_BRESP;
    sc_signal< sc_lv<1> > keyPoints_BID;
    sc_signal< sc_lv<1> > keyPoints_BUSER;
    sc_signal< sc_logic > pointNumber_AWREADY;
    sc_signal< sc_logic > pointNumber_WREADY;
    sc_signal< sc_logic > pointNumber_ARREADY;
    sc_signal< sc_logic > pointNumber_RVALID;
    sc_signal< sc_lv<32> > pointNumber_RDATA;
    sc_signal< sc_logic > pointNumber_RLAST;
    sc_signal< sc_lv<1> > pointNumber_RID;
    sc_signal< sc_lv<1> > pointNumber_RUSER;
    sc_signal< sc_lv<2> > pointNumber_RRESP;
    sc_signal< sc_logic > pointNumber_BVALID;
    sc_signal< sc_lv<2> > pointNumber_BRESP;
    sc_signal< sc_lv<1> > pointNumber_BID;
    sc_signal< sc_lv<1> > pointNumber_BUSER;
    sc_signal< sc_logic > surf_Simplified_entr_U0_ap_start;
    sc_signal< sc_logic > surf_Simplified_entr_U0_ap_done;
    sc_signal< sc_logic > surf_Simplified_entr_U0_ap_continue;
    sc_signal< sc_logic > surf_Simplified_entr_U0_ap_idle;
    sc_signal< sc_logic > surf_Simplified_entr_U0_ap_ready;
    sc_signal< sc_logic > surf_Simplified_entr_U0_start_out;
    sc_signal< sc_logic > surf_Simplified_entr_U0_start_write;
    sc_signal< sc_lv<32> > surf_Simplified_entr_U0_keyPoints_V_out_din;
    sc_signal< sc_logic > surf_Simplified_entr_U0_keyPoints_V_out_write;
    sc_signal< sc_lv<32> > surf_Simplified_entr_U0_kpn_out_din;
    sc_signal< sc_logic > surf_Simplified_entr_U0_kpn_out_write;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_start;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_done;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_continue;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_idle;
    sc_signal< sc_logic > AXIvideo2Mat_U0_ap_ready;
    sc_signal< sc_logic > AXIvideo2Mat_U0_start_out;
    sc_signal< sc_logic > AXIvideo2Mat_U0_start_write;
    sc_signal< sc_logic > AXIvideo2Mat_U0_video_in_TREADY;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_0_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_0_V_write;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_1_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_1_V_write;
    sc_signal< sc_lv<8> > AXIvideo2Mat_U0_img_data_stream_2_V_din;
    sc_signal< sc_logic > AXIvideo2Mat_U0_img_data_stream_2_V_write;
    sc_signal< sc_logic > integralImg_U0_ap_start;
    sc_signal< sc_logic > integralImg_U0_ap_done;
    sc_signal< sc_logic > integralImg_U0_ap_continue;
    sc_signal< sc_logic > integralImg_U0_ap_idle;
    sc_signal< sc_logic > integralImg_U0_ap_ready;
    sc_signal< sc_logic > integralImg_U0_img_data_stream_0_V_read;
    sc_signal< sc_logic > integralImg_U0_img_data_stream_1_V_read;
    sc_signal< sc_logic > integralImg_U0_img_data_stream_2_V_read;
    sc_signal< sc_lv<32> > integralImg_U0_sum_V_din;
    sc_signal< sc_logic > integralImg_U0_sum_V_write;
    sc_signal< sc_logic > Block_codeRepl47_pro_U0_ap_start;
    sc_signal< sc_logic > Block_codeRepl47_pro_U0_ap_done;
    sc_signal< sc_logic > Block_codeRepl47_pro_U0_ap_continue;
    sc_signal< sc_logic > Block_codeRepl47_pro_U0_ap_idle;
    sc_signal< sc_logic > Block_codeRepl47_pro_U0_ap_ready;
    sc_signal< sc_lv<32> > Block_codeRepl47_pro_U0_this_assign_1_out_out_din;
    sc_signal< sc_logic > Block_codeRepl47_pro_U0_this_assign_1_out_out_write;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_AWVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_AWADDR;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_AWID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_AWLEN;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_keyPoints_V_AWSIZE;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_keyPoints_V_AWBURST;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_keyPoints_V_AWLOCK;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_AWCACHE;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_keyPoints_V_AWPROT;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_AWQOS;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_AWREGION;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_AWUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_WVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_WDATA;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_WSTRB;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_WLAST;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_WID;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_WUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_ARVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_ARADDR;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_ARID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_keyPoints_V_ARLEN;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_keyPoints_V_ARSIZE;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_keyPoints_V_ARBURST;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_keyPoints_V_ARLOCK;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_ARCACHE;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_keyPoints_V_ARPROT;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_ARQOS;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_keyPoints_V_ARREGION;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_keyPoints_V_ARUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_RREADY;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_keyPoints_V_BREADY;
    sc_signal< sc_logic > HessianDetector_U0_keyPoints_V_offset_read;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_AWVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_AWADDR;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_AWID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_AWLEN;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_pointNumber_AWSIZE;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_pointNumber_AWBURST;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_pointNumber_AWLOCK;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_AWCACHE;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_pointNumber_AWPROT;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_AWQOS;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_AWREGION;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_AWUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_WVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_WDATA;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_WSTRB;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_WLAST;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_WID;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_WUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_ARVALID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_ARADDR;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_ARID;
    sc_signal< sc_lv<32> > HessianDetector_U0_m_axi_pointNumber_ARLEN;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_pointNumber_ARSIZE;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_pointNumber_ARBURST;
    sc_signal< sc_lv<2> > HessianDetector_U0_m_axi_pointNumber_ARLOCK;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_ARCACHE;
    sc_signal< sc_lv<3> > HessianDetector_U0_m_axi_pointNumber_ARPROT;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_ARQOS;
    sc_signal< sc_lv<4> > HessianDetector_U0_m_axi_pointNumber_ARREGION;
    sc_signal< sc_lv<1> > HessianDetector_U0_m_axi_pointNumber_ARUSER;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_RREADY;
    sc_signal< sc_logic > HessianDetector_U0_m_axi_pointNumber_BREADY;
    sc_signal< sc_logic > HessianDetector_U0_pointNumber_offset_read;
    sc_signal< sc_logic > HessianDetector_U0_this_assign_1_loc_read;
    sc_signal< sc_logic > HessianDetector_U0_sum_V_read;
    sc_signal< sc_logic > HessianDetector_U0_ap_start;
    sc_signal< sc_logic > HessianDetector_U0_ap_done;
    sc_signal< sc_logic > HessianDetector_U0_ap_ready;
    sc_signal< sc_logic > HessianDetector_U0_ap_idle;
    sc_signal< sc_logic > HessianDetector_U0_ap_continue;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > keyPoints_V_c_full_n;
    sc_signal< sc_lv<32> > keyPoints_V_c_dout;
    sc_signal< sc_logic > keyPoints_V_c_empty_n;
    sc_signal< sc_logic > kpn_c_full_n;
    sc_signal< sc_lv<32> > kpn_c_dout;
    sc_signal< sc_logic > kpn_c_empty_n;
    sc_signal< sc_logic > img_data_stream_0_V_full_n;
    sc_signal< sc_lv<8> > img_data_stream_0_V_dout;
    sc_signal< sc_logic > img_data_stream_0_V_empty_n;
    sc_signal< sc_logic > img_data_stream_1_V_full_n;
    sc_signal< sc_lv<8> > img_data_stream_1_V_dout;
    sc_signal< sc_logic > img_data_stream_1_V_empty_n;
    sc_signal< sc_logic > img_data_stream_2_V_full_n;
    sc_signal< sc_lv<8> > img_data_stream_2_V_dout;
    sc_signal< sc_logic > img_data_stream_2_V_empty_n;
    sc_signal< sc_logic > sum_V_full_n;
    sc_signal< sc_lv<32> > sum_V_dout;
    sc_signal< sc_logic > sum_V_empty_n;
    sc_signal< sc_logic > this_assign_1_loc_c_full_n;
    sc_signal< sc_lv<32> > this_assign_1_loc_c_dout;
    sc_signal< sc_logic > this_assign_1_loc_c_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_surf_Simplified_entr_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_surf_Simplified_entr_U0_ap_ready;
    sc_signal< sc_lv<2> > surf_Simplified_entr_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_AXIvideo2Mat_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_AXIvideo2Mat_U0_ap_ready;
    sc_signal< sc_lv<2> > AXIvideo2Mat_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_Block_codeRepl47_pro_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Block_codeRepl47_pro_U0_ap_ready;
    sc_signal< sc_lv<2> > Block_codeRepl47_pro_U0_ap_ready_count;
    sc_signal< sc_lv<1> > start_for_HessianDetector_U0_din;
    sc_signal< sc_logic > start_for_HessianDetector_U0_full_n;
    sc_signal< sc_lv<1> > start_for_HessianDetector_U0_dout;
    sc_signal< sc_logic > start_for_HessianDetector_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_integralImg_U0_din;
    sc_signal< sc_logic > start_for_integralImg_U0_full_n;
    sc_signal< sc_lv<1> > start_for_integralImg_U0_dout;
    sc_signal< sc_logic > start_for_integralImg_U0_empty_n;
    sc_signal< sc_logic > integralImg_U0_start_full_n;
    sc_signal< sc_logic > integralImg_U0_start_write;
    sc_signal< sc_logic > Block_codeRepl47_pro_U0_start_full_n;
    sc_signal< sc_logic > Block_codeRepl47_pro_U0_start_write;
    sc_signal< sc_logic > HessianDetector_U0_start_full_n;
    sc_signal< sc_logic > HessianDetector_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_KEYPOINTS_USER_VALUE;
    static const int C_M_AXI_KEYPOINTS_PROT_VALUE;
    static const int C_M_AXI_KEYPOINTS_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const int C_M_AXI_POINTNUMBER_USER_VALUE;
    static const int C_M_AXI_POINTNUMBER_PROT_VALUE;
    static const int C_M_AXI_POINTNUMBER_CACHE_VALUE;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const6();
    void thread_ap_clk_no_reset_();
    void thread_AXIvideo2Mat_U0_ap_continue();
    void thread_AXIvideo2Mat_U0_ap_start();
    void thread_Block_codeRepl47_pro_U0_ap_continue();
    void thread_Block_codeRepl47_pro_U0_ap_start();
    void thread_Block_codeRepl47_pro_U0_start_full_n();
    void thread_Block_codeRepl47_pro_U0_start_write();
    void thread_HessianDetector_U0_ap_continue();
    void thread_HessianDetector_U0_ap_start();
    void thread_HessianDetector_U0_start_full_n();
    void thread_HessianDetector_U0_start_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_AXIvideo2Mat_U0_ap_ready();
    void thread_ap_sync_Block_codeRepl47_pro_U0_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_ap_sync_surf_Simplified_entr_U0_ap_ready();
    void thread_integralImg_U0_ap_continue();
    void thread_integralImg_U0_ap_start();
    void thread_integralImg_U0_start_full_n();
    void thread_integralImg_U0_start_write();
    void thread_start_for_HessianDetector_U0_din();
    void thread_start_for_integralImg_U0_din();
    void thread_surf_Simplified_entr_U0_ap_continue();
    void thread_surf_Simplified_entr_U0_ap_start();
    void thread_video_in_TREADY();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
